
xmega16e5-eeprom-restart-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000210  00802000  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802210  00802210  00001080  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000010f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032e3  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002025  00000000  00000000  00004543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001360  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  000078c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c71  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017bb  00000000  00000000  00009989  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000b144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_11>
  30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  90:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  94:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  ac:	f6 04       	cpc	r15, r6
  ae:	fc 04       	cpc	r15, r12
  b0:	fc 04       	cpc	r15, r12
  b2:	fc 04       	cpc	r15, r12
  b4:	fc 04       	cpc	r15, r12
  b6:	fc 04       	cpc	r15, r12
  b8:	fc 04       	cpc	r15, r12
  ba:	fc 04       	cpc	r15, r12
  bc:	fc 04       	cpc	r15, r12
  be:	fc 04       	cpc	r15, r12
  c0:	fc 04       	cpc	r15, r12
  c2:	fc 04       	cpc	r15, r12
  c4:	fc 04       	cpc	r15, r12
  c6:	fc 04       	cpc	r15, r12
  c8:	fc 04       	cpc	r15, r12
  ca:	fc 04       	cpc	r15, r12
  cc:	fc 04       	cpc	r15, r12
  ce:	fc 04       	cpc	r15, r12
  d0:	fc 04       	cpc	r15, r12
  d2:	fc 04       	cpc	r15, r12
  d4:	fc 04       	cpc	r15, r12
  d6:	fc 04       	cpc	r15, r12
  d8:	fc 04       	cpc	r15, r12
  da:	fc 04       	cpc	r15, r12
  dc:	fc 04       	cpc	r15, r12
  de:	fc 04       	cpc	r15, r12
  e0:	fc 04       	cpc	r15, r12
  e2:	fc 04       	cpc	r15, r12
  e4:	fc 04       	cpc	r15, r12
  e6:	cc 04       	cpc	r12, r12
  e8:	3d 04       	cpc	r3, r13
  ea:	60 04       	cpc	r6, r0
  ec:	fc 04       	cpc	r15, r12
  ee:	de 04       	cpc	r13, r14
  f0:	fc 04       	cpc	r15, r12
  f2:	fc 04       	cpc	r15, r12
  f4:	fc 04       	cpc	r15, r12
  f6:	fc 04       	cpc	r15, r12
  f8:	fc 04       	cpc	r15, r12
  fa:	fc 04       	cpc	r15, r12
  fc:	fc 04       	cpc	r15, r12
  fe:	fc 04       	cpc	r15, r12
 100:	fc 04       	cpc	r15, r12
 102:	fc 04       	cpc	r15, r12
 104:	fc 04       	cpc	r15, r12
 106:	fc 04       	cpc	r15, r12
 108:	eb 04       	cpc	r14, r11
 10a:	fc 04       	cpc	r15, r12
 10c:	8d 04       	cpc	r8, r13
 10e:	fc 04       	cpc	r15, r12
 110:	fc 04       	cpc	r15, r12
 112:	ab 04       	cpc	r10, r11
 114:	fc 04       	cpc	r15, r12
 116:	fc 04       	cpc	r15, r12
 118:	fc 04       	cpc	r15, r12
 11a:	fc 04       	cpc	r15, r12
 11c:	fc 04       	cpc	r15, r12
 11e:	fc 04       	cpc	r15, r12
 120:	fc 04       	cpc	r15, r12
 122:	fc 04       	cpc	r15, r12
 124:	fc 04       	cpc	r15, r12
 126:	ba 04       	cpc	r11, r10
 128:	3d 04       	cpc	r3, r13
 12a:	47 04       	cpc	r4, r7
 12c:	fc 04       	cpc	r15, r12
 12e:	de 04       	cpc	r13, r14
 130:	fc 04       	cpc	r15, r12
 132:	fc 04       	cpc	r15, r12
 134:	fc 04       	cpc	r15, r12
 136:	fc 04       	cpc	r15, r12
 138:	fc 04       	cpc	r15, r12
 13a:	fc 04       	cpc	r15, r12
 13c:	fc 04       	cpc	r15, r12
 13e:	fc 04       	cpc	r15, r12
 140:	fc 04       	cpc	r15, r12
 142:	fc 04       	cpc	r15, r12
 144:	fc 04       	cpc	r15, r12
 146:	fc 04       	cpc	r15, r12
 148:	eb 04       	cpc	r14, r11
 14a:	fc 04       	cpc	r15, r12
 14c:	7e 04       	cpc	r7, r14
 14e:	fc 04       	cpc	r15, r12
 150:	fc 04       	cpc	r15, r12
 152:	9c 04       	cpc	r9, r12

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	d7 e2       	ldi	r29, 0x27	; 39
 15e:	de bf       	out	0x3e, r29	; 62

00000160 <__do_copy_data>:
 160:	12 e2       	ldi	r17, 0x22	; 34
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b0 e2       	ldi	r27, 0x20	; 32
 166:	ec ed       	ldi	r30, 0xDC	; 220
 168:	fd e0       	ldi	r31, 0x0D	; 13
 16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
 16c:	05 90       	lpm	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	a0 31       	cpi	r26, 0x10	; 16
 172:	b1 07       	cpc	r27, r17
 174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
 176:	22 e2       	ldi	r18, 0x22	; 34
 178:	a0 e1       	ldi	r26, 0x10	; 16
 17a:	b2 e2       	ldi	r27, 0x22	; 34
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	ae 31       	cpi	r26, 0x1E	; 30
 182:	b2 07       	cpc	r27, r18
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
 18a:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <_exit>

0000018e <__bad_interrupt>:
 18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_READ;
	
	while(twi_transfer_complete!=1);
	
	return 0;
}
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
 198:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f4 e0       	ldi	r31, 0x04	; 4
 1a0:	80 81       	ld	r24, Z
 1a2:	88 6f       	ori	r24, 0xF8	; 248
 1a4:	80 83       	st	Z, r24
 1a6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
 1aa:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 1ae:	e4 e8       	ldi	r30, 0x84	; 132
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	80 81       	ld	r24, Z
 1b4:	8d 6c       	ori	r24, 0xCD	; 205
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <twi_repeat>:


uint8_t twi_repeat(uint8_t device_addr, uint8_t cmd, uint8_t data, uint16_t count)
{

	twi_repeat_mode = 1;
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	90 93 14 22 	sts	0x2214, r25	; 0x802214 <twi_repeat_mode>

	twi_no_of_bytes=count;
 1c0:	20 93 12 22 	sts	0x2212, r18	; 0x802212 <twi_no_of_bytes>
 1c4:	30 93 13 22 	sts	0x2213, r19	; 0x802213 <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
 1c8:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <twi_data_count>
 1cc:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <twi_data_count+0x1>
	
	twi_repeat_cmd_sent = 0;
 1d0:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <twi_repeat_cmd_sent>
	
	twi_transfer_complete=0;
 1d4:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <twi_transfer_complete>
	
	twi_repeat_cmd = cmd;
 1d8:	60 93 1b 22 	sts	0x221B, r22	; 0x80221b <twi_repeat_cmd>
	
	twi_repeat_data=data;
 1dc:	40 93 18 22 	sts	0x2218, r20	; 0x802218 <twi_repeat_data>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
 1e0:	88 0f       	add	r24, r24
 1e2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
 1e6:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <twi_transfer_complete>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <twi_repeat+0x2c>

	return 0;
}
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
 1f2:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
 1f6:	40 93 12 22 	sts	0x2212, r20	; 0x802212 <twi_no_of_bytes>
 1fa:	50 93 13 22 	sts	0x2213, r21	; 0x802213 <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
 1fe:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <twi_data_count>
 202:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
 206:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <twi_transfer_complete>
	
	twi_data=data;
 20a:	60 93 19 22 	sts	0x2219, r22	; 0x802219 <twi_data>
 20e:	70 93 1a 22 	sts	0x221A, r23	; 0x80221a <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
 212:	88 0f       	add	r24, r24
 214:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
 218:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <twi_transfer_complete>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	e1 f7       	brne	.-8      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
	
	return 0;
}
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
 23e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 242:	83 ff       	sbrs	r24, 3
 244:	03 c0       	rjmp	.+6      	; 0x24c <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
 24c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 250:	82 fd       	sbrc	r24, 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <__vector_11+0x38>
 254:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 258:	84 ff       	sbrs	r24, 4
 25a:	06 c0       	rjmp	.+12     	; 0x268 <__vector_11+0x44>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
 25c:	e3 e8       	ldi	r30, 0x83	; 131
 25e:	f4 e0       	ldi	r31, 0x04	; 4
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	}

	if(twi_transfer_complete)
 268:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <twi_transfer_complete>
 26c:	88 23       	and	r24, r24
 26e:	31 f0       	breq	.+12     	; 0x27c <__vector_11+0x58>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
 270:	e4 e8       	ldi	r30, 0x84	; 132
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
		return;
 27a:	79 c0       	rjmp	.+242    	; 0x36e <__vector_11+0x14a>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
 27c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 280:	86 ff       	sbrs	r24, 6
 282:	47 c0       	rjmp	.+142    	; 0x312 <__vector_11+0xee>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
 284:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 288:	84 fd       	sbrc	r24, 4
 28a:	43 c0       	rjmp	.+134    	; 0x312 <__vector_11+0xee>
		{
			if (twi_repeat_mode)
 28c:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <twi_repeat_mode>
 290:	88 23       	and	r24, r24
 292:	c9 f0       	breq	.+50     	; 0x2c6 <__vector_11+0xa2>
			{
				if (twi_repeat_cmd_sent)
 294:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <twi_repeat_cmd_sent>
 298:	88 23       	and	r24, r24
 29a:	69 f0       	breq	.+26     	; 0x2b6 <__vector_11+0x92>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
 29c:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <twi_repeat_data>
 2a0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
 2a4:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <twi_data_count>
 2a8:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <twi_data_count+0x1>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <twi_data_count>
 2b2:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
 2b6:	80 91 1b 22 	lds	r24, 0x221B	; 0x80221b <twi_repeat_cmd>
 2ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <twi_repeat_cmd_sent>
 2c4:	15 c0       	rjmp	.+42     	; 0x2f0 <__vector_11+0xcc>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
 2c6:	20 91 19 22 	lds	r18, 0x2219	; 0x802219 <twi_data>
 2ca:	30 91 1a 22 	lds	r19, 0x221A	; 0x80221a <twi_data+0x1>
 2ce:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <twi_data_count>
 2d2:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <twi_data_count+0x1>
 2d6:	ac 01       	movw	r20, r24
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	40 93 15 22 	sts	0x2215, r20	; 0x802215 <twi_data_count>
 2e0:	50 93 16 22 	sts	0x2216, r21	; 0x802216 <twi_data_count+0x1>
 2e4:	f9 01       	movw	r30, r18
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 1f       	adc	r31, r25
 2ea:	80 81       	ld	r24, Z
 2ec:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
 2f0:	20 91 15 22 	lds	r18, 0x2215	; 0x802215 <twi_data_count>
 2f4:	30 91 16 22 	lds	r19, 0x2216	; 0x802216 <twi_data_count+0x1>
 2f8:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <twi_no_of_bytes>
 2fc:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <twi_no_of_bytes+0x1>
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	31 f4       	brne	.+12     	; 0x312 <__vector_11+0xee>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
 312:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 316:	88 23       	and	r24, r24
 318:	54 f5       	brge	.+84     	; 0x36e <__vector_11+0x14a>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
 31a:	20 91 19 22 	lds	r18, 0x2219	; 0x802219 <twi_data>
 31e:	30 91 1a 22 	lds	r19, 0x221A	; 0x80221a <twi_data+0x1>
 322:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <twi_data_count>
 326:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <twi_data_count+0x1>
 32a:	ac 01       	movw	r20, r24
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	40 93 15 22 	sts	0x2215, r20	; 0x802215 <twi_data_count>
 334:	50 93 16 22 	sts	0x2216, r21	; 0x802216 <twi_data_count+0x1>
 338:	f9 01       	movw	r30, r18
 33a:	e8 0f       	add	r30, r24
 33c:	f9 1f       	adc	r31, r25
 33e:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
 342:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
 344:	20 91 15 22 	lds	r18, 0x2215	; 0x802215 <twi_data_count>
 348:	30 91 16 22 	lds	r19, 0x2216	; 0x802216 <twi_data_count+0x1>
 34c:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <twi_no_of_bytes>
 350:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <twi_no_of_bytes+0x1>
 354:	28 17       	cp	r18, r24
 356:	39 07       	cpc	r19, r25
 358:	39 f4       	brne	.+14     	; 0x368 <__vector_11+0x144>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <twi_transfer_complete>
 366:	03 c0       	rjmp	.+6      	; 0x36e <__vector_11+0x14a>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <clk_init>:

volatile uint8_t start_mode = 0;

void clk_init()
{
	CCP = CCP_IOREG_gc;
 388:	88 ed       	ldi	r24, 0xD8	; 216
 38a:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
 392:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 396:	81 ff       	sbrs	r24, 1
 398:	fc cf       	rjmp	.-8      	; 0x392 <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
 39a:	88 ed       	ldi	r24, 0xD8	; 216
 39c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
 3a4:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
 3a6:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
 3aa:	08 95       	ret

000003ac <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 3ac:	87 e0       	ldi	r24, 0x07	; 7
 3ae:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
 3b2:	08 95       	ret

000003b4 <oled_init>:
}

void oled_init()
{
	ssd1306_init();
 3b4:	0e 94 49 02 	call	0x492	; 0x492 <ssd1306_init>

	ssd1306_clear();
 3b8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <ssd1306_clear>
	ssd1306_setCursor(0, 0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 8f 02 	call	0x51e	; 0x51e <ssd1306_setCursor>
	ssd1306__printf("Started");
 3c4:	82 e2       	ldi	r24, 0x22	; 34
 3c6:	90 e2       	ldi	r25, 0x20	; 32
 3c8:	9f 93       	push	r25
 3ca:	8f 93       	push	r24
 3cc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ssd1306__printf>
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	08 95       	ret

000003d6 <get_mode_from_eeprom>:


uint8_t get_mode_from_eeprom()
{
	return eeprom_read_byte((uint8_t*)1);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 ce 06 	call	0xd9c	; 0xd9c <eeprom_read_byte>
}
 3de:	08 95       	ret

000003e0 <write_mode_to_eeprom>:

void write_mode_to_eeprom(uint8_t value)
{
	eeprom_write_byte((uint8_t *)1, value);
 3e0:	68 2f       	mov	r22, r24
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 d6 06 	call	0xdac	; 0xdac <eeprom_write_byte>
 3ea:	08 95       	ret

000003ec <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
 3ec:	88 ed       	ldi	r24, 0xD8	; 216
 3ee:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
 3f6:	08 95       	ret

000003f8 <main>:
}

int main(void)
{
	
	cli();
 3f8:	f8 94       	cli
	clk_init();
 3fa:	0e 94 c4 01 	call	0x388	; 0x388 <clk_init>
	interrupt_init();
 3fe:	0e 94 d6 01 	call	0x3ac	; 0x3ac <interrupt_init>
	twi_init();
 402:	0e 94 c9 00 	call	0x192	; 0x192 <twi_init>
	sei();
 406:	78 94       	sei
	oled_init();
 408:	0e 94 da 01 	call	0x3b4	; 0x3b4 <oled_init>

	PORTA.DIRCLR = PIN4_bm;
 40c:	e0 e0       	ldi	r30, 0x00	; 0
 40e:	f6 e0       	ldi	r31, 0x06	; 6
 410:	80 e1       	ldi	r24, 0x10	; 16
 412:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	84 8b       	std	Z+20, r24	; 0x14
	
	while(!(PORTA.IN & PIN4_bm));
 418:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
 41c:	84 ff       	sbrs	r24, 4
 41e:	fc cf       	rjmp	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	
	start_mode = get_mode_from_eeprom();
 420:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <get_mode_from_eeprom>
 424:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <__data_end>
	ssd1306_setCursor(1, 0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 8f 02 	call	0x51e	; 0x51e <ssd1306_setCursor>
	ssd1306__printf("Mode: %d.", start_mode);
 430:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__data_end>
 434:	1f 92       	push	r1
 436:	8f 93       	push	r24
 438:	8a e2       	ldi	r24, 0x2A	; 42
 43a:	90 e2       	ldi	r25, 0x20	; 32
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ssd1306__printf>
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0

	
	while (1)
	{
		if (!(PORTA.IN & PIN4_bm))
 44c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
 450:	84 fd       	sbrc	r24, 4
 452:	fc cf       	rjmp	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	83 ec       	ldi	r24, 0xC3	; 195
 458:	99 e0       	ldi	r25, 0x09	; 9
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
		{
			_delay_ms(100);
			start_mode++;
 466:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__data_end>
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <__data_end>
			
			if (start_mode > MAX_MODE)
 470:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__data_end>
 474:	88 30       	cpi	r24, 0x08	; 8
 476:	10 f0       	brcs	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			{
				start_mode = 0;
 478:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <__data_end>
			}
			
			write_mode_to_eeprom(start_mode);
 47c:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__data_end>
 480:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <write_mode_to_eeprom>
			while(!(PORTA.IN & PIN4_bm));
 484:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
 488:	84 ff       	sbrs	r24, 4
 48a:	fc cf       	rjmp	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			
			enable_wdt();	
 48c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <enable_wdt>
 490:	dd cf       	rjmp	.-70     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>

00000492 <ssd1306_init>:
{
    if(lineNumber<8)
    {   /* If the line number is within range
         then move it to specified line and keep track*/
        ssd1306_lineNum = lineNumber;
        ssd1306_setCursor(ssd1306_lineNum,0);
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	6b 97       	sbiw	r28, 0x1b	; 27
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	8b e1       	ldi	r24, 0x1B	; 27
 4a2:	e0 e0       	ldi	r30, 0x00	; 0
 4a4:	f0 e2       	ldi	r31, 0x20	; 32
 4a6:	de 01       	movw	r26, r28
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <ssd1306_init+0x18>
 4b2:	4b e1       	ldi	r20, 0x1B	; 27
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	be 01       	movw	r22, r28
 4b8:	6f 5f       	subi	r22, 0xFF	; 255
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8c e3       	ldi	r24, 0x3C	; 60
 4be:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	6b 96       	adiw	r28, 0x1b	; 27
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <ssd1306_clear>:
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	27 97       	sbiw	r28, 0x07	; 7
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	87 e0       	ldi	r24, 0x07	; 7
 4e0:	eb e1       	ldi	r30, 0x1B	; 27
 4e2:	f0 e2       	ldi	r31, 0x20	; 32
 4e4:	de 01       	movw	r26, r28
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	01 90       	ld	r0, Z+
 4ea:	0d 92       	st	X+, r0
 4ec:	8a 95       	dec	r24
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <ssd1306_clear+0x18>
 4f0:	47 e0       	ldi	r20, 0x07	; 7
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	be 01       	movw	r22, r28
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8c e3       	ldi	r24, 0x3C	; 60
 4fc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 500:	81 11       	cpse	r24, r1
 502:	07 c0       	rjmp	.+14     	; 0x512 <ssd1306_clear+0x42>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	32 e0       	ldi	r19, 0x02	; 2
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	60 e4       	ldi	r22, 0x40	; 64
 50c:	8c e3       	ldi	r24, 0x3C	; 60
 50e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <twi_repeat>
 512:	27 96       	adiw	r28, 0x07	; 7
 514:	cd bf       	out	0x3d, r28	; 61
 516:	de bf       	out	0x3e, r29	; 62
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <ssd1306_setCursor>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	27 97       	sbiw	r28, 0x07	; 7
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	88 30       	cpi	r24, 0x08	; 8
 52e:	c8 f4       	brcc	.+50     	; 0x562 <ssd1306_setCursor+0x44>
 530:	66 23       	and	r22, r22
 532:	bc f0       	brlt	.+46     	; 0x562 <ssd1306_setCursor+0x44>
 534:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <ssd1306_lineNum>
 538:	60 93 1d 22 	sts	0x221D, r22	; 0x80221d <ssd1306_cursorPos>
 53c:	19 82       	std	Y+1, r1	; 0x01
 53e:	91 e2       	ldi	r25, 0x21	; 33
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	6b 83       	std	Y+3, r22	; 0x03
 544:	9f e7       	ldi	r25, 0x7F	; 127
 546:	9c 83       	std	Y+4, r25	; 0x04
 548:	92 e2       	ldi	r25, 0x22	; 34
 54a:	9d 83       	std	Y+5, r25	; 0x05
 54c:	8e 83       	std	Y+6, r24	; 0x06
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	8f 83       	std	Y+7, r24	; 0x07
 552:	47 e0       	ldi	r20, 0x07	; 7
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	be 01       	movw	r22, r28
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8c e3       	ldi	r24, 0x3C	; 60
 55e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 562:	27 96       	adiw	r28, 0x07	; 7
 564:	cd bf       	out	0x3d, r28	; 61
 566:	de bf       	out	0x3e, r29	; 62
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <ssd1306_goToNextLine>:
 ****************************************************************************************************/
void  ssd1306_goToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    ssd1306_lineNum++;
 56e:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <ssd1306_lineNum>
 572:	8f 5f       	subi	r24, 0xFF	; 255
    ssd1306_lineNum = ssd1306_lineNum&0x07;
 574:	87 70       	andi	r24, 0x07	; 7
 576:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <ssd1306_lineNum>
    ssd1306_setCursor(ssd1306_lineNum,0); /* Finally move it to next line */
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 8f 02 	call	0x51e	; 0x51e <ssd1306_setCursor>
 580:	08 95       	ret

00000582 <ssd1306_displayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	27 97       	sbiw	r28, 0x07	; 7
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	de bf       	out	0x3e, r29	; 62
 592:	18 2f       	mov	r17, r24
    uint8_t dat,i=0;
    
    if(((ssd1306_cursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 594:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <ssd1306_cursorPos>
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	05 96       	adiw	r24, 0x05	; 5
 59c:	80 38       	cpi	r24, 0x80	; 128
 59e:	91 05       	cpc	r25, r1
 5a0:	14 f4       	brge	.+4      	; 0x5a6 <ssd1306_displayChar+0x24>
 5a2:	1a 30       	cpi	r17, 0x0A	; 10
 5a4:	11 f4       	brne	.+4      	; 0x5aa <ssd1306_displayChar+0x28>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        ssd1306_goToNextLine();
 5a6:	0e 94 b7 02 	call	0x56e	; 0x56e <ssd1306_goToNextLine>
    }
    if(ch!='\n') /* TODO */
 5aa:	1a 30       	cpi	r17, 0x0A	; 10
 5ac:	c9 f1       	breq	.+114    	; 0x620 <ssd1306_displayChar+0x9e>
    {
		
		uint8_t data[FONT_SIZE+2];
		data[0] = SSD1306_DATA_START;
 5ae:	80 e4       	ldi	r24, 0x40	; 64
 5b0:	89 83       	std	Y+1, r24	; 0x01
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
 5b2:	80 ee       	ldi	r24, 0xE0	; 224
 5b4:	81 0f       	add	r24, r17
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
    uint8_t dat,i=0;
 5b6:	90 e0       	ldi	r25, 0x00	; 0
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
        
        while(1)
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	49 2f       	mov	r20, r25
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	e2 0f       	add	r30, r18
 5cc:	f3 1f       	adc	r31, r19
 5ce:	ec 5c       	subi	r30, 0xCC	; 204
 5d0:	ff 4d       	sbci	r31, 0xDF	; 223
 5d2:	e4 0f       	add	r30, r20
 5d4:	f5 1f       	adc	r31, r21
 5d6:	20 81       	ld	r18, Z
            data[i+1] = dat;
 5d8:	4f 5f       	subi	r20, 0xFF	; 255
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	e1 e0       	ldi	r30, 0x01	; 1
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	e4 0f       	add	r30, r20
 5e6:	f5 1f       	adc	r31, r21
 5e8:	20 83       	st	Z, r18
            
			
            ssd1306_cursorPos++;
 5ea:	20 91 1d 22 	lds	r18, 0x221D	; 0x80221d <ssd1306_cursorPos>
 5ee:	2f 5f       	subi	r18, 0xFF	; 255
 5f0:	20 93 1d 22 	sts	0x221D, r18	; 0x80221d <ssd1306_cursorPos>
            
            i++;
 5f4:	9f 5f       	subi	r25, 0xFF	; 255
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 5f6:	95 30       	cpi	r25, 0x05	; 5
 5f8:	f9 f6       	brne	.-66     	; 0x5b8 <ssd1306_displayChar+0x36>
            {
				data[i+1] = 0;
 5fa:	e9 2f       	mov	r30, r25
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	31 96       	adiw	r30, 0x01	; 1
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	8c 0f       	add	r24, r28
 606:	9d 1f       	adc	r25, r29
 608:	e8 0f       	add	r30, r24
 60a:	f9 1f       	adc	r31, r25
 60c:	10 82       	st	Z, r1
				
                ssd1306_cursorPos++;
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	20 93 1d 22 	sts	0x221D, r18	; 0x80221d <ssd1306_cursorPos>
                break;
            }
        }
		twi_write(SSD1306_I2C_ADDRESS, data, sizeof data);
 614:	47 e0       	ldi	r20, 0x07	; 7
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	bc 01       	movw	r22, r24
 61a:	8c e3       	ldi	r24, 0x3C	; 60
 61c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
    }
}
 620:	27 96       	adiw	r28, 0x07	; 7
 622:	cd bf       	out	0x3d, r28	; 61
 624:	de bf       	out	0x3e, r29	; 62
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	08 95       	ret

0000062e <ssd1306_displayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ec 01       	movw	r28, r24
    while(*ptr)
 634:	03 c0       	rjmp	.+6      	; 0x63c <ssd1306_displayString+0xe>
        ssd1306_displayChar(*ptr++);
 636:	21 96       	adiw	r28, 0x01	; 1
 638:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
    while(*ptr)
 63c:	88 81       	ld	r24, Y
 63e:	81 11       	cpse	r24, r1
 640:	fa cf       	rjmp	.-12     	; 0x636 <ssd1306_displayString+0x8>
        ssd1306_displayChar(*ptr++);
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <ssd1306_displayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/

void ssd1306_displayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
 648:	4f 92       	push	r4
 64a:	5f 92       	push	r5
 64c:	6f 92       	push	r6
 64e:	7f 92       	push	r7
 650:	af 92       	push	r10
 652:	bf 92       	push	r11
 654:	cf 92       	push	r12
 656:	df 92       	push	r13
 658:	ef 92       	push	r14
 65a:	ff 92       	push	r15
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	2a 97       	sbiw	r28, 0x0a	; 10
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	a8 2e       	mov	r10, r24
 670:	6a 01       	movw	r12, r20
 672:	7b 01       	movw	r14, r22
 674:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	a8 12       	cpse	r10, r24
 67a:	20 c0       	rjmp	.+64     	; 0x6bc <ssd1306_displayNumber+0x74>
 67c:	1c c0       	rjmp	.+56     	; 0x6b6 <ssd1306_displayNumber+0x6e>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
 67e:	80 2f       	mov	r24, r16
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	41 e0       	ldi	r20, 0x01	; 1
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <ssd1306_displayNumber+0x46>
 68a:	44 0f       	add	r20, r20
 68c:	55 1f       	adc	r21, r21
 68e:	8a 95       	dec	r24
 690:	e2 f7       	brpl	.-8      	; 0x68a <ssd1306_displayNumber+0x42>
 692:	05 2e       	mov	r0, r21
 694:	00 0c       	add	r0, r0
 696:	66 0b       	sbc	r22, r22
 698:	77 0b       	sbc	r23, r23
 69a:	4c 21       	and	r20, r12
 69c:	5d 21       	and	r21, r13
 69e:	6e 21       	and	r22, r14
 6a0:	7f 21       	and	r23, r15
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	45 2b       	or	r20, r21
 6a6:	46 2b       	or	r20, r22
 6a8:	47 2b       	or	r20, r23
 6aa:	09 f4       	brne	.+2      	; 0x6ae <ssd1306_displayNumber+0x66>
 6ac:	80 e0       	ldi	r24, 0x00	; 0
            ssd1306_displayChar(util_Dec2Ascii(i));
 6ae:	80 5d       	subi	r24, 0xD0	; 208
 6b0:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
            v_numOfDigitsToDisplay_u8--;
 6b4:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
 6b6:	01 11       	cpse	r16, r1
 6b8:	e2 cf       	rjmp	.-60     	; 0x67e <ssd1306_displayNumber+0x36>
 6ba:	52 c0       	rjmp	.+164    	; 0x760 <ssd1306_displayNumber+0x118>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            ssd1306_displayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
 6bc:	45 2b       	or	r20, r21
 6be:	46 2b       	or	r20, r22
 6c0:	47 2b       	or	r20, r23
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <ssd1306_displayNumber+0x8a>
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	35 c0       	rjmp	.+106    	; 0x732 <ssd1306_displayNumber+0xea>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
 6c8:	80 e3       	ldi	r24, 0x30	; 48
 6ca:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 6ce:	1f 5f       	subi	r17, 0xFF	; 255
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <ssd1306_displayNumber+0x8c>
 6d2:	10 e0       	ldi	r17, 0x00	; 0
 6d4:	10 17       	cp	r17, r16
 6d6:	08 f0       	brcs	.+2      	; 0x6da <ssd1306_displayNumber+0x92>
 6d8:	43 c0       	rjmp	.+134    	; 0x760 <ssd1306_displayNumber+0x118>
 6da:	1a 30       	cpi	r17, 0x0A	; 10
 6dc:	a8 f3       	brcs	.-22     	; 0x6c8 <ssd1306_displayNumber+0x80>
 6de:	40 c0       	rjmp	.+128    	; 0x760 <ssd1306_displayNumber+0x118>
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
 6e0:	c1 14       	cp	r12, r1
 6e2:	d1 04       	cpc	r13, r1
 6e4:	e1 04       	cpc	r14, r1
 6e6:	f1 04       	cpc	r15, r1
 6e8:	d1 f0       	breq	.+52     	; 0x71e <ssd1306_displayNumber+0xd6>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 6ea:	bc 2c       	mov	r11, r12
 6ec:	4a 2c       	mov	r4, r10
 6ee:	51 2c       	mov	r5, r1
 6f0:	61 2c       	mov	r6, r1
 6f2:	71 2c       	mov	r7, r1
 6f4:	c7 01       	movw	r24, r14
 6f6:	b6 01       	movw	r22, r12
 6f8:	a3 01       	movw	r20, r6
 6fa:	92 01       	movw	r18, r4
 6fc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__udivmodsi4>
 700:	c2 2e       	mov	r12, r18
 702:	d3 2e       	mov	r13, r19
 704:	e4 2e       	mov	r14, r20
 706:	f5 2e       	mov	r15, r21
 708:	e1 e0       	ldi	r30, 0x01	; 1
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	ec 0f       	add	r30, r28
 70e:	fd 1f       	adc	r31, r29
 710:	e1 0f       	add	r30, r17
 712:	f1 1d       	adc	r31, r1
 714:	a2 9e       	mul	r10, r18
 716:	b0 18       	sub	r11, r0
 718:	11 24       	eor	r1, r1
 71a:	b0 82       	st	Z, r11
 71c:	09 c0       	rjmp	.+18     	; 0x730 <ssd1306_displayNumber+0xe8>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
 71e:	0b 30       	cpi	r16, 0x0B	; 11
 720:	e8 f4       	brcc	.+58     	; 0x75c <ssd1306_displayNumber+0x114>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
 722:	e1 e0       	ldi	r30, 0x01	; 1
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ec 0f       	add	r30, r28
 728:	fd 1f       	adc	r31, r29
 72a:	e1 0f       	add	r30, r17
 72c:	f1 1d       	adc	r31, r1
 72e:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 730:	1f 5f       	subi	r17, 0xFF	; 255
 732:	10 17       	cp	r17, r16
 734:	a8 f2       	brcs	.-86     	; 0x6e0 <ssd1306_displayNumber+0x98>
 736:	12 c0       	rjmp	.+36     	; 0x75c <ssd1306_displayNumber+0x114>
        }
        
        while(i!=0)
        {
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
 738:	e1 2f       	mov	r30, r17
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	31 97       	sbiw	r30, 0x01	; 1
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	8c 0f       	add	r24, r28
 744:	9d 1f       	adc	r25, r29
 746:	e8 0f       	add	r30, r24
 748:	f9 1f       	adc	r31, r25
 74a:	80 81       	ld	r24, Z
 74c:	8a 30       	cpi	r24, 0x0A	; 10
 74e:	10 f0       	brcs	.+4      	; 0x754 <ssd1306_displayNumber+0x10c>
 750:	89 5c       	subi	r24, 0xC9	; 201
 752:	01 c0       	rjmp	.+2      	; 0x756 <ssd1306_displayNumber+0x10e>
 754:	80 5d       	subi	r24, 0xD0	; 208
 756:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
            i--;
 75a:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 75c:	11 11       	cpse	r17, r1
 75e:	ec cf       	rjmp	.-40     	; 0x738 <ssd1306_displayNumber+0xf0>
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
 760:	2a 96       	adiw	r28, 0x0a	; 10
 762:	cd bf       	out	0x3d, r28	; 61
 764:	de bf       	out	0x3e, r29	; 62
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	df 90       	pop	r13
 774:	cf 90       	pop	r12
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	7f 90       	pop	r7
 77c:	6f 90       	pop	r6
 77e:	5f 90       	pop	r5
 780:	4f 90       	pop	r4
 782:	08 95       	ret

00000784 <ssd1306_displayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/

void ssd1306_displayFloatNumber(double v_floatNum_f32)
{
 784:	8f 92       	push	r8
 786:	9f 92       	push	r9
 788:	af 92       	push	r10
 78a:	bf 92       	push	r11
 78c:	cf 92       	push	r12
 78e:	df 92       	push	r13
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	6b 01       	movw	r12, r22
 796:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
    
    v_temp_u32 = (uint32_t) v_floatNum_f32;
 798:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
 79c:	4b 01       	movw	r8, r22
 79e:	5c 01       	movw	r10, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	ab 01       	movw	r20, r22
 7a4:	bc 01       	movw	r22, r24
 7a6:	8a e0       	ldi	r24, 0x0A	; 10
 7a8:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
    
    ssd1306_displayChar('.');
 7ac:	8e e2       	ldi	r24, 0x2E	; 46
 7ae:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
    
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
 7b2:	c5 01       	movw	r24, r10
 7b4:	b4 01       	movw	r22, r8
 7b6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatunsisf>
 7ba:	9b 01       	movw	r18, r22
 7bc:	ac 01       	movw	r20, r24
 7be:	c7 01       	movw	r24, r14
 7c0:	b6 01       	movw	r22, r12
 7c2:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__subsf3>
    v_temp_u32 = v_floatNum_f32 * 1000000;
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	34 e2       	ldi	r19, 0x24	; 36
 7ca:	44 e7       	ldi	r20, 0x74	; 116
 7cc:	59 e4       	ldi	r21, 0x49	; 73
 7ce:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 7d2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixunssfsi>
 7d6:	ab 01       	movw	r20, r22
 7d8:	bc 01       	movw	r22, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 7da:	2f ef       	ldi	r18, 0xFF	; 255
 7dc:	8a e0       	ldi	r24, 0x0A	; 10
 7de:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
}
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	df 90       	pop	r13
 7e8:	cf 90       	pop	r12
 7ea:	bf 90       	pop	r11
 7ec:	af 90       	pop	r10
 7ee:	9f 90       	pop	r9
 7f0:	8f 90       	pop	r8
 7f2:	08 95       	ret

000007f4 <ssd1306__printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/

void ssd1306__printf(const char *argList, ...)
{
 7f4:	4f 92       	push	r4
 7f6:	5f 92       	push	r5
 7f8:	6f 92       	push	r6
 7fa:	7f 92       	push	r7
 7fc:	af 92       	push	r10
 7fe:	bf 92       	push	r11
 800:	ef 92       	push	r14
 802:	ff 92       	push	r15
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	fe 01       	movw	r30, r28
 810:	3e 96       	adiw	r30, 0x0e	; 14
 812:	e1 90       	ld	r14, Z+
 814:	f1 90       	ld	r15, Z+
    uint8_t v_numOfDigitsToDisp_u8;

    double v_floatNum_f32;

    
    va_start(argp, argList);
 816:	3f 01       	movw	r6, r30
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 818:	f2 c0       	rjmp	.+484    	; 0x9fe <__DATA_REGION_LENGTH__+0x1fe>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 81a:	85 32       	cpi	r24, 0x25	; 37
 81c:	09 f0       	breq	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81e:	ea c0       	rjmp	.+468    	; 0x9f4 <__DATA_REGION_LENGTH__+0x1f4>
        {
            ptr++;
 820:	c7 01       	movw	r24, r14
 822:	01 96       	adiw	r24, 0x01	; 1
            ch = *ptr;
 824:	d7 01       	movw	r26, r14
 826:	11 96       	adiw	r26, 0x01	; 1
 828:	ec 91       	ld	r30, X
            if((ch>=0x30) && (ch<=0x39))
 82a:	20 ed       	ldi	r18, 0xD0	; 208
 82c:	2e 0f       	add	r18, r30
 82e:	2a 30       	cpi	r18, 0x0A	; 10
 830:	90 f0       	brcs	.+36     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
 832:	7c 01       	movw	r14, r24
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 834:	1f ef       	ldi	r17, 0xFF	; 255
 836:	15 c0       	rjmp	.+42     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 838:	81 2f       	mov	r24, r17
 83a:	88 0f       	add	r24, r24
 83c:	98 2f       	mov	r25, r24
 83e:	99 0f       	add	r25, r25
 840:	99 0f       	add	r25, r25
 842:	89 0f       	add	r24, r25
 844:	8e 0f       	add	r24, r30
 846:	10 ed       	ldi	r17, 0xD0	; 208
 848:	18 0f       	add	r17, r24
                    ptr++;
 84a:	bf ef       	ldi	r27, 0xFF	; 255
 84c:	eb 1a       	sub	r14, r27
 84e:	fb 0a       	sbc	r15, r27
                    ch = *ptr;
 850:	d7 01       	movw	r26, r14
 852:	ec 91       	ld	r30, X
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	7c 01       	movw	r14, r24
 858:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
 85a:	80 ed       	ldi	r24, 0xD0	; 208
 85c:	8e 0f       	add	r24, r30
 85e:	8a 30       	cpi	r24, 0x0A	; 10
 860:	58 f3       	brcs	.-42     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
 862:	8e 2f       	mov	r24, r30
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	fc 01       	movw	r30, r24
 868:	b5 97       	sbiw	r30, 0x25	; 37
 86a:	e4 35       	cpi	r30, 0x54	; 84
 86c:	f1 05       	cpc	r31, r1
 86e:	08 f0       	brcs	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	c3 c0       	rjmp	.+390    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
 872:	ea 5a       	subi	r30, 0xAA	; 170
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 87a:	53 01       	movw	r10, r6
 87c:	b2 e0       	ldi	r27, 0x02	; 2
 87e:	ab 0e       	add	r10, r27
 880:	b1 1c       	adc	r11, r1
                    ssd1306_displayChar(ch);
 882:	f3 01       	movw	r30, r6
 884:	80 81       	ld	r24, Z
 886:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
            
            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 88a:	35 01       	movw	r6, r10
                    ssd1306_displayChar(ch);
                    break;
 88c:	b5 c0       	rjmp	.+362    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 88e:	53 01       	movw	r10, r6
 890:	f2 e0       	ldi	r31, 0x02	; 2
 892:	af 0e       	add	r10, r31
 894:	b1 1c       	adc	r11, r1
 896:	d3 01       	movw	r26, r6
 898:	6d 90       	ld	r6, X+
 89a:	7c 90       	ld	r7, X
                    if(v_num_s16<0)
 89c:	77 20       	and	r7, r7
 89e:	34 f4       	brge	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
 8a0:	71 94       	neg	r7
 8a2:	61 94       	neg	r6
 8a4:	71 08       	sbc	r7, r1
                        ssd1306_displayChar('-');
 8a6:	8d e2       	ldi	r24, 0x2D	; 45
 8a8:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
 8ac:	a3 01       	movw	r20, r6
 8ae:	77 0c       	add	r7, r7
 8b0:	66 0b       	sbc	r22, r22
 8b2:	77 0b       	sbc	r23, r23
 8b4:	21 2f       	mov	r18, r17
 8b6:	8a e0       	ldi	r24, 0x0A	; 10
 8b8:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    ch = va_arg(argp, int);
                    ssd1306_displayChar(ch);
                    break;
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 8bc:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
 8be:	9c c0       	rjmp	.+312    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 8c0:	53 01       	movw	r10, r6
 8c2:	b4 e0       	ldi	r27, 0x04	; 4
 8c4:	ab 0e       	add	r10, r27
 8c6:	b1 1c       	adc	r11, r1
 8c8:	f3 01       	movw	r30, r6
 8ca:	40 80       	ld	r4, Z
 8cc:	51 80       	ldd	r5, Z+1	; 0x01
 8ce:	62 80       	ldd	r6, Z+2	; 0x02
 8d0:	73 80       	ldd	r7, Z+3	; 0x03
                    if(v_num_s32<0)
 8d2:	77 20       	and	r7, r7
 8d4:	5c f4       	brge	.+22     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
 8d6:	70 94       	com	r7
 8d8:	60 94       	com	r6
 8da:	50 94       	com	r5
 8dc:	40 94       	com	r4
 8de:	41 1c       	adc	r4, r1
 8e0:	51 1c       	adc	r5, r1
 8e2:	61 1c       	adc	r6, r1
 8e4:	71 1c       	adc	r7, r1
                        ssd1306_displayChar('-');
 8e6:	8d e2       	ldi	r24, 0x2D	; 45
 8e8:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
 8ec:	21 2f       	mov	r18, r17
 8ee:	b3 01       	movw	r22, r6
 8f0:	a2 01       	movw	r20, r4
 8f2:	8a e0       	ldi	r24, 0x0A	; 10
 8f4:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 8f8:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
 8fa:	7e c0       	rjmp	.+252    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 8fc:	53 01       	movw	r10, r6
 8fe:	f2 e0       	ldi	r31, 0x02	; 2
 900:	af 0e       	add	r10, r31
 902:	b1 1c       	adc	r11, r1
 904:	d3 01       	movw	r26, r6
 906:	4d 91       	ld	r20, X+
 908:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	21 2f       	mov	r18, r17
 910:	8a e0       	ldi	r24, 0x0A	; 10
 912:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 916:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 918:	6f c0       	rjmp	.+222    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 91a:	53 01       	movw	r10, r6
 91c:	b4 e0       	ldi	r27, 0x04	; 4
 91e:	ab 0e       	add	r10, r27
 920:	b1 1c       	adc	r11, r1
 922:	f3 01       	movw	r30, r6
 924:	40 81       	ld	r20, Z
 926:	51 81       	ldd	r21, Z+1	; 0x01
 928:	62 81       	ldd	r22, Z+2	; 0x02
 92a:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 92c:	21 2f       	mov	r18, r17
 92e:	8a e0       	ldi	r24, 0x0A	; 10
 930:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 934:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 936:	60 c0       	rjmp	.+192    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 938:	53 01       	movw	r10, r6
 93a:	f2 e0       	ldi	r31, 0x02	; 2
 93c:	af 0e       	add	r10, r31
 93e:	b1 1c       	adc	r11, r1
 940:	d3 01       	movw	r26, r6
 942:	4d 91       	ld	r20, X+
 944:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	21 2f       	mov	r18, r17
 94c:	80 e1       	ldi	r24, 0x10	; 16
 94e:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    v_num_u32 = va_arg(argp, uint32_t);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 952:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 954:	51 c0       	rjmp	.+162    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 956:	53 01       	movw	r10, r6
 958:	b4 e0       	ldi	r27, 0x04	; 4
 95a:	ab 0e       	add	r10, r27
 95c:	b1 1c       	adc	r11, r1
 95e:	f3 01       	movw	r30, r6
 960:	40 81       	ld	r20, Z
 962:	51 81       	ldd	r21, Z+1	; 0x01
 964:	62 81       	ldd	r22, Z+2	; 0x02
 966:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 968:	21 2f       	mov	r18, r17
 96a:	80 e1       	ldi	r24, 0x10	; 16
 96c:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 970:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 972:	42 c0       	rjmp	.+132    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 974:	53 01       	movw	r10, r6
 976:	f2 e0       	ldi	r31, 0x02	; 2
 978:	af 0e       	add	r10, r31
 97a:	b1 1c       	adc	r11, r1
 97c:	d3 01       	movw	r26, r6
 97e:	4d 91       	ld	r20, X+
 980:	5c 91       	ld	r21, X
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 982:	1f 3f       	cpi	r17, 0xFF	; 255
 984:	09 f4       	brne	.+2      	; 0x988 <__DATA_REGION_LENGTH__+0x188>
                        v_numOfDigitsToDisp_u8 = 16;
 986:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	21 2f       	mov	r18, r17
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 994:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 996:	30 c0       	rjmp	.+96     	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 998:	53 01       	movw	r10, r6
 99a:	b4 e0       	ldi	r27, 0x04	; 4
 99c:	ab 0e       	add	r10, r27
 99e:	b1 1c       	adc	r11, r1
 9a0:	f3 01       	movw	r30, r6
 9a2:	40 81       	ld	r20, Z
 9a4:	51 81       	ldd	r21, Z+1	; 0x01
 9a6:	62 81       	ldd	r22, Z+2	; 0x02
 9a8:	73 81       	ldd	r23, Z+3	; 0x03
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 9aa:	1f 3f       	cpi	r17, 0xFF	; 255
 9ac:	09 f4       	brne	.+2      	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
                        v_numOfDigitsToDisp_u8 = 16;
 9ae:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 9b0:	21 2f       	mov	r18, r17
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	0e 94 24 03 	call	0x648	; 0x648 <ssd1306_displayNumber>
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 9b8:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 9ba:	1e c0       	rjmp	.+60     	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
 9bc:	53 01       	movw	r10, r6
 9be:	f4 e0       	ldi	r31, 0x04	; 4
 9c0:	af 0e       	add	r10, r31
 9c2:	b1 1c       	adc	r11, r1
 9c4:	d3 01       	movw	r26, r6
 9c6:	6d 91       	ld	r22, X+
 9c8:	7d 91       	ld	r23, X+
 9ca:	8d 91       	ld	r24, X+
 9cc:	9c 91       	ld	r25, X
                    ssd1306_displayFloatNumber(v_floatNum_f32);
 9ce:	0e 94 c2 03 	call	0x784	; 0x784 <ssd1306_displayFloatNumber>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
 9d2:	35 01       	movw	r6, r10
                    ssd1306_displayFloatNumber(v_floatNum_f32);

                    break;
 9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 9d6:	53 01       	movw	r10, r6
 9d8:	b2 e0       	ldi	r27, 0x02	; 2
 9da:	ab 0e       	add	r10, r27
 9dc:	b1 1c       	adc	r11, r1
                    ssd1306_displayString(str);
 9de:	f3 01       	movw	r30, r6
 9e0:	80 81       	ld	r24, Z
 9e2:	91 81       	ldd	r25, Z+1	; 0x01
 9e4:	0e 94 17 03 	call	0x62e	; 0x62e <ssd1306_displayString>
                    break;
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 9e8:	35 01       	movw	r6, r10
                    ssd1306_displayString(str);
                    break;
 9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
                    
                case '%':
                    ssd1306_displayChar('%');
 9ec:	85 e2       	ldi	r24, 0x25	; 37
 9ee:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>
                    break;
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            ssd1306_displayChar(ch);
 9f4:	0e 94 c1 02 	call	0x582	; 0x582 <ssd1306_displayChar>

    
    va_start(argp, argList);
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 9f8:	ff ef       	ldi	r31, 0xFF	; 255
 9fa:	ef 1a       	sub	r14, r31
 9fc:	ff 0a       	sbc	r15, r31
 9fe:	d7 01       	movw	r26, r14
 a00:	8c 91       	ld	r24, X
 a02:	81 11       	cpse	r24, r1
 a04:	0a cf       	rjmp	.-492    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
            ssd1306_displayChar(ch);
        }
    }
    
    va_end(argp);
}
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	bf 90       	pop	r11
 a12:	af 90       	pop	r10
 a14:	7f 90       	pop	r7
 a16:	6f 90       	pop	r6
 a18:	5f 90       	pop	r5
 a1a:	4f 90       	pop	r4
 a1c:	08 95       	ret

00000a1e <__subsf3>:
 a1e:	50 58       	subi	r21, 0x80	; 128

00000a20 <__addsf3>:
 a20:	bb 27       	eor	r27, r27
 a22:	aa 27       	eor	r26, r26
 a24:	0e 94 27 05 	call	0xa4e	; 0xa4e <__addsf3x>
 a28:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
 a2c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
 a30:	38 f0       	brcs	.+14     	; 0xa40 <__addsf3+0x20>
 a32:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
 a36:	20 f0       	brcs	.+8      	; 0xa40 <__addsf3+0x20>
 a38:	39 f4       	brne	.+14     	; 0xa48 <__addsf3+0x28>
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	19 f4       	brne	.+6      	; 0xa44 <__addsf3+0x24>
 a3e:	26 f4       	brtc	.+8      	; 0xa48 <__addsf3+0x28>
 a40:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
 a44:	0e f4       	brtc	.+2      	; 0xa48 <__addsf3+0x28>
 a46:	e0 95       	com	r30
 a48:	e7 fb       	bst	r30, 7
 a4a:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>

00000a4e <__addsf3x>:
 a4e:	e9 2f       	mov	r30, r25
 a50:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
 a54:	58 f3       	brcs	.-42     	; 0xa2c <__addsf3+0xc>
 a56:	ba 17       	cp	r27, r26
 a58:	62 07       	cpc	r22, r18
 a5a:	73 07       	cpc	r23, r19
 a5c:	84 07       	cpc	r24, r20
 a5e:	95 07       	cpc	r25, r21
 a60:	20 f0       	brcs	.+8      	; 0xa6a <__addsf3x+0x1c>
 a62:	79 f4       	brne	.+30     	; 0xa82 <__addsf3x+0x34>
 a64:	a6 f5       	brtc	.+104    	; 0xace <__addsf3x+0x80>
 a66:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
 a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3x+0x20>
 a6c:	e0 95       	com	r30
 a6e:	0b 2e       	mov	r0, r27
 a70:	ba 2f       	mov	r27, r26
 a72:	a0 2d       	mov	r26, r0
 a74:	0b 01       	movw	r0, r22
 a76:	b9 01       	movw	r22, r18
 a78:	90 01       	movw	r18, r0
 a7a:	0c 01       	movw	r0, r24
 a7c:	ca 01       	movw	r24, r20
 a7e:	a0 01       	movw	r20, r0
 a80:	11 24       	eor	r1, r1
 a82:	ff 27       	eor	r31, r31
 a84:	59 1b       	sub	r21, r25
 a86:	99 f0       	breq	.+38     	; 0xaae <__addsf3x+0x60>
 a88:	59 3f       	cpi	r21, 0xF9	; 249
 a8a:	50 f4       	brcc	.+20     	; 0xaa0 <__addsf3x+0x52>
 a8c:	50 3e       	cpi	r21, 0xE0	; 224
 a8e:	68 f1       	brcs	.+90     	; 0xaea <__addsf3x+0x9c>
 a90:	1a 16       	cp	r1, r26
 a92:	f0 40       	sbci	r31, 0x00	; 0
 a94:	a2 2f       	mov	r26, r18
 a96:	23 2f       	mov	r18, r19
 a98:	34 2f       	mov	r19, r20
 a9a:	44 27       	eor	r20, r20
 a9c:	58 5f       	subi	r21, 0xF8	; 248
 a9e:	f3 cf       	rjmp	.-26     	; 0xa86 <__addsf3x+0x38>
 aa0:	46 95       	lsr	r20
 aa2:	37 95       	ror	r19
 aa4:	27 95       	ror	r18
 aa6:	a7 95       	ror	r26
 aa8:	f0 40       	sbci	r31, 0x00	; 0
 aaa:	53 95       	inc	r21
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__addsf3x+0x52>
 aae:	7e f4       	brtc	.+30     	; 0xace <__addsf3x+0x80>
 ab0:	1f 16       	cp	r1, r31
 ab2:	ba 0b       	sbc	r27, r26
 ab4:	62 0b       	sbc	r22, r18
 ab6:	73 0b       	sbc	r23, r19
 ab8:	84 0b       	sbc	r24, r20
 aba:	ba f0       	brmi	.+46     	; 0xaea <__addsf3x+0x9c>
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	a1 f0       	breq	.+40     	; 0xae8 <__addsf3x+0x9a>
 ac0:	ff 0f       	add	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	c2 f7       	brpl	.-16     	; 0xabc <__addsf3x+0x6e>
 acc:	0e c0       	rjmp	.+28     	; 0xaea <__addsf3x+0x9c>
 ace:	ba 0f       	add	r27, r26
 ad0:	62 1f       	adc	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	48 f4       	brcc	.+18     	; 0xaea <__addsf3x+0x9c>
 ad8:	87 95       	ror	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	f7 95       	ror	r31
 ae2:	9e 3f       	cpi	r25, 0xFE	; 254
 ae4:	08 f0       	brcs	.+2      	; 0xae8 <__addsf3x+0x9a>
 ae6:	b0 cf       	rjmp	.-160    	; 0xa48 <__addsf3+0x28>
 ae8:	93 95       	inc	r25
 aea:	88 0f       	add	r24, r24
 aec:	08 f0       	brcs	.+2      	; 0xaf0 <__addsf3x+0xa2>
 aee:	99 27       	eor	r25, r25
 af0:	ee 0f       	add	r30, r30
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	08 95       	ret

00000af8 <__fixunssfsi>:
 af8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_splitA>
 afc:	88 f0       	brcs	.+34     	; 0xb20 <__fixunssfsi+0x28>
 afe:	9f 57       	subi	r25, 0x7F	; 127
 b00:	98 f0       	brcs	.+38     	; 0xb28 <__fixunssfsi+0x30>
 b02:	b9 2f       	mov	r27, r25
 b04:	99 27       	eor	r25, r25
 b06:	b7 51       	subi	r27, 0x17	; 23
 b08:	b0 f0       	brcs	.+44     	; 0xb36 <__fixunssfsi+0x3e>
 b0a:	e1 f0       	breq	.+56     	; 0xb44 <__fixunssfsi+0x4c>
 b0c:	66 0f       	add	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	1a f0       	brmi	.+6      	; 0xb1c <__fixunssfsi+0x24>
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__fixunssfsi+0x14>
 b1a:	14 c0       	rjmp	.+40     	; 0xb44 <__fixunssfsi+0x4c>
 b1c:	b1 30       	cpi	r27, 0x01	; 1
 b1e:	91 f0       	breq	.+36     	; 0xb44 <__fixunssfsi+0x4c>
 b20:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_zero>
 b24:	b1 e0       	ldi	r27, 0x01	; 1
 b26:	08 95       	ret
 b28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_zero>
 b2c:	67 2f       	mov	r22, r23
 b2e:	78 2f       	mov	r23, r24
 b30:	88 27       	eor	r24, r24
 b32:	b8 5f       	subi	r27, 0xF8	; 248
 b34:	39 f0       	breq	.+14     	; 0xb44 <__fixunssfsi+0x4c>
 b36:	b9 3f       	cpi	r27, 0xF9	; 249
 b38:	cc f3       	brlt	.-14     	; 0xb2c <__fixunssfsi+0x34>
 b3a:	86 95       	lsr	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	b3 95       	inc	r27
 b42:	d9 f7       	brne	.-10     	; 0xb3a <__fixunssfsi+0x42>
 b44:	3e f4       	brtc	.+14     	; 0xb54 <__fixunssfsi+0x5c>
 b46:	90 95       	com	r25
 b48:	80 95       	com	r24
 b4a:	70 95       	com	r23
 b4c:	61 95       	neg	r22
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__floatunsisf>:
 b56:	e8 94       	clt
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__floatsisf+0x12>

00000b5a <__floatsisf>:
 b5a:	97 fb       	bst	r25, 7
 b5c:	3e f4       	brtc	.+14     	; 0xb6c <__floatsisf+0x12>
 b5e:	90 95       	com	r25
 b60:	80 95       	com	r24
 b62:	70 95       	com	r23
 b64:	61 95       	neg	r22
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	99 23       	and	r25, r25
 b6e:	a9 f0       	breq	.+42     	; 0xb9a <__floatsisf+0x40>
 b70:	f9 2f       	mov	r31, r25
 b72:	96 e9       	ldi	r25, 0x96	; 150
 b74:	bb 27       	eor	r27, r27
 b76:	93 95       	inc	r25
 b78:	f6 95       	lsr	r31
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f1 11       	cpse	r31, r1
 b84:	f8 cf       	rjmp	.-16     	; 0xb76 <__floatsisf+0x1c>
 b86:	fa f4       	brpl	.+62     	; 0xbc6 <__floatsisf+0x6c>
 b88:	bb 0f       	add	r27, r27
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__floatsisf+0x36>
 b8c:	60 ff       	sbrs	r22, 0
 b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <__floatsisf+0x6c>
 b90:	6f 5f       	subi	r22, 0xFF	; 255
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	16 c0       	rjmp	.+44     	; 0xbc6 <__floatsisf+0x6c>
 b9a:	88 23       	and	r24, r24
 b9c:	11 f0       	breq	.+4      	; 0xba2 <__floatsisf+0x48>
 b9e:	96 e9       	ldi	r25, 0x96	; 150
 ba0:	11 c0       	rjmp	.+34     	; 0xbc4 <__floatsisf+0x6a>
 ba2:	77 23       	and	r23, r23
 ba4:	21 f0       	breq	.+8      	; 0xbae <__floatsisf+0x54>
 ba6:	9e e8       	ldi	r25, 0x8E	; 142
 ba8:	87 2f       	mov	r24, r23
 baa:	76 2f       	mov	r23, r22
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__floatsisf+0x5e>
 bae:	66 23       	and	r22, r22
 bb0:	71 f0       	breq	.+28     	; 0xbce <__floatsisf+0x74>
 bb2:	96 e8       	ldi	r25, 0x86	; 134
 bb4:	86 2f       	mov	r24, r22
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	2a f0       	brmi	.+10     	; 0xbc6 <__floatsisf+0x6c>
 bbc:	9a 95       	dec	r25
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	da f7       	brpl	.-10     	; 0xbbc <__floatsisf+0x62>
 bc6:	88 0f       	add	r24, r24
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <__fp_inf>:
 bd0:	97 f9       	bld	r25, 7
 bd2:	9f 67       	ori	r25, 0x7F	; 127
 bd4:	80 e8       	ldi	r24, 0x80	; 128
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	08 95       	ret

00000bdc <__fp_nan>:
 bdc:	9f ef       	ldi	r25, 0xFF	; 255
 bde:	80 ec       	ldi	r24, 0xC0	; 192
 be0:	08 95       	ret

00000be2 <__fp_pscA>:
 be2:	00 24       	eor	r0, r0
 be4:	0a 94       	dec	r0
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	09 06       	cpc	r0, r25
 bee:	08 95       	ret

00000bf0 <__fp_pscB>:
 bf0:	00 24       	eor	r0, r0
 bf2:	0a 94       	dec	r0
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	14 06       	cpc	r1, r20
 bfa:	05 06       	cpc	r0, r21
 bfc:	08 95       	ret

00000bfe <__fp_round>:
 bfe:	09 2e       	mov	r0, r25
 c00:	03 94       	inc	r0
 c02:	00 0c       	add	r0, r0
 c04:	11 f4       	brne	.+4      	; 0xc0a <__fp_round+0xc>
 c06:	88 23       	and	r24, r24
 c08:	52 f0       	brmi	.+20     	; 0xc1e <__fp_round+0x20>
 c0a:	bb 0f       	add	r27, r27
 c0c:	40 f4       	brcc	.+16     	; 0xc1e <__fp_round+0x20>
 c0e:	bf 2b       	or	r27, r31
 c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0x18>
 c12:	60 ff       	sbrs	r22, 0
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <__fp_round+0x20>
 c16:	6f 5f       	subi	r22, 0xFF	; 255
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	08 95       	ret

00000c20 <__fp_split3>:
 c20:	57 fd       	sbrc	r21, 7
 c22:	90 58       	subi	r25, 0x80	; 128
 c24:	44 0f       	add	r20, r20
 c26:	55 1f       	adc	r21, r21
 c28:	59 f0       	breq	.+22     	; 0xc40 <__fp_splitA+0x10>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	71 f0       	breq	.+28     	; 0xc4a <__fp_splitA+0x1a>
 c2e:	47 95       	ror	r20

00000c30 <__fp_splitA>:
 c30:	88 0f       	add	r24, r24
 c32:	97 fb       	bst	r25, 7
 c34:	99 1f       	adc	r25, r25
 c36:	61 f0       	breq	.+24     	; 0xc50 <__fp_splitA+0x20>
 c38:	9f 3f       	cpi	r25, 0xFF	; 255
 c3a:	79 f0       	breq	.+30     	; 0xc5a <__fp_splitA+0x2a>
 c3c:	87 95       	ror	r24
 c3e:	08 95       	ret
 c40:	12 16       	cp	r1, r18
 c42:	13 06       	cpc	r1, r19
 c44:	14 06       	cpc	r1, r20
 c46:	55 1f       	adc	r21, r21
 c48:	f2 cf       	rjmp	.-28     	; 0xc2e <__fp_split3+0xe>
 c4a:	46 95       	lsr	r20
 c4c:	f1 df       	rcall	.-30     	; 0xc30 <__fp_splitA>
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__fp_splitA+0x30>
 c50:	16 16       	cp	r1, r22
 c52:	17 06       	cpc	r1, r23
 c54:	18 06       	cpc	r1, r24
 c56:	99 1f       	adc	r25, r25
 c58:	f1 cf       	rjmp	.-30     	; 0xc3c <__fp_splitA+0xc>
 c5a:	86 95       	lsr	r24
 c5c:	71 05       	cpc	r23, r1
 c5e:	61 05       	cpc	r22, r1
 c60:	08 94       	sec
 c62:	08 95       	ret

00000c64 <__fp_zero>:
 c64:	e8 94       	clt

00000c66 <__fp_szero>:
 c66:	bb 27       	eor	r27, r27
 c68:	66 27       	eor	r22, r22
 c6a:	77 27       	eor	r23, r23
 c6c:	cb 01       	movw	r24, r22
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <__mulsf3>:
 c72:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3x>
 c76:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_round>
 c7a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fp_pscA>
 c7e:	38 f0       	brcs	.+14     	; 0xc8e <__mulsf3+0x1c>
 c80:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_pscB>
 c84:	20 f0       	brcs	.+8      	; 0xc8e <__mulsf3+0x1c>
 c86:	95 23       	and	r25, r21
 c88:	11 f0       	breq	.+4      	; 0xc8e <__mulsf3+0x1c>
 c8a:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 c8e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_nan>
 c92:	11 24       	eor	r1, r1
 c94:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>

00000c98 <__mulsf3x>:
 c98:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_split3>
 c9c:	70 f3       	brcs	.-36     	; 0xc7a <__mulsf3+0x8>

00000c9e <__mulsf3_pse>:
 c9e:	95 9f       	mul	r25, r21
 ca0:	c1 f3       	breq	.-16     	; 0xc92 <__mulsf3+0x20>
 ca2:	95 0f       	add	r25, r21
 ca4:	50 e0       	ldi	r21, 0x00	; 0
 ca6:	55 1f       	adc	r21, r21
 ca8:	62 9f       	mul	r22, r18
 caa:	f0 01       	movw	r30, r0
 cac:	72 9f       	mul	r23, r18
 cae:	bb 27       	eor	r27, r27
 cb0:	f0 0d       	add	r31, r0
 cb2:	b1 1d       	adc	r27, r1
 cb4:	63 9f       	mul	r22, r19
 cb6:	aa 27       	eor	r26, r26
 cb8:	f0 0d       	add	r31, r0
 cba:	b1 1d       	adc	r27, r1
 cbc:	aa 1f       	adc	r26, r26
 cbe:	64 9f       	mul	r22, r20
 cc0:	66 27       	eor	r22, r22
 cc2:	b0 0d       	add	r27, r0
 cc4:	a1 1d       	adc	r26, r1
 cc6:	66 1f       	adc	r22, r22
 cc8:	82 9f       	mul	r24, r18
 cca:	22 27       	eor	r18, r18
 ccc:	b0 0d       	add	r27, r0
 cce:	a1 1d       	adc	r26, r1
 cd0:	62 1f       	adc	r22, r18
 cd2:	73 9f       	mul	r23, r19
 cd4:	b0 0d       	add	r27, r0
 cd6:	a1 1d       	adc	r26, r1
 cd8:	62 1f       	adc	r22, r18
 cda:	83 9f       	mul	r24, r19
 cdc:	a0 0d       	add	r26, r0
 cde:	61 1d       	adc	r22, r1
 ce0:	22 1f       	adc	r18, r18
 ce2:	74 9f       	mul	r23, r20
 ce4:	33 27       	eor	r19, r19
 ce6:	a0 0d       	add	r26, r0
 ce8:	61 1d       	adc	r22, r1
 cea:	23 1f       	adc	r18, r19
 cec:	84 9f       	mul	r24, r20
 cee:	60 0d       	add	r22, r0
 cf0:	21 1d       	adc	r18, r1
 cf2:	82 2f       	mov	r24, r18
 cf4:	76 2f       	mov	r23, r22
 cf6:	6a 2f       	mov	r22, r26
 cf8:	11 24       	eor	r1, r1
 cfa:	9f 57       	subi	r25, 0x7F	; 127
 cfc:	50 40       	sbci	r21, 0x00	; 0
 cfe:	9a f0       	brmi	.+38     	; 0xd26 <__mulsf3_pse+0x88>
 d00:	f1 f0       	breq	.+60     	; 0xd3e <__mulsf3_pse+0xa0>
 d02:	88 23       	and	r24, r24
 d04:	4a f0       	brmi	.+18     	; 0xd18 <__mulsf3_pse+0x7a>
 d06:	ee 0f       	add	r30, r30
 d08:	ff 1f       	adc	r31, r31
 d0a:	bb 1f       	adc	r27, r27
 d0c:	66 1f       	adc	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	91 50       	subi	r25, 0x01	; 1
 d14:	50 40       	sbci	r21, 0x00	; 0
 d16:	a9 f7       	brne	.-22     	; 0xd02 <__mulsf3_pse+0x64>
 d18:	9e 3f       	cpi	r25, 0xFE	; 254
 d1a:	51 05       	cpc	r21, r1
 d1c:	80 f0       	brcs	.+32     	; 0xd3e <__mulsf3_pse+0xa0>
 d1e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_inf>
 d22:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_szero>
 d26:	5f 3f       	cpi	r21, 0xFF	; 255
 d28:	e4 f3       	brlt	.-8      	; 0xd22 <__mulsf3_pse+0x84>
 d2a:	98 3e       	cpi	r25, 0xE8	; 232
 d2c:	d4 f3       	brlt	.-12     	; 0xd22 <__mulsf3_pse+0x84>
 d2e:	86 95       	lsr	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	b7 95       	ror	r27
 d36:	f7 95       	ror	r31
 d38:	e7 95       	ror	r30
 d3a:	9f 5f       	subi	r25, 0xFF	; 255
 d3c:	c1 f7       	brne	.-16     	; 0xd2e <__mulsf3_pse+0x90>
 d3e:	fe 2b       	or	r31, r30
 d40:	88 0f       	add	r24, r24
 d42:	91 1d       	adc	r25, r1
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__udivmodsi4>:
 d4c:	a1 e2       	ldi	r26, 0x21	; 33
 d4e:	1a 2e       	mov	r1, r26
 d50:	aa 1b       	sub	r26, r26
 d52:	bb 1b       	sub	r27, r27
 d54:	fd 01       	movw	r30, r26
 d56:	0d c0       	rjmp	.+26     	; 0xd72 <__udivmodsi4_ep>

00000d58 <__udivmodsi4_loop>:
 d58:	aa 1f       	adc	r26, r26
 d5a:	bb 1f       	adc	r27, r27
 d5c:	ee 1f       	adc	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	a2 17       	cp	r26, r18
 d62:	b3 07       	cpc	r27, r19
 d64:	e4 07       	cpc	r30, r20
 d66:	f5 07       	cpc	r31, r21
 d68:	20 f0       	brcs	.+8      	; 0xd72 <__udivmodsi4_ep>
 d6a:	a2 1b       	sub	r26, r18
 d6c:	b3 0b       	sbc	r27, r19
 d6e:	e4 0b       	sbc	r30, r20
 d70:	f5 0b       	sbc	r31, r21

00000d72 <__udivmodsi4_ep>:
 d72:	66 1f       	adc	r22, r22
 d74:	77 1f       	adc	r23, r23
 d76:	88 1f       	adc	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	1a 94       	dec	r1
 d7c:	69 f7       	brne	.-38     	; 0xd58 <__udivmodsi4_loop>
 d7e:	60 95       	com	r22
 d80:	70 95       	com	r23
 d82:	80 95       	com	r24
 d84:	90 95       	com	r25
 d86:	9b 01       	movw	r18, r22
 d88:	ac 01       	movw	r20, r24
 d8a:	bd 01       	movw	r22, r26
 d8c:	cf 01       	movw	r24, r30
 d8e:	08 95       	ret

00000d90 <__tablejump2__>:
 d90:	ee 0f       	add	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	05 90       	lpm	r0, Z+
 d96:	f4 91       	lpm	r31, Z
 d98:	e0 2d       	mov	r30, r0
 d9a:	09 94       	ijmp

00000d9c <eeprom_read_byte>:
 d9c:	03 d0       	rcall	.+6      	; 0xda4 <eeprom_mapen>
 d9e:	80 81       	ld	r24, Z
 da0:	99 27       	eor	r25, r25
 da2:	08 95       	ret

00000da4 <eeprom_mapen>:
 da4:	fc 01       	movw	r30, r24
 da6:	e0 50       	subi	r30, 0x00	; 0
 da8:	f0 4f       	sbci	r31, 0xF0	; 240
 daa:	08 95       	ret

00000dac <eeprom_write_byte>:
 dac:	26 2f       	mov	r18, r22

00000dae <eeprom_write_r18>:
 dae:	af 93       	push	r26
 db0:	bf 93       	push	r27
 db2:	e0 ec       	ldi	r30, 0xC0	; 192
 db4:	f1 e0       	ldi	r31, 0x01	; 1
 db6:	37 85       	ldd	r19, Z+15	; 0x0f
 db8:	37 fd       	sbrc	r19, 7
 dba:	fd cf       	rjmp	.-6      	; 0xdb6 <eeprom_write_r18+0x8>
 dbc:	dc 01       	movw	r26, r24
 dbe:	a0 50       	subi	r26, 0x00	; 0
 dc0:	b0 4f       	sbci	r27, 0xF0	; 240
 dc2:	2c 93       	st	X, r18
 dc4:	25 e3       	ldi	r18, 0x35	; 53
 dc6:	22 87       	std	Z+10, r18	; 0x0a
 dc8:	28 ed       	ldi	r18, 0xD8	; 216
 dca:	31 e0       	ldi	r19, 0x01	; 1
 dcc:	24 bf       	out	0x34, r18	; 52
 dce:	33 87       	std	Z+11, r19	; 0x0b
 dd0:	01 96       	adiw	r24, 0x01	; 1
 dd2:	bf 91       	pop	r27
 dd4:	af 91       	pop	r26
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
