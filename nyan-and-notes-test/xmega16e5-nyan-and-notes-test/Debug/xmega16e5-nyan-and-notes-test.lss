
xmega16e5-nyan-and-notes-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003cc  00802000  00001382  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  008023cc  008023cc  000017e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004be9  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002194  00000000  00000000  000065dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001651  00000000  00000000  00008771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  00009dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000326b  00000000  00000000  0000a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e85  00000000  00000000  0000d673  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_3>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_11>
      30:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_12>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      90:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      94:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      ac:	e7 07       	cpc	r30, r23
      ae:	ed 07       	cpc	r30, r29
      b0:	ed 07       	cpc	r30, r29
      b2:	ed 07       	cpc	r30, r29
      b4:	ed 07       	cpc	r30, r29
      b6:	ed 07       	cpc	r30, r29
      b8:	ed 07       	cpc	r30, r29
      ba:	ed 07       	cpc	r30, r29
      bc:	ed 07       	cpc	r30, r29
      be:	ed 07       	cpc	r30, r29
      c0:	ed 07       	cpc	r30, r29
      c2:	ed 07       	cpc	r30, r29
      c4:	ed 07       	cpc	r30, r29
      c6:	ed 07       	cpc	r30, r29
      c8:	ed 07       	cpc	r30, r29
      ca:	ed 07       	cpc	r30, r29
      cc:	ed 07       	cpc	r30, r29
      ce:	ed 07       	cpc	r30, r29
      d0:	ed 07       	cpc	r30, r29
      d2:	ed 07       	cpc	r30, r29
      d4:	ed 07       	cpc	r30, r29
      d6:	ed 07       	cpc	r30, r29
      d8:	ed 07       	cpc	r30, r29
      da:	ed 07       	cpc	r30, r29
      dc:	ed 07       	cpc	r30, r29
      de:	ed 07       	cpc	r30, r29
      e0:	ed 07       	cpc	r30, r29
      e2:	ed 07       	cpc	r30, r29
      e4:	ed 07       	cpc	r30, r29
      e6:	bd 07       	cpc	r27, r29
      e8:	2e 07       	cpc	r18, r30
      ea:	51 07       	cpc	r21, r17
      ec:	ed 07       	cpc	r30, r29
      ee:	cf 07       	cpc	r28, r31
      f0:	ed 07       	cpc	r30, r29
      f2:	ed 07       	cpc	r30, r29
      f4:	ed 07       	cpc	r30, r29
      f6:	ed 07       	cpc	r30, r29
      f8:	ed 07       	cpc	r30, r29
      fa:	ed 07       	cpc	r30, r29
      fc:	ed 07       	cpc	r30, r29
      fe:	ed 07       	cpc	r30, r29
     100:	ed 07       	cpc	r30, r29
     102:	ed 07       	cpc	r30, r29
     104:	ed 07       	cpc	r30, r29
     106:	ed 07       	cpc	r30, r29
     108:	dc 07       	cpc	r29, r28
     10a:	ed 07       	cpc	r30, r29
     10c:	7e 07       	cpc	r23, r30
     10e:	ed 07       	cpc	r30, r29
     110:	ed 07       	cpc	r30, r29
     112:	9c 07       	cpc	r25, r28
     114:	ed 07       	cpc	r30, r29
     116:	ed 07       	cpc	r30, r29
     118:	ed 07       	cpc	r30, r29
     11a:	ed 07       	cpc	r30, r29
     11c:	ed 07       	cpc	r30, r29
     11e:	ed 07       	cpc	r30, r29
     120:	ed 07       	cpc	r30, r29
     122:	ed 07       	cpc	r30, r29
     124:	ed 07       	cpc	r30, r29
     126:	ab 07       	cpc	r26, r27
     128:	2e 07       	cpc	r18, r30
     12a:	38 07       	cpc	r19, r24
     12c:	ed 07       	cpc	r30, r29
     12e:	cf 07       	cpc	r28, r31
     130:	ed 07       	cpc	r30, r29
     132:	ed 07       	cpc	r30, r29
     134:	ed 07       	cpc	r30, r29
     136:	ed 07       	cpc	r30, r29
     138:	ed 07       	cpc	r30, r29
     13a:	ed 07       	cpc	r30, r29
     13c:	ed 07       	cpc	r30, r29
     13e:	ed 07       	cpc	r30, r29
     140:	ed 07       	cpc	r30, r29
     142:	ed 07       	cpc	r30, r29
     144:	ed 07       	cpc	r30, r29
     146:	ed 07       	cpc	r30, r29
     148:	dc 07       	cpc	r29, r28
     14a:	ed 07       	cpc	r30, r29
     14c:	6f 07       	cpc	r22, r31
     14e:	ed 07       	cpc	r30, r29
     150:	ed 07       	cpc	r30, r29
     152:	8d 07       	cpc	r24, r29

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	cd bf       	out	0x3d, r28	; 61
     15c:	d7 e2       	ldi	r29, 0x27	; 39
     15e:	de bf       	out	0x3e, r29	; 62

00000160 <__do_copy_data>:
     160:	13 e2       	ldi	r17, 0x23	; 35
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b0 e2       	ldi	r27, 0x20	; 32
     166:	e2 e8       	ldi	r30, 0x82	; 130
     168:	f3 e1       	ldi	r31, 0x13	; 19
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	ac 3c       	cpi	r26, 0xCC	; 204
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	24 e2       	ldi	r18, 0x24	; 36
     178:	ac ec       	ldi	r26, 0xCC	; 204
     17a:	b3 e2       	ldi	r27, 0x23	; 35
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	aa 30       	cpi	r26, 0x0A	; 10
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <main>
     18a:	0c 94 bf 09 	jmp	0x137e	; 0x137e <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <twi_init>:
//TODO: Add error handling

void twi_init()
{

	TWIC_MASTER_BAUD=TWI_BAUD; //baud rate is set such that ftwi=100KHz
     192:	84 e9       	ldi	r24, 0x94	; 148
     194:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
	TWIC_CTRL=0x00; //SDA hold time off, normal TWI operation
     198:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
	TWIC_MASTER_CTRLA|=TWI_MASTER_INTLVL_gm|TWI_MASTER_RIEN_bm|TWI_MASTER_WIEN_bm|TWI_MASTER_ENABLE_bm; //enable high priority read and write interrupt, enable MASTER
     19c:	e1 e8       	ldi	r30, 0x81	; 129
     19e:	f4 e0       	ldi	r31, 0x04	; 4
     1a0:	80 81       	ld	r24, Z
     1a2:	88 6f       	ori	r24, 0xF8	; 248
     1a4:	80 83       	st	Z, r24
	TWIC_MASTER_CTRLB=0x00; //no inactive bus timeout, no quick command and smart mode enabled
     1a6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
	TWIC_MASTER_CTRLC=0x00; //initially send ACK and no CMD selected
     1aa:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	TWIC_MASTER_STATUS|=TWI_MASTER_RIF_bm|TWI_MASTER_WIF_bm|TWI_MASTER_ARBLOST_bm|TWI_MASTER_BUSERR_bm|TWI_MASTER_BUSSTATE0_bm; //clear all flags initially and select bus state IDLE
     1ae:	e4 e8       	ldi	r30, 0x84	; 132
     1b0:	f4 e0       	ldi	r31, 0x04	; 4
     1b2:	80 81       	ld	r24, Z
     1b4:	8d 6c       	ori	r24, 0xCD	; 205
     1b6:	80 83       	st	Z, r24
     1b8:	08 95       	ret

000001ba <twi_read>:


uint8_t twi_read(uint8_t device_addr, uint8_t * buffer, uint16_t len)
{
	
	twi_no_of_bytes=len;
     1ba:	40 93 fe 23 	sts	0x23FE, r20	; 0x8023fe <twi_no_of_bytes>
     1be:	50 93 ff 23 	sts	0x23FF, r21	; 0x8023ff <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     1c2:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <twi_data_count>
     1c6:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     1ca:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <twi_transfer_complete>
	
	twi_data = buffer;
     1ce:	60 93 05 24 	sts	0x2405, r22	; 0x802405 <twi_data>
     1d2:	70 93 06 24 	sts	0x2406, r23	; 0x802406 <twi_data+0x1>

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_READ;
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	81 60       	ori	r24, 0x01	; 1
     1de:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     1e2:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <twi_transfer_complete>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <twi_read+0x28>
	
	return 0;
}
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	08 95       	ret

000001ee <twi_repeat>:


uint8_t twi_repeat(uint8_t device_addr, uint8_t cmd, uint8_t data, uint16_t count)
{

	twi_repeat_mode = 1;
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	90 93 00 24 	sts	0x2400, r25	; 0x802400 <twi_repeat_mode>

	twi_no_of_bytes=count;
     1f4:	20 93 fe 23 	sts	0x23FE, r18	; 0x8023fe <twi_no_of_bytes>
     1f8:	30 93 ff 23 	sts	0x23FF, r19	; 0x8023ff <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     1fc:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <twi_data_count>
     200:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <twi_data_count+0x1>
	
	twi_repeat_cmd_sent = 0;
     204:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <twi_repeat_cmd_sent>
	
	twi_transfer_complete=0;
     208:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <twi_transfer_complete>
	
	twi_repeat_cmd = cmd;
     20c:	60 93 07 24 	sts	0x2407, r22	; 0x802407 <twi_repeat_cmd>
	
	twi_repeat_data=data;
     210:	40 93 04 24 	sts	0x2404, r20	; 0x802404 <twi_repeat_data>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     214:	88 0f       	add	r24, r24
     216:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     21a:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <twi_transfer_complete>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	e1 f7       	brne	.-8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>

	return 0;
}
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	08 95       	ret

00000226 <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     226:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     22a:	40 93 fe 23 	sts	0x23FE, r20	; 0x8023fe <twi_no_of_bytes>
     22e:	50 93 ff 23 	sts	0x23FF, r21	; 0x8023ff <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     232:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <twi_data_count>
     236:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     23a:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <twi_transfer_complete>
	
	twi_data=data;
     23e:	60 93 05 24 	sts	0x2405, r22	; 0x802405 <twi_data>
     242:	70 93 06 24 	sts	0x2406, r23	; 0x802406 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     246:	88 0f       	add	r24, r24
     248:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     24c:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <twi_transfer_complete>
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	e1 f7       	brne	.-8      	; 0x24c <twi_write+0x26>
	
	return 0;
}
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret

00000258 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
     262:	2f 93       	push	r18
     264:	3f 93       	push	r19
     266:	4f 93       	push	r20
     268:	5f 93       	push	r21
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	ef 93       	push	r30
     270:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     272:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     276:	83 ff       	sbrs	r24, 3
     278:	03 c0       	rjmp	.+6      	; 0x280 <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     280:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     284:	82 fd       	sbrc	r24, 2
     286:	04 c0       	rjmp	.+8      	; 0x290 <__vector_11+0x38>
     288:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     28c:	84 ff       	sbrs	r24, 4
     28e:	08 c0       	rjmp	.+16     	; 0x2a0 <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     290:	e3 e8       	ldi	r30, 0x83	; 131
     292:	f4 e0       	ldi	r31, 0x04	; 4
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     29c:	80 93 03 24 	sts	0x2403, r24	; 0x802403 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     2a0:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <twi_transfer_complete>
     2a4:	88 23       	and	r24, r24
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     2a8:	e4 e8       	ldi	r30, 0x84	; 132
     2aa:	f4 e0       	ldi	r31, 0x04	; 4
     2ac:	80 81       	ld	r24, Z
     2ae:	80 64       	ori	r24, 0x40	; 64
     2b0:	80 83       	st	Z, r24
		return;
     2b2:	79 c0       	rjmp	.+242    	; 0x3a6 <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     2b4:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     2b8:	86 ff       	sbrs	r24, 6
     2ba:	47 c0       	rjmp	.+142    	; 0x34a <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     2bc:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     2c0:	84 fd       	sbrc	r24, 4
     2c2:	43 c0       	rjmp	.+134    	; 0x34a <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     2c4:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <twi_repeat_mode>
     2c8:	88 23       	and	r24, r24
     2ca:	c9 f0       	breq	.+50     	; 0x2fe <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     2cc:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <twi_repeat_cmd_sent>
     2d0:	88 23       	and	r24, r24
     2d2:	69 f0       	breq	.+26     	; 0x2ee <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     2d4:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <twi_repeat_data>
     2d8:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     2dc:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <twi_data_count>
     2e0:	90 91 02 24 	lds	r25, 0x2402	; 0x802402 <twi_data_count+0x1>
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <twi_data_count>
     2ea:	90 93 02 24 	sts	0x2402, r25	; 0x802402 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     2ee:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <twi_repeat_cmd>
     2f2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <twi_repeat_cmd_sent>
     2fc:	15 c0       	rjmp	.+42     	; 0x328 <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     2fe:	20 91 05 24 	lds	r18, 0x2405	; 0x802405 <twi_data>
     302:	30 91 06 24 	lds	r19, 0x2406	; 0x802406 <twi_data+0x1>
     306:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <twi_data_count>
     30a:	90 91 02 24 	lds	r25, 0x2402	; 0x802402 <twi_data_count+0x1>
     30e:	ac 01       	movw	r20, r24
     310:	4f 5f       	subi	r20, 0xFF	; 255
     312:	5f 4f       	sbci	r21, 0xFF	; 255
     314:	40 93 01 24 	sts	0x2401, r20	; 0x802401 <twi_data_count>
     318:	50 93 02 24 	sts	0x2402, r21	; 0x802402 <twi_data_count+0x1>
     31c:	f9 01       	movw	r30, r18
     31e:	e8 0f       	add	r30, r24
     320:	f9 1f       	adc	r31, r25
     322:	80 81       	ld	r24, Z
     324:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     328:	20 91 01 24 	lds	r18, 0x2401	; 0x802401 <twi_data_count>
     32c:	30 91 02 24 	lds	r19, 0x2402	; 0x802402 <twi_data_count+0x1>
     330:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <twi_no_of_bytes>
     334:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <twi_no_of_bytes+0x1>
     338:	28 17       	cp	r18, r24
     33a:	39 07       	cpc	r19, r25
     33c:	31 f4       	brne	.+12     	; 0x34a <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 03 24 	sts	0x2403, r24	; 0x802403 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     34a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     34e:	88 23       	and	r24, r24
     350:	54 f5       	brge	.+84     	; 0x3a6 <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     352:	20 91 05 24 	lds	r18, 0x2405	; 0x802405 <twi_data>
     356:	30 91 06 24 	lds	r19, 0x2406	; 0x802406 <twi_data+0x1>
     35a:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <twi_data_count>
     35e:	90 91 02 24 	lds	r25, 0x2402	; 0x802402 <twi_data_count+0x1>
     362:	ac 01       	movw	r20, r24
     364:	4f 5f       	subi	r20, 0xFF	; 255
     366:	5f 4f       	sbci	r21, 0xFF	; 255
     368:	40 93 01 24 	sts	0x2401, r20	; 0x802401 <twi_data_count>
     36c:	50 93 02 24 	sts	0x2402, r21	; 0x802402 <twi_data_count+0x1>
     370:	f9 01       	movw	r30, r18
     372:	e8 0f       	add	r30, r24
     374:	f9 1f       	adc	r31, r25
     376:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     37a:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     37c:	20 91 01 24 	lds	r18, 0x2401	; 0x802401 <twi_data_count>
     380:	30 91 02 24 	lds	r19, 0x2402	; 0x802402 <twi_data_count+0x1>
     384:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <twi_no_of_bytes>
     388:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <twi_no_of_bytes+0x1>
     38c:	28 17       	cp	r18, r24
     38e:	39 07       	cpc	r19, r25
     390:	39 f4       	brne	.+14     	; 0x3a0 <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 03 24 	sts	0x2403, r24	; 0x802403 <twi_transfer_complete>
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <clk_init>:

uint8_t key_buttons = 0;

void clk_init()
{
	CCP = CCP_IOREG_gc;
     3c0:	88 ed       	ldi	r24, 0xD8	; 216
     3c2:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
     3ca:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
     3ce:	81 ff       	sbrs	r24, 1
     3d0:	fc cf       	rjmp	.-8      	; 0x3ca <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
     3d2:	88 ed       	ldi	r24, 0xD8	; 216
     3d4:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
     3dc:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
     3de:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
     3e2:	08 95       	ret

000003e4 <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     3e4:	87 e0       	ldi	r24, 0x07	; 7
     3e6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
     3ea:	08 95       	ret

000003ec <nyan_timer_C4_init>:


void nyan_timer_C4_init()
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
     3ec:	e0 e0       	ldi	r30, 0x00	; 0
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
     3f2:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	86 83       	std	Z+6, r24	; 0x06
	TCC4.CTRLA = 0;
     3f8:	10 82       	st	Z, r1
	TCC4.PER = 13787 ;
     3fa:	8b ed       	ldi	r24, 0xDB	; 219
     3fc:	95 e3       	ldi	r25, 0x35	; 53
     3fe:	86 a3       	std	Z+38, r24	; 0x26
     400:	97 a3       	std	Z+39, r25	; 0x27
     402:	08 95       	ret

00000404 <nyan_timer_C5_init>:
}

//Treble Counter
void nyan_timer_C5_init()
{
	PORTC.DIRSET = PIN4_bm;
     404:	80 e1       	ldi	r24, 0x10	; 16
     406:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	//PORTC.REMAP = PORT_TC4A_bm;

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
     40a:	e0 e4       	ldi	r30, 0x40	; 64
     40c:	f8 e0       	ldi	r31, 0x08	; 8
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc | TC_CCBMODE_COMP_gc;
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
     416:	84 e0       	ldi	r24, 0x04	; 4
     418:	80 83       	st	Z, r24
     41a:	08 95       	ret

0000041c <nyan_timer_D5_init>:
}

//Base Counter
void nyan_timer_D5_init()
{
	PORTD.DIRSET = PIN4_bm;
     41c:	80 e1       	ldi	r24, 0x10	; 16
     41e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	//PORTC.REMAP = PORT_TC4A_bm;
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
     422:	e0 e4       	ldi	r30, 0x40	; 64
     424:	f9 e0       	ldi	r31, 0x09	; 9
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc | TC_CCBMODE_COMP_gc;
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	80 83       	st	Z, r24
     432:	08 95       	ret

00000434 <setNoteAndBeat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t setNoteAndBeat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	6c 01       	movw	r12, r24
     446:	e9 01       	movw	r28, r18
     448:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	f6 01       	movw	r30, r12
     44e:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
     450:	88 81       	ld	r24, Y
     452:	99 81       	ldd	r25, Y+1	; 0x01
     454:	68 0f       	add	r22, r24
     456:	79 1f       	adc	r23, r25
     458:	fb 01       	movw	r30, r22
     45a:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
     45c:	89 2f       	mov	r24, r25
     45e:	82 95       	swap	r24
     460:	86 95       	lsr	r24
     462:	86 95       	lsr	r24
     464:	83 70       	andi	r24, 0x03	; 3
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <setNoteAndBeat+0x3c>
     46c:	66 0f       	add	r22, r22
     46e:	77 1f       	adc	r23, r23
     470:	8a 95       	dec	r24
     472:	e2 f7       	brpl	.-8      	; 0x46c <setNoteAndBeat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
     474:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
     476:	f8 01       	movw	r30, r16
     478:	20 81       	ld	r18, Z
     47a:	31 81       	ldd	r19, Z+1	; 0x01
     47c:	42 0f       	add	r20, r18
     47e:	53 1f       	adc	r21, r19
     480:	fa 01       	movw	r30, r20
     482:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	0c 90       	ld	r0, X
     488:	02 c0       	rjmp	.+4      	; 0x48e <setNoteAndBeat+0x5a>
     48a:	35 95       	asr	r19
     48c:	27 95       	ror	r18
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <setNoteAndBeat+0x56>
     492:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
     494:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
     496:	f6 01       	movw	r30, r12
     498:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
     49a:	9f 73       	andi	r25, 0x3F	; 63
     49c:	89 2f       	mov	r24, r25
     49e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
     4a0:	00 97       	sbiw	r24, 0x00	; 0
     4a2:	51 f0       	breq	.+20     	; 0x4b8 <setNoteAndBeat+0x84>
	{
		count = noteClocks[index] / 2;
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	fc 01       	movw	r30, r24
     4aa:	ed 5e       	subi	r30, 0xED	; 237
     4ac:	fe 4d       	sbci	r31, 0xDE	; 222
     4ae:	40 81       	ld	r20, Z
     4b0:	51 81       	ldd	r21, Z+1	; 0x01
     4b2:	56 95       	lsr	r21
     4b4:	47 95       	ror	r20
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <setNoteAndBeat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
     4bc:	28 81       	ld	r18, Y
     4be:	39 81       	ldd	r19, Y+1	; 0x01
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	28 83       	st	Y, r18
     4c6:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
     4c8:	9c 91       	ld	r25, X
     4ca:	9f 5f       	subi	r25, 0xFF	; 255
     4cc:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
     4ce:	98 30       	cpi	r25, 0x08	; 8
     4d0:	39 f4       	brne	.+14     	; 0x4e0 <setNoteAndBeat+0xac>
	{
		*extBitPosPtr = 0;
     4d2:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
     4d4:	f8 01       	movw	r30, r16
     4d6:	80 81       	ld	r24, Z
     4d8:	91 81       	ldd	r25, Z+1	; 0x01
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	80 83       	st	Z, r24
     4de:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
     4e0:	ca 01       	movw	r24, r20
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <setNoteAndBeatTreble>:


//Uses the current note indexes for treble
void setNoteAndBeatTreble()
{
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = setNoteAndBeat(&noteBeatCountTreble, notesTreblePtr, notesExtTreblePtr, &noteIndexTreble, &noteExtIndexTreble, &noteExtBitPosTreble);
     4fc:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <notesExtTreblePtr>
     500:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <notesExtTreblePtr+0x1>
     504:	60 91 1c 20 	lds	r22, 0x201C	; 0x80201c <notesTreblePtr>
     508:	70 91 1d 20 	lds	r23, 0x201D	; 0x80201d <notesTreblePtr+0x1>
     50c:	0f 2e       	mov	r0, r31
     50e:	f9 ed       	ldi	r31, 0xD9	; 217
     510:	ef 2e       	mov	r14, r31
     512:	f3 e2       	ldi	r31, 0x23	; 35
     514:	ff 2e       	mov	r15, r31
     516:	f0 2d       	mov	r31, r0
     518:	0a ed       	ldi	r16, 0xDA	; 218
     51a:	13 e2       	ldi	r17, 0x23	; 35
     51c:	2c ed       	ldi	r18, 0xDC	; 220
     51e:	33 e2       	ldi	r19, 0x23	; 35
     520:	88 ed       	ldi	r24, 0xD8	; 216
     522:	93 e2       	ldi	r25, 0x23	; 35
     524:	0e 94 1a 02 	call	0x434	; 0x434 <setNoteAndBeat>
     528:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
     52c:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <setNoteAndBeatBass>:

//Uses the current note indexes for Bass
void setNoteAndBeatBass()
{
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = setNoteAndBeat(&noteBeatCountBass, notesBassPtr, notesExtBassPtr, &noteIndexBass, &noteExtIndexBass, &noteExtBitPosBass);
     542:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <notesExtBassPtr>
     546:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <notesExtBassPtr+0x1>
     54a:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <notesBassPtr>
     54e:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <notesBassPtr+0x1>
     552:	0f 2e       	mov	r0, r31
     554:	fe ec       	ldi	r31, 0xCE	; 206
     556:	ef 2e       	mov	r14, r31
     558:	f3 e2       	ldi	r31, 0x23	; 35
     55a:	ff 2e       	mov	r15, r31
     55c:	f0 2d       	mov	r31, r0
     55e:	0f ec       	ldi	r16, 0xCF	; 207
     560:	13 e2       	ldi	r17, 0x23	; 35
     562:	21 ed       	ldi	r18, 0xD1	; 209
     564:	33 e2       	ldi	r19, 0x23	; 35
     566:	8d ec       	ldi	r24, 0xCD	; 205
     568:	93 e2       	ldi	r25, 0x23	; 35
     56a:	0e 94 1a 02 	call	0x434	; 0x434 <setNoteAndBeat>
     56e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
     572:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	08 95       	ret

00000580 <oled_init>:



void oled_init()
{
	ssd1306_init();
     580:	0e 94 3a 05 	call	0xa74	; 0xa74 <ssd1306_init>

	ssd1306_clear();
     584:	0e 94 59 05 	call	0xab2	; 0xab2 <ssd1306_clear>
	ssd1306_setCursor(0, 0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 80 05 	call	0xb00	; 0xb00 <ssd1306_setCursor>
	ssd1306__printf("Started");
     590:	8f ec       	ldi	r24, 0xCF	; 207
     592:	91 e2       	ldi	r25, 0x21	; 33
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ssd1306__printf>
}
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	08 95       	ret

000005a2 <expander_init>:

void expander_init()
{
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <expander_init+0x6>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     5ae:	86 e0       	ldi	r24, 0x06	; 6
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	8a 83       	std	Y+2, r24	; 0x02
     5b6:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     5b8:	43 e0       	ldi	r20, 0x03	; 3
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	80 e2       	ldi	r24, 0x20	; 32
     5c4:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
	
}
     5c8:	23 96       	adiw	r28, 0x03	; 3
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <expander_read_port>:


uint8_t expander_read_port(uint8_t portAddr)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	00 d0       	rcall	.+0      	; 0x5da <expander_read_port+0x6>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     5de:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	be 01       	movw	r22, r28
     5e6:	6e 5f       	subi	r22, 0xFE	; 254
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
	
	twi_read(addr, &port_val, 1);
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	80 e2       	ldi	r24, 0x20	; 32
     5fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <twi_read>
	
	return port_val;
	
}
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <expander_read_ports>:

uint16_t expander_read_ports()
{
     60c:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <expander_read_port>
     614:	c8 2f       	mov	r28, r24
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <expander_read_port>
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	98 2f       	mov	r25, r24
     620:	88 27       	eor	r24, r24
	return port_data;
	
}
     622:	8c 0f       	add	r24, r28
     624:	91 1d       	adc	r25, r1
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <d_to_b>:

void d_to_b(uint16_t val, char * bits)
{
     62a:	ac 01       	movw	r20, r24
	uint8_t i = 0;
     62c:	90 e0       	ldi	r25, 0x00	; 0
	
	while (i < 16)
     62e:	14 c0       	rjmp	.+40     	; 0x658 <d_to_b+0x2e>
	{
		bits[i] = '0';
     630:	fb 01       	movw	r30, r22
     632:	e9 0f       	add	r30, r25
     634:	f1 1d       	adc	r31, r1
     636:	20 e3       	ldi	r18, 0x30	; 48
     638:	20 83       	st	Z, r18
		if (val & (0x8000 >> i))
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e8       	ldi	r19, 0x80	; 128
     63e:	09 2e       	mov	r0, r25
     640:	02 c0       	rjmp	.+4      	; 0x646 <d_to_b+0x1c>
     642:	36 95       	lsr	r19
     644:	27 95       	ror	r18
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <d_to_b+0x18>
     64a:	24 23       	and	r18, r20
     64c:	35 23       	and	r19, r21
     64e:	23 2b       	or	r18, r19
     650:	11 f0       	breq	.+4      	; 0x656 <d_to_b+0x2c>
		{
			bits[i] = '1';
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	80 83       	st	Z, r24
		}
		i++;
     656:	9f 5f       	subi	r25, 0xFF	; 255

void d_to_b(uint16_t val, char * bits)
{
	uint8_t i = 0;
	
	while (i < 16)
     658:	90 31       	cpi	r25, 0x10	; 16
     65a:	50 f3       	brcs	.-44     	; 0x630 <d_to_b+0x6>
		}
		i++;
	}
	
	
}
     65c:	08 95       	ret

0000065e <nyan_init>:


void nyan_init()
{
	notesTreblePtr = nyanIntroTreble;
     65e:	84 ef       	ldi	r24, 0xF4	; 244
     660:	90 e2       	ldi	r25, 0x20	; 32
     662:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <notesTreblePtr>
     666:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <notesTreblePtr+0x1>
	notesExtTreblePtr = nyanIntroExtTreble;
     66a:	89 ef       	ldi	r24, 0xF9	; 249
     66c:	93 e2       	ldi	r25, 0x23	; 35
     66e:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <notesExtTreblePtr>
     672:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <notesExtTreblePtr+0x1>
	noteBeatCountTreble = 0;
     676:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <noteBeatCountTreble>
	noteIndexTreble = 0;
     67a:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <noteIndexTreble>
     67e:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <noteIndexTreble+0x1>
	noteExtIndexTreble = 0;
     682:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <noteExtIndexTreble>
     686:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <noteExtIndexTreble+0x1>
	noteExtBitPosTreble = 0;
     68a:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <noteExtBitPosTreble>
	
	notesBassPtr = nyanIntroBass;
     68e:	86 ed       	ldi	r24, 0xD6	; 214
     690:	93 e2       	ldi	r25, 0x23	; 35
     692:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <notesBassPtr>
     696:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <notesBassPtr+0x1>
	notesExtBassPtr = nyanIntroExtBass;
     69a:	89 e1       	ldi	r24, 0x19	; 25
     69c:	90 e2       	ldi	r25, 0x20	; 32
     69e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <notesExtBassPtr>
     6a2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <notesExtBassPtr+0x1>
	noteBeatCountBass = 0;
     6a6:	10 92 cd 23 	sts	0x23CD, r1	; 0x8023cd <noteBeatCountBass>
	noteIndexBass = 0;
     6aa:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <noteIndexBass>
     6ae:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <noteIndexBass+0x1>
	noteExtIndexBass = 0;
     6b2:	10 92 cf 23 	sts	0x23CF, r1	; 0x8023cf <noteExtIndexBass>
     6b6:	10 92 d0 23 	sts	0x23D0, r1	; 0x8023d0 <noteExtIndexBass+0x1>
	noteExtBitPosBass = 0;
     6ba:	10 92 ce 23 	sts	0x23CE, r1	; 0x8023ce <noteExtBitPosBass>
	
	setNoteAndBeatTreble();
     6be:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <setNoteAndBeatTreble>
	setNoteAndBeatBass();
     6c2:	0e 94 9d 02 	call	0x53a	; 0x53a <setNoteAndBeatBass>
     6c6:	08 95       	ret

000006c8 <run_note_decay>:
	
}

void run_note_decay(uint16_t *data, uint8_t len)
// data[] contains a lookup table of length (len)
{
     6c8:	9c 01       	movw	r18, r24
	
	
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
     6ca:	80 ec       	ldi	r24, 0xC0	; 192
     6cc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
     6d0:	e0 e0       	ldi	r30, 0x00	; 0
     6d2:	f8 e0       	ldi	r31, 0x08	; 8
     6d4:	80 eb       	ldi	r24, 0xB0	; 176
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	86 a3       	std	Z+38, r24	; 0x26
     6da:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
     6dc:	87 e0       	ldi	r24, 0x07	; 7
     6de:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b3 e0       	ldi	r27, 0x03	; 3
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	11 96       	adiw	r26, 0x01	; 1
     6e8:	9c 93       	st	X, r25
     6ea:	11 97       	sbiw	r26, 0x01	; 1
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	12 96       	adiw	r26, 0x02	; 2
     6f0:	8c 93       	st	X, r24
     6f2:	12 97       	sbiw	r26, 0x02	; 2
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	9c 93       	st	X, r25
     6f8:	13 97       	sbiw	r26, 0x03	; 3
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	8c 93       	st	X, r24
	
	////////////////////////////////////////////  EDMA config
	EDMA.CTRL = EDMA_RESET_bm;
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	90 e4       	ldi	r25, 0x40	; 64
     704:	90 83       	st	Z, r25
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
     706:	90 8b       	std	Z+16, r25	; 0x10
	EDMA.CH0.ADDRCTRL =
     708:	81 e3       	ldi	r24, 0x31	; 49
     70a:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
     70c:	85 e1       	ldi	r24, 0x15	; 21
     70e:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	EDMA.CH0.TRFCNT = len*2;                  // data array has len values
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	66 0f       	add	r22, r22
     714:	77 1f       	adc	r23, r23
     716:	66 8b       	std	Z+22, r22	; 0x16
     718:	77 8b       	std	Z+23, r23	; 0x17
	EDMA.CH0.ADDR = (uint16_t)data;           // this is the source SRAM address
     71a:	20 8f       	std	Z+24, r18	; 0x18
     71c:	31 8f       	std	Z+25, r19	; 0x19
	EDMA.CH0.CTRLA =
     71e:	85 e8       	ldi	r24, 0x85	; 133
     720:	80 8b       	std	Z+16, r24	; 0x10
	EDMA_CH_ENABLE_bm |               //   enable EDMA Ch0
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
	EDMA.CH0.CTRLB =
     722:	83 e1       	ldi	r24, 0x13	; 19
     724:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction

	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	80 83       	st	Z, r24
	
	
	PMIC.CTRL = PMIC_HILVLEN_bm;		  //  enable interrupts
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
	DACA.CH0DATA = 4095;
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	9f e0       	ldi	r25, 0x0F	; 15
     734:	58 96       	adiw	r26, 0x18	; 24
     736:	8d 93       	st	X+, r24
     738:	9c 93       	st	X, r25
     73a:	59 97       	sbiw	r26, 0x19	; 25
     73c:	08 95       	ret

0000073e <note_play>:
}

void note_play()
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
	

	PORTA.OUTSET = PIN3_bm;
     742:	88 e0       	ldi	r24, 0x08	; 8
     744:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + key_buttons];
     748:	e0 91 cc 23 	lds	r30, 0x23CC	; 0x8023cc <__data_end>
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	37 96       	adiw	r30, 0x07	; 7
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ed 5e       	subi	r30, 0xED	; 237
     756:	fe 4d       	sbci	r31, 0xDE	; 222
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	c0 e4       	ldi	r28, 0x40	; 64
     75e:	d8 e0       	ldi	r29, 0x08	; 8
     760:	88 a7       	std	Y+40, r24	; 0x28
     762:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay(exp_decay_vals, 13);
     764:	6d e0       	ldi	r22, 0x0D	; 13
     766:	83 e9       	ldi	r24, 0x93	; 147
     768:	91 e2       	ldi	r25, 0x21	; 33
     76a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	88 83       	st	Y, r24
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <reset_play>:

void reset_play()
{
	PORTA.OUTCLR = PIN3_bm;
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7fb606>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	81 89       	ldd	r24, Z+17	; 0x11
     784:	80 61       	ori	r24, 0x10	; 16
     786:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
     788:	e0 e4       	ldi	r30, 0x40	; 64
     78a:	f8 e0       	ldi	r31, 0x08	; 8
     78c:	10 a2       	std	Z+32, r1	; 0x20
     78e:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
     790:	10 82       	st	Z, r1
     792:	08 95       	ret

00000794 <start_up>:
}

void start_up(uint8_t mode)
{
	PORTA.DIRSET = PIN3_bm;
     794:	e0 e0       	ldi	r30, 0x00	; 0
     796:	f6 e0       	ldi	r31, 0x06	; 6
     798:	98 e0       	ldi	r25, 0x08	; 8
     79a:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = PIN2_bm;
     79c:	94 e0       	ldi	r25, 0x04	; 4
     79e:	91 83       	std	Z+1, r25	; 0x01
		
	switch (mode)
     7a0:	88 23       	and	r24, r24
     7a2:	19 f0       	breq	.+6      	; 0x7aa <start_up+0x16>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <start_up+0x2e>
     7a8:	08 95       	ret
	{
		case 0: //Free Play
			nyan_timer_C5_init();
     7aa:	0e 94 02 02 	call	0x404	; 0x404 <nyan_timer_C5_init>
			PORTD.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     7ae:	e0 e6       	ldi	r30, 0x60	; 96
     7b0:	f6 e0       	ldi	r31, 0x06	; 6
     7b2:	8f e0       	ldi	r24, 0x0F	; 15
     7b4:	82 83       	std	Z+2, r24	; 0x02
			PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
     7b6:	88 e1       	ldi	r24, 0x18	; 24
     7b8:	80 8b       	std	Z+16, r24	; 0x10
			PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;
     7ba:	81 8b       	std	Z+17, r24	; 0x11
			PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
     7bc:	82 8b       	std	Z+18, r24	; 0x12
			PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;
     7be:	83 8b       	std	Z+19, r24	; 0x13
			break;
     7c0:	08 95       	ret
		case 1: //Nyan
			nyan_timer_C4_init();
     7c2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <nyan_timer_C4_init>
			nyan_timer_C5_init();
     7c6:	0e 94 02 02 	call	0x404	; 0x404 <nyan_timer_C5_init>
			nyan_timer_D5_init();
     7ca:	0e 94 0e 02 	call	0x41c	; 0x41c <nyan_timer_D5_init>
			nyan_init();
     7ce:	0e 94 2f 03 	call	0x65e	; 0x65e <nyan_init>
			PORTA.OUTSET = PIN2_bm;
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
			//Start NYAN
			TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
     7de:	08 95       	ret

000007e0 <main>:
	}
	
}

int main(void)
{
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	61 97       	sbiw	r28, 0x11	; 17
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	de bf       	out	0x3e, r29	; 62
	uint8_t mode = 0;
	uint8_t played = 0;
	uint16_t last_pos = 0;
	
	cli();
     7ee:	f8 94       	cli
	clk_init();
     7f0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <clk_init>
	interrupt_init();
     7f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <interrupt_init>
	twi_init();
     7f8:	0e 94 c9 00 	call	0x192	; 0x192 <twi_init>

	sei();
     7fc:	78 94       	sei

	
	

	oled_init();
     7fe:	0e 94 c0 02 	call	0x580	; 0x580 <oled_init>
 	expander_init();
     802:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <expander_init>

	start_up(mode);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 ca 03 	call	0x794	; 0x794 <start_up>

	uint16_t exp_val = 0;

	ssd1306_setCursor(1,0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 80 05 	call	0xb00	; 0xb00 <ssd1306_setCursor>
	ssd1306__printf("expander read");
     814:	87 ed       	ldi	r24, 0xD7	; 215
     816:	91 e2       	ldi	r25, 0x21	; 33
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ssd1306__printf>
	PORTA.OUTSET = PIN3_bm;
     820:	88 e0       	ldi	r24, 0x08	; 8
     822:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
	

	
	char bits[17] = {'0'};
     826:	fe 01       	movw	r30, r28
     828:	31 96       	adiw	r30, 0x01	; 1
     82a:	81 e1       	ldi	r24, 0x11	; 17
     82c:	df 01       	movw	r26, r30
     82e:	1d 92       	st	X+, r1
     830:	8a 95       	dec	r24
     832:	e9 f7       	brne	.-6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     834:	80 e3       	ldi	r24, 0x30	; 48
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0

int main(void)
{
	uint8_t mode = 0;
	uint8_t played = 0;
	uint16_t last_pos = 0;
     83c:	e1 2c       	mov	r14, r1
     83e:	f1 2c       	mov	r15, r1
}

int main(void)
{
	uint8_t mode = 0;
	uint8_t played = 0;
     840:	d1 2c       	mov	r13, r1
	char bits[17] = {'0'};
	bits[16] = '\0';
	while (1)
	{

		exp_val = expander_read_ports();
     842:	0e 94 06 03 	call	0x60c	; 0x60c <expander_read_ports>
     846:	8c 01       	movw	r16, r24
		

	
		if (mode == 0)
		{
			key_buttons = (~PORTD.IN) & 0x0F;
     848:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7fb668>
     84c:	80 95       	com	r24
     84e:	8f 70       	andi	r24, 0x0F	; 15
     850:	80 93 cc 23 	sts	0x23CC, r24	; 0x8023cc <__data_end>
			ssd1306_setCursor(1, 0);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 80 05 	call	0xb00	; 0xb00 <ssd1306_setCursor>
			ssd1306__printf("buttons: %d", key_buttons);
     85c:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <__data_end>
     860:	1f 92       	push	r1
     862:	8f 93       	push	r24
     864:	85 ee       	ldi	r24, 0xE5	; 229
     866:	91 e2       	ldi	r25, 0x21	; 33
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ssd1306__printf>
			
			if (key_buttons && exp_val != last_pos && !(played))
     870:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <__data_end>
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	88 23       	and	r24, r24
     87e:	49 f0       	breq	.+18     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     880:	e0 16       	cp	r14, r16
     882:	f1 06       	cpc	r15, r17
     884:	31 f0       	breq	.+12     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     886:	d1 10       	cpse	r13, r1
     888:	04 c0       	rjmp	.+8      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
			{
				played = 1;
				note_play();
     88a:	0e 94 9f 03 	call	0x73e	; 0x73e <note_play>
			ssd1306_setCursor(1, 0);
			ssd1306__printf("buttons: %d", key_buttons);
			
			if (key_buttons && exp_val != last_pos && !(played))
			{
				played = 1;
     88e:	dd 24       	eor	r13, r13
     890:	d3 94       	inc	r13
				note_play();
			}
			
			if (exp_val == last_pos)
     892:	e0 16       	cp	r14, r16
     894:	f1 06       	cpc	r15, r17
     896:	09 f4       	brne	.+2      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
			{
				played = 0;
     898:	d1 2c       	mov	r13, r1
			}
			
			if (exp_val != 0xffff)
     89a:	0f 3f       	cpi	r16, 0xFF	; 255
     89c:	bf ef       	ldi	r27, 0xFF	; 255
     89e:	1b 07       	cpc	r17, r27
     8a0:	39 f0       	breq	.+14     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
			{
				d_to_b(exp_val, bits);
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	c8 01       	movw	r24, r16
     8aa:	0e 94 15 03 	call	0x62a	; 0x62a <d_to_b>
				last_pos = exp_val;
     8ae:	78 01       	movw	r14, r16
			}
			
			ssd1306_setCursor(2,0);
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 80 05 	call	0xb00	; 0xb00 <ssd1306_setCursor>
			ssd1306_displayString(bits);			
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 08 06 	call	0xc10	; 0xc10 <ssd1306_displayString>
			
			
		}
	
 		//_delay_ms(500);
		PORTA.OUTTGL = PIN3_bm;
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
	}
     8c6:	bd cf       	rjmp	.-134    	; 0x842 <__DATA_REGION_LENGTH__+0x42>

000008c8 <__vector_3>:
}

ISR(EDMA_CH0_vect)
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
	reset_play();
     8ea:	0e 94 bc 03 	call	0x778	; 0x778 <reset_play>
	//EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;   // re-enable EDMA Ch0 after trans complete
}
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_12>:

ISR(TCC4_OVF_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	PORTA.OUTTGL = PIN3_bm;
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
	TCC4.INTFLAGS = TC4_OVFIF_bm;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteBeatCountTreble))
     93e:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <noteBeatCountTreble>
     942:	81 11       	cpse	r24, r1
     944:	37 c0       	rjmp	.+110    	; 0x9b4 <__vector_12+0xa4>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
     946:	e0 e4       	ldi	r30, 0x40	; 64
     948:	f8 e0       	ldi	r31, 0x08	; 8
     94a:	10 82       	st	Z, r1
		TCC5.CCA = 0;
     94c:	10 a6       	std	Z+40, r1	; 0x28
     94e:	11 a6       	std	Z+41, r1	; 0x29

		if (noteIndexTreble >= trebleNoteCount)
     950:	20 91 dc 23 	lds	r18, 0x23DC	; 0x8023dc <noteIndexTreble>
     954:	30 91 dd 23 	lds	r19, 0x23DD	; 0x8023dd <noteIndexTreble+0x1>
     958:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <trebleNoteCount>
     95c:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <trebleNoteCount+0x1>
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	20 f1       	brcs	.+72     	; 0x9ae <__vector_12+0x9e>
		{
			if (isIntroTreble)
     966:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <isIntroTreble>
     96a:	88 23       	and	r24, r24
     96c:	a1 f0       	breq	.+40     	; 0x996 <__vector_12+0x86>
			{
				isIntroTreble = 0;
     96e:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <isIntroTreble>
				trebleNoteCount = MAIN_TREBLE_NOTE_COUNT;
     972:	84 ed       	ldi	r24, 0xD4	; 212
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <trebleNoteCount>
     97a:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <trebleNoteCount+0x1>
				notesTreblePtr = nyanMainTreble;
     97e:	80 e2       	ldi	r24, 0x20	; 32
     980:	90 e2       	ldi	r25, 0x20	; 32
     982:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <notesTreblePtr>
     986:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <notesTreblePtr+0x1>
				notesExtTreblePtr = nyanMainExtTreble;
     98a:	8e ed       	ldi	r24, 0xDE	; 222
     98c:	93 e2       	ldi	r25, 0x23	; 35
     98e:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <notesExtTreblePtr>
     992:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <notesExtTreblePtr+0x1>
			}
			
			noteBeatCountTreble = 0;
     996:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <noteBeatCountTreble>
			noteIndexTreble = 0;
     99a:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <noteIndexTreble>
     99e:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <noteIndexTreble+0x1>
			noteExtIndexTreble = 0;
     9a2:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <noteExtIndexTreble>
     9a6:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <noteExtIndexTreble+0x1>
			noteExtBitPosTreble = 0;
     9aa:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <noteExtBitPosTreble>
		}
		

		setNoteAndBeatTreble();
     9ae:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <setNoteAndBeatTreble>
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <__vector_12+0xaa>
		
	}
	else
	{
		noteBeatCountTreble--;
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <noteBeatCountTreble>
	}
	
	if (!(noteBeatCountBass))
     9ba:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <noteBeatCountBass>
     9be:	81 11       	cpse	r24, r1
     9c0:	37 c0       	rjmp	.+110    	; 0xa30 <__vector_12+0x120>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
     9c2:	e0 e4       	ldi	r30, 0x40	; 64
     9c4:	f9 e0       	ldi	r31, 0x09	; 9
     9c6:	10 82       	st	Z, r1
		TCD5.CCA = 0;
     9c8:	10 a6       	std	Z+40, r1	; 0x28
     9ca:	11 a6       	std	Z+41, r1	; 0x29

		if (noteIndexBass >= bassNoteCount)
     9cc:	20 91 d1 23 	lds	r18, 0x23D1	; 0x8023d1 <noteIndexBass>
     9d0:	30 91 d2 23 	lds	r19, 0x23D2	; 0x8023d2 <noteIndexBass+0x1>
     9d4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <bassNoteCount>
     9d8:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <bassNoteCount+0x1>
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	20 f1       	brcs	.+72     	; 0xa2a <__vector_12+0x11a>
		{
			if (isIntroBass)
     9e2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     9e6:	88 23       	and	r24, r24
     9e8:	a1 f0       	breq	.+40     	; 0xa12 <__vector_12+0x102>
			{
				isIntroBass = 0;
     9ea:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
				bassNoteCount = MAIN_BASS_NOTE_COUNT;
     9ee:	81 e1       	ldi	r24, 0x11	; 17
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <bassNoteCount>
     9f6:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <bassNoteCount+0x1>
				notesBassPtr = nyanMainBass;
     9fa:	88 e0       	ldi	r24, 0x08	; 8
     9fc:	90 e2       	ldi	r25, 0x20	; 32
     9fe:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <notesBassPtr>
     a02:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <notesBassPtr+0x1>
				notesExtBassPtr = nyanMainExtBass;
     a06:	83 ed       	ldi	r24, 0xD3	; 211
     a08:	93 e2       	ldi	r25, 0x23	; 35
     a0a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <notesExtBassPtr>
     a0e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <notesExtBassPtr+0x1>
			}
			
			noteBeatCountBass = 0;
     a12:	10 92 cd 23 	sts	0x23CD, r1	; 0x8023cd <noteBeatCountBass>
			noteIndexBass = 0;
     a16:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <noteIndexBass>
     a1a:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <noteIndexBass+0x1>
			noteExtIndexBass = 0;
     a1e:	10 92 cf 23 	sts	0x23CF, r1	; 0x8023cf <noteExtIndexBass>
     a22:	10 92 d0 23 	sts	0x23D0, r1	; 0x8023d0 <noteExtIndexBass+0x1>
			noteExtBitPosBass = 0;
     a26:	10 92 ce 23 	sts	0x23CE, r1	; 0x8023ce <noteExtBitPosBass>
		}

		setNoteAndBeatBass();
     a2a:	0e 94 9d 02 	call	0x53a	; 0x53a <setNoteAndBeatBass>
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__vector_12+0x126>
	}
	else
	{
		noteBeatCountBass--;
     a30:	81 50       	subi	r24, 0x01	; 1
     a32:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <noteBeatCountBass>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	83 ef       	ldi	r24, 0xF3	; 243
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	90 40       	sbci	r25, 0x00	; 0
     a42:	e1 f7       	brne	.-8      	; 0xa3c <__vector_12+0x12c>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <__vector_12+0x136>
     a46:	00 00       	nop
	}
	
	
	//TODO: Update display and start transfer
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
     a4e:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <ssd1306_init>:
{
    if(lineNumber<8)
    {   /* If the line number is within range
         then move it to specified line and keep track*/
        ssd1306_lineNum = lineNumber;
        ssd1306_setCursor(ssd1306_lineNum,0);
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	6b 97       	sbiw	r28, 0x1b	; 27
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	8b e1       	ldi	r24, 0x1B	; 27
     a84:	ed ea       	ldi	r30, 0xAD	; 173
     a86:	f1 e2       	ldi	r31, 0x21	; 33
     a88:	de 01       	movw	r26, r28
     a8a:	11 96       	adiw	r26, 0x01	; 1
     a8c:	01 90       	ld	r0, Z+
     a8e:	0d 92       	st	X+, r0
     a90:	8a 95       	dec	r24
     a92:	e1 f7       	brne	.-8      	; 0xa8c <ssd1306_init+0x18>
     a94:	4b e1       	ldi	r20, 0x1B	; 27
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8c e3       	ldi	r24, 0x3C	; 60
     aa0:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	6b 96       	adiw	r28, 0x1b	; 27
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <ssd1306_clear>:
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	27 97       	sbiw	r28, 0x07	; 7
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	87 e0       	ldi	r24, 0x07	; 7
     ac2:	e8 ec       	ldi	r30, 0xC8	; 200
     ac4:	f1 e2       	ldi	r31, 0x21	; 33
     ac6:	de 01       	movw	r26, r28
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	8a 95       	dec	r24
     ad0:	e1 f7       	brne	.-8      	; 0xaca <ssd1306_clear+0x18>
     ad2:	47 e0       	ldi	r20, 0x07	; 7
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	be 01       	movw	r22, r28
     ad8:	6f 5f       	subi	r22, 0xFF	; 255
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	8c e3       	ldi	r24, 0x3C	; 60
     ade:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
     ae2:	81 11       	cpse	r24, r1
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <ssd1306_clear+0x42>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	32 e0       	ldi	r19, 0x02	; 2
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e4       	ldi	r22, 0x40	; 64
     aee:	8c e3       	ldi	r24, 0x3C	; 60
     af0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <twi_repeat>
     af4:	27 96       	adiw	r28, 0x07	; 7
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <ssd1306_setCursor>:
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	27 97       	sbiw	r28, 0x07	; 7
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	88 30       	cpi	r24, 0x08	; 8
     b10:	c8 f4       	brcc	.+50     	; 0xb44 <ssd1306_setCursor+0x44>
     b12:	66 23       	and	r22, r22
     b14:	bc f0       	brlt	.+46     	; 0xb44 <ssd1306_setCursor+0x44>
     b16:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <ssd1306_lineNum>
     b1a:	60 93 09 24 	sts	0x2409, r22	; 0x802409 <ssd1306_cursorPos>
     b1e:	19 82       	std	Y+1, r1	; 0x01
     b20:	91 e2       	ldi	r25, 0x21	; 33
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	6b 83       	std	Y+3, r22	; 0x03
     b26:	9f e7       	ldi	r25, 0x7F	; 127
     b28:	9c 83       	std	Y+4, r25	; 0x04
     b2a:	92 e2       	ldi	r25, 0x22	; 34
     b2c:	9d 83       	std	Y+5, r25	; 0x05
     b2e:	8e 83       	std	Y+6, r24	; 0x06
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	8f 83       	std	Y+7, r24	; 0x07
     b34:	47 e0       	ldi	r20, 0x07	; 7
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	8c e3       	ldi	r24, 0x3C	; 60
     b40:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
     b44:	27 96       	adiw	r28, 0x07	; 7
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <ssd1306_goToNextLine>:
 ****************************************************************************************************/
void  ssd1306_goToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    ssd1306_lineNum++;
     b50:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <ssd1306_lineNum>
     b54:	8f 5f       	subi	r24, 0xFF	; 255
    ssd1306_lineNum = ssd1306_lineNum&0x07;
     b56:	87 70       	andi	r24, 0x07	; 7
     b58:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <ssd1306_lineNum>
    ssd1306_setCursor(ssd1306_lineNum,0); /* Finally move it to next line */
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	0e 94 80 05 	call	0xb00	; 0xb00 <ssd1306_setCursor>
     b62:	08 95       	ret

00000b64 <ssd1306_displayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	27 97       	sbiw	r28, 0x07	; 7
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	18 2f       	mov	r17, r24
    uint8_t dat,i=0;
    
    if(((ssd1306_cursorPos+FONT_SIZE)>=128) || (ch=='\n'))
     b76:	80 91 09 24 	lds	r24, 0x2409	; 0x802409 <ssd1306_cursorPos>
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	05 96       	adiw	r24, 0x05	; 5
     b7e:	80 38       	cpi	r24, 0x80	; 128
     b80:	91 05       	cpc	r25, r1
     b82:	14 f4       	brge	.+4      	; 0xb88 <ssd1306_displayChar+0x24>
     b84:	1a 30       	cpi	r17, 0x0A	; 10
     b86:	11 f4       	brne	.+4      	; 0xb8c <ssd1306_displayChar+0x28>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        ssd1306_goToNextLine();
     b88:	0e 94 a8 05 	call	0xb50	; 0xb50 <ssd1306_goToNextLine>
    }
    if(ch!='\n') /* TODO */
     b8c:	1a 30       	cpi	r17, 0x0A	; 10
     b8e:	c9 f1       	breq	.+114    	; 0xc02 <ssd1306_displayChar+0x9e>
    {
		
		uint8_t data[FONT_SIZE+2];
		data[0] = SSD1306_DATA_START;
     b90:	80 e4       	ldi	r24, 0x40	; 64
     b92:	89 83       	std	Y+1, r24	; 0x01
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
     b94:	80 ee       	ldi	r24, 0xE0	; 224
     b96:	81 0f       	add	r24, r17
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
    uint8_t dat,i=0;
     b98:	90 e0       	ldi	r25, 0x00	; 0
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
        
        while(1)
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	49 2f       	mov	r20, r25
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	e2 0f       	add	r30, r18
     bae:	f3 1f       	adc	r31, r19
     bb0:	ef 50       	subi	r30, 0x0F	; 15
     bb2:	fe 4d       	sbci	r31, 0xDE	; 222
     bb4:	e4 0f       	add	r30, r20
     bb6:	f5 1f       	adc	r31, r21
     bb8:	20 81       	ld	r18, Z
            data[i+1] = dat;
     bba:	4f 5f       	subi	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	e1 e0       	ldi	r30, 0x01	; 1
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ec 0f       	add	r30, r28
     bc4:	fd 1f       	adc	r31, r29
     bc6:	e4 0f       	add	r30, r20
     bc8:	f5 1f       	adc	r31, r21
     bca:	20 83       	st	Z, r18
            
			
            ssd1306_cursorPos++;
     bcc:	20 91 09 24 	lds	r18, 0x2409	; 0x802409 <ssd1306_cursorPos>
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	20 93 09 24 	sts	0x2409, r18	; 0x802409 <ssd1306_cursorPos>
            
            i++;
     bd6:	9f 5f       	subi	r25, 0xFF	; 255
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
     bd8:	95 30       	cpi	r25, 0x05	; 5
     bda:	f9 f6       	brne	.-66     	; 0xb9a <ssd1306_displayChar+0x36>
            {
				data[i+1] = 0;
     bdc:	e9 2f       	mov	r30, r25
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	31 96       	adiw	r30, 0x01	; 1
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	8c 0f       	add	r24, r28
     be8:	9d 1f       	adc	r25, r29
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	10 82       	st	Z, r1
				
                ssd1306_cursorPos++;
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	20 93 09 24 	sts	0x2409, r18	; 0x802409 <ssd1306_cursorPos>
                break;
            }
        }
		twi_write(SSD1306_I2C_ADDRESS, data, sizeof data);
     bf6:	47 e0       	ldi	r20, 0x07	; 7
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	bc 01       	movw	r22, r24
     bfc:	8c e3       	ldi	r24, 0x3C	; 60
     bfe:	0e 94 13 01 	call	0x226	; 0x226 <twi_write>
    }
}
     c02:	27 96       	adiw	r28, 0x07	; 7
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	08 95       	ret

00000c10 <ssd1306_displayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
    while(*ptr)
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <ssd1306_displayString+0xe>
        ssd1306_displayChar(*ptr++);
     c18:	21 96       	adiw	r28, 0x01	; 1
     c1a:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
    while(*ptr)
     c1e:	88 81       	ld	r24, Y
     c20:	81 11       	cpse	r24, r1
     c22:	fa cf       	rjmp	.-12     	; 0xc18 <ssd1306_displayString+0x8>
        ssd1306_displayChar(*ptr++);
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <ssd1306_displayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/

void ssd1306_displayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
     c2a:	4f 92       	push	r4
     c2c:	5f 92       	push	r5
     c2e:	6f 92       	push	r6
     c30:	7f 92       	push	r7
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	2a 97       	sbiw	r28, 0x0a	; 10
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	a8 2e       	mov	r10, r24
     c52:	6a 01       	movw	r12, r20
     c54:	7b 01       	movw	r14, r22
     c56:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	a8 12       	cpse	r10, r24
     c5c:	20 c0       	rjmp	.+64     	; 0xc9e <ssd1306_displayNumber+0x74>
     c5e:	1c c0       	rjmp	.+56     	; 0xc98 <ssd1306_displayNumber+0x6e>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
     c60:	80 2f       	mov	r24, r16
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <ssd1306_displayNumber+0x46>
     c6c:	44 0f       	add	r20, r20
     c6e:	55 1f       	adc	r21, r21
     c70:	8a 95       	dec	r24
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <ssd1306_displayNumber+0x42>
     c74:	05 2e       	mov	r0, r21
     c76:	00 0c       	add	r0, r0
     c78:	66 0b       	sbc	r22, r22
     c7a:	77 0b       	sbc	r23, r23
     c7c:	4c 21       	and	r20, r12
     c7e:	5d 21       	and	r21, r13
     c80:	6e 21       	and	r22, r14
     c82:	7f 21       	and	r23, r15
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	45 2b       	or	r20, r21
     c88:	46 2b       	or	r20, r22
     c8a:	47 2b       	or	r20, r23
     c8c:	09 f4       	brne	.+2      	; 0xc90 <ssd1306_displayNumber+0x66>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
            ssd1306_displayChar(util_Dec2Ascii(i));
     c90:	80 5d       	subi	r24, 0xD0	; 208
     c92:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
            v_numOfDigitsToDisplay_u8--;
     c96:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
     c98:	01 11       	cpse	r16, r1
     c9a:	e2 cf       	rjmp	.-60     	; 0xc60 <ssd1306_displayNumber+0x36>
     c9c:	52 c0       	rjmp	.+164    	; 0xd42 <ssd1306_displayNumber+0x118>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            ssd1306_displayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
     c9e:	45 2b       	or	r20, r21
     ca0:	46 2b       	or	r20, r22
     ca2:	47 2b       	or	r20, r23
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <ssd1306_displayNumber+0x8a>
     ca6:	10 e0       	ldi	r17, 0x00	; 0
     ca8:	35 c0       	rjmp	.+106    	; 0xd14 <ssd1306_displayNumber+0xea>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
     caa:	80 e3       	ldi	r24, 0x30	; 48
     cac:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
     cb0:	1f 5f       	subi	r17, 0xFF	; 255
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <ssd1306_displayNumber+0x8c>
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	10 17       	cp	r17, r16
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <ssd1306_displayNumber+0x92>
     cba:	43 c0       	rjmp	.+134    	; 0xd42 <ssd1306_displayNumber+0x118>
     cbc:	1a 30       	cpi	r17, 0x0A	; 10
     cbe:	a8 f3       	brcs	.-22     	; 0xcaa <ssd1306_displayNumber+0x80>
     cc0:	40 c0       	rjmp	.+128    	; 0xd42 <ssd1306_displayNumber+0x118>
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
     cc2:	c1 14       	cp	r12, r1
     cc4:	d1 04       	cpc	r13, r1
     cc6:	e1 04       	cpc	r14, r1
     cc8:	f1 04       	cpc	r15, r1
     cca:	d1 f0       	breq	.+52     	; 0xd00 <ssd1306_displayNumber+0xd6>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     ccc:	bc 2c       	mov	r11, r12
     cce:	4a 2c       	mov	r4, r10
     cd0:	51 2c       	mov	r5, r1
     cd2:	61 2c       	mov	r6, r1
     cd4:	71 2c       	mov	r7, r1
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	a3 01       	movw	r20, r6
     cdc:	92 01       	movw	r18, r4
     cde:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodsi4>
     ce2:	c2 2e       	mov	r12, r18
     ce4:	d3 2e       	mov	r13, r19
     ce6:	e4 2e       	mov	r14, r20
     ce8:	f5 2e       	mov	r15, r21
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	ec 0f       	add	r30, r28
     cf0:	fd 1f       	adc	r31, r29
     cf2:	e1 0f       	add	r30, r17
     cf4:	f1 1d       	adc	r31, r1
     cf6:	a2 9e       	mul	r10, r18
     cf8:	b0 18       	sub	r11, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	b0 82       	st	Z, r11
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <ssd1306_displayNumber+0xe8>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
     d00:	0b 30       	cpi	r16, 0x0B	; 11
     d02:	e8 f4       	brcc	.+58     	; 0xd3e <ssd1306_displayNumber+0x114>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ec 0f       	add	r30, r28
     d0a:	fd 1f       	adc	r31, r29
     d0c:	e1 0f       	add	r30, r17
     d0e:	f1 1d       	adc	r31, r1
     d10:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     d12:	1f 5f       	subi	r17, 0xFF	; 255
     d14:	10 17       	cp	r17, r16
     d16:	a8 f2       	brcs	.-86     	; 0xcc2 <ssd1306_displayNumber+0x98>
     d18:	12 c0       	rjmp	.+36     	; 0xd3e <ssd1306_displayNumber+0x114>
        }
        
        while(i!=0)
        {
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
     d1a:	e1 2f       	mov	r30, r17
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	8c 0f       	add	r24, r28
     d26:	9d 1f       	adc	r25, r29
     d28:	e8 0f       	add	r30, r24
     d2a:	f9 1f       	adc	r31, r25
     d2c:	80 81       	ld	r24, Z
     d2e:	8a 30       	cpi	r24, 0x0A	; 10
     d30:	10 f0       	brcs	.+4      	; 0xd36 <ssd1306_displayNumber+0x10c>
     d32:	89 5c       	subi	r24, 0xC9	; 201
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <ssd1306_displayNumber+0x10e>
     d36:	80 5d       	subi	r24, 0xD0	; 208
     d38:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
            i--;
     d3c:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
     d3e:	11 11       	cpse	r17, r1
     d40:	ec cf       	rjmp	.-40     	; 0xd1a <ssd1306_displayNumber+0xf0>
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
     d42:	2a 96       	adiw	r28, 0x0a	; 10
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	bf 90       	pop	r11
     d5a:	af 90       	pop	r10
     d5c:	7f 90       	pop	r7
     d5e:	6f 90       	pop	r6
     d60:	5f 90       	pop	r5
     d62:	4f 90       	pop	r4
     d64:	08 95       	ret

00000d66 <ssd1306_displayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/

void ssd1306_displayFloatNumber(double v_floatNum_f32)
{
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	6b 01       	movw	r12, r22
     d78:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
    
    v_temp_u32 = (uint32_t) v_floatNum_f32;
     d7a:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     d7e:	4b 01       	movw	r8, r22
     d80:	5c 01       	movw	r10, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	ab 01       	movw	r20, r22
     d86:	bc 01       	movw	r22, r24
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
    
    ssd1306_displayChar('.');
     d8e:	8e e2       	ldi	r24, 0x2E	; 46
     d90:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
    
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
     d94:	c5 01       	movw	r24, r10
     d96:	b4 01       	movw	r22, r8
     d98:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatunsisf>
     d9c:	9b 01       	movw	r18, r22
     d9e:	ac 01       	movw	r20, r24
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 00 08 	call	0x1000	; 0x1000 <__subsf3>
    v_temp_u32 = v_floatNum_f32 * 1000000;
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	34 e2       	ldi	r19, 0x24	; 36
     dac:	44 e7       	ldi	r20, 0x74	; 116
     dae:	59 e4       	ldi	r21, 0x49	; 73
     db0:	0e 94 2a 09 	call	0x1254	; 0x1254 <__mulsf3>
     db4:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     db8:	ab 01       	movw	r20, r22
     dba:	bc 01       	movw	r22, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
}
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	08 95       	ret

00000dd6 <ssd1306__printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/

void ssd1306__printf(const char *argList, ...)
{
     dd6:	4f 92       	push	r4
     dd8:	5f 92       	push	r5
     dda:	6f 92       	push	r6
     ddc:	7f 92       	push	r7
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	fe 01       	movw	r30, r28
     df2:	3e 96       	adiw	r30, 0x0e	; 14
     df4:	e1 90       	ld	r14, Z+
     df6:	f1 90       	ld	r15, Z+
    uint8_t v_numOfDigitsToDisp_u8;

    double v_floatNum_f32;

    
    va_start(argp, argList);
     df8:	3f 01       	movw	r6, r30
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     dfa:	f2 c0       	rjmp	.+484    	; 0xfe0 <ssd1306__printf+0x20a>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
     dfc:	85 32       	cpi	r24, 0x25	; 37
     dfe:	09 f0       	breq	.+2      	; 0xe02 <ssd1306__printf+0x2c>
     e00:	ea c0       	rjmp	.+468    	; 0xfd6 <ssd1306__printf+0x200>
        {
            ptr++;
     e02:	c7 01       	movw	r24, r14
     e04:	01 96       	adiw	r24, 0x01	; 1
            ch = *ptr;
     e06:	d7 01       	movw	r26, r14
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	ec 91       	ld	r30, X
            if((ch>=0x30) && (ch<=0x39))
     e0c:	20 ed       	ldi	r18, 0xD0	; 208
     e0e:	2e 0f       	add	r18, r30
     e10:	2a 30       	cpi	r18, 0x0A	; 10
     e12:	90 f0       	brcs	.+36     	; 0xe38 <ssd1306__printf+0x62>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
     e14:	7c 01       	movw	r14, r24
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     e16:	1f ef       	ldi	r17, 0xFF	; 255
     e18:	15 c0       	rjmp	.+42     	; 0xe44 <ssd1306__printf+0x6e>
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
     e1a:	81 2f       	mov	r24, r17
     e1c:	88 0f       	add	r24, r24
     e1e:	98 2f       	mov	r25, r24
     e20:	99 0f       	add	r25, r25
     e22:	99 0f       	add	r25, r25
     e24:	89 0f       	add	r24, r25
     e26:	8e 0f       	add	r24, r30
     e28:	10 ed       	ldi	r17, 0xD0	; 208
     e2a:	18 0f       	add	r17, r24
                    ptr++;
     e2c:	bf ef       	ldi	r27, 0xFF	; 255
     e2e:	eb 1a       	sub	r14, r27
     e30:	fb 0a       	sbc	r15, r27
                    ch = *ptr;
     e32:	d7 01       	movw	r26, r14
     e34:	ec 91       	ld	r30, X
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <ssd1306__printf+0x66>
     e38:	7c 01       	movw	r14, r24
     e3a:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
     e3c:	80 ed       	ldi	r24, 0xD0	; 208
     e3e:	8e 0f       	add	r24, r30
     e40:	8a 30       	cpi	r24, 0x0A	; 10
     e42:	58 f3       	brcs	.-42     	; 0xe1a <ssd1306__printf+0x44>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
     e44:	8e 2f       	mov	r24, r30
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	fc 01       	movw	r30, r24
     e4a:	b5 97       	sbiw	r30, 0x25	; 37
     e4c:	e4 35       	cpi	r30, 0x54	; 84
     e4e:	f1 05       	cpc	r31, r1
     e50:	08 f0       	brcs	.+2      	; 0xe54 <ssd1306__printf+0x7e>
     e52:	c3 c0       	rjmp	.+390    	; 0xfda <ssd1306__printf+0x204>
     e54:	ea 5a       	subi	r30, 0xAA	; 170
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
     e5c:	53 01       	movw	r10, r6
     e5e:	b2 e0       	ldi	r27, 0x02	; 2
     e60:	ab 0e       	add	r10, r27
     e62:	b1 1c       	adc	r11, r1
                    ssd1306_displayChar(ch);
     e64:	f3 01       	movw	r30, r6
     e66:	80 81       	ld	r24, Z
     e68:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
            
            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
     e6c:	35 01       	movw	r6, r10
                    ssd1306_displayChar(ch);
                    break;
     e6e:	b5 c0       	rjmp	.+362    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
     e70:	53 01       	movw	r10, r6
     e72:	f2 e0       	ldi	r31, 0x02	; 2
     e74:	af 0e       	add	r10, r31
     e76:	b1 1c       	adc	r11, r1
     e78:	d3 01       	movw	r26, r6
     e7a:	6d 90       	ld	r6, X+
     e7c:	7c 90       	ld	r7, X
                    if(v_num_s16<0)
     e7e:	77 20       	and	r7, r7
     e80:	34 f4       	brge	.+12     	; 0xe8e <ssd1306__printf+0xb8>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
     e82:	71 94       	neg	r7
     e84:	61 94       	neg	r6
     e86:	71 08       	sbc	r7, r1
                        ssd1306_displayChar('-');
     e88:	8d e2       	ldi	r24, 0x2D	; 45
     e8a:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
     e8e:	a3 01       	movw	r20, r6
     e90:	77 0c       	add	r7, r7
     e92:	66 0b       	sbc	r22, r22
     e94:	77 0b       	sbc	r23, r23
     e96:	21 2f       	mov	r18, r17
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    ch = va_arg(argp, int);
                    ssd1306_displayChar(ch);
                    break;
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
     e9e:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
     ea0:	9c c0       	rjmp	.+312    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
     ea2:	53 01       	movw	r10, r6
     ea4:	b4 e0       	ldi	r27, 0x04	; 4
     ea6:	ab 0e       	add	r10, r27
     ea8:	b1 1c       	adc	r11, r1
     eaa:	f3 01       	movw	r30, r6
     eac:	40 80       	ld	r4, Z
     eae:	51 80       	ldd	r5, Z+1	; 0x01
     eb0:	62 80       	ldd	r6, Z+2	; 0x02
     eb2:	73 80       	ldd	r7, Z+3	; 0x03
                    if(v_num_s32<0)
     eb4:	77 20       	and	r7, r7
     eb6:	5c f4       	brge	.+22     	; 0xece <ssd1306__printf+0xf8>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
     eb8:	70 94       	com	r7
     eba:	60 94       	com	r6
     ebc:	50 94       	com	r5
     ebe:	40 94       	com	r4
     ec0:	41 1c       	adc	r4, r1
     ec2:	51 1c       	adc	r5, r1
     ec4:	61 1c       	adc	r6, r1
     ec6:	71 1c       	adc	r7, r1
                        ssd1306_displayChar('-');
     ec8:	8d e2       	ldi	r24, 0x2D	; 45
     eca:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
     ece:	21 2f       	mov	r18, r17
     ed0:	b3 01       	movw	r22, r6
     ed2:	a2 01       	movw	r20, r4
     ed4:	8a e0       	ldi	r24, 0x0A	; 10
     ed6:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
     eda:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
     edc:	7e c0       	rjmp	.+252    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
     ede:	53 01       	movw	r10, r6
     ee0:	f2 e0       	ldi	r31, 0x02	; 2
     ee2:	af 0e       	add	r10, r31
     ee4:	b1 1c       	adc	r11, r1
     ee6:	d3 01       	movw	r26, r6
     ee8:	4d 91       	ld	r20, X+
     eea:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	21 2f       	mov	r18, r17
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
     ef4:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
     ef8:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
     efa:	6f c0       	rjmp	.+222    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
     efc:	53 01       	movw	r10, r6
     efe:	b4 e0       	ldi	r27, 0x04	; 4
     f00:	ab 0e       	add	r10, r27
     f02:	b1 1c       	adc	r11, r1
     f04:	f3 01       	movw	r30, r6
     f06:	40 81       	ld	r20, Z
     f08:	51 81       	ldd	r21, Z+1	; 0x01
     f0a:	62 81       	ldd	r22, Z+2	; 0x02
     f0c:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
     f0e:	21 2f       	mov	r18, r17
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
     f16:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
     f18:	60 c0       	rjmp	.+192    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
     f1a:	53 01       	movw	r10, r6
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	af 0e       	add	r10, r31
     f20:	b1 1c       	adc	r11, r1
     f22:	d3 01       	movw	r26, r6
     f24:	4d 91       	ld	r20, X+
     f26:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	21 2f       	mov	r18, r17
     f2e:	80 e1       	ldi	r24, 0x10	; 16
     f30:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    v_num_u32 = va_arg(argp, uint32_t);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
     f34:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
     f36:	51 c0       	rjmp	.+162    	; 0xfda <ssd1306__printf+0x204>
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
     f38:	53 01       	movw	r10, r6
     f3a:	b4 e0       	ldi	r27, 0x04	; 4
     f3c:	ab 0e       	add	r10, r27
     f3e:	b1 1c       	adc	r11, r1
     f40:	f3 01       	movw	r30, r6
     f42:	40 81       	ld	r20, Z
     f44:	51 81       	ldd	r21, Z+1	; 0x01
     f46:	62 81       	ldd	r22, Z+2	; 0x02
     f48:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
     f4a:	21 2f       	mov	r18, r17
     f4c:	80 e1       	ldi	r24, 0x10	; 16
     f4e:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
     f52:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
     f54:	42 c0       	rjmp	.+132    	; 0xfda <ssd1306__printf+0x204>
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
     f56:	53 01       	movw	r10, r6
     f58:	f2 e0       	ldi	r31, 0x02	; 2
     f5a:	af 0e       	add	r10, r31
     f5c:	b1 1c       	adc	r11, r1
     f5e:	d3 01       	movw	r26, r6
     f60:	4d 91       	ld	r20, X+
     f62:	5c 91       	ld	r21, X
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     f64:	1f 3f       	cpi	r17, 0xFF	; 255
     f66:	09 f4       	brne	.+2      	; 0xf6a <ssd1306__printf+0x194>
                        v_numOfDigitsToDisp_u8 = 16;
     f68:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	21 2f       	mov	r18, r17
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
     f76:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
     f78:	30 c0       	rjmp	.+96     	; 0xfda <ssd1306__printf+0x204>
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
     f7a:	53 01       	movw	r10, r6
     f7c:	b4 e0       	ldi	r27, 0x04	; 4
     f7e:	ab 0e       	add	r10, r27
     f80:	b1 1c       	adc	r11, r1
     f82:	f3 01       	movw	r30, r6
     f84:	40 81       	ld	r20, Z
     f86:	51 81       	ldd	r21, Z+1	; 0x01
     f88:	62 81       	ldd	r22, Z+2	; 0x02
     f8a:	73 81       	ldd	r23, Z+3	; 0x03
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     f8c:	1f 3f       	cpi	r17, 0xFF	; 255
     f8e:	09 f4       	brne	.+2      	; 0xf92 <ssd1306__printf+0x1bc>
                        v_numOfDigitsToDisp_u8 = 16;
     f90:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
     f92:	21 2f       	mov	r18, r17
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	0e 94 15 06 	call	0xc2a	; 0xc2a <ssd1306_displayNumber>
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
     f9a:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
     f9c:	1e c0       	rjmp	.+60     	; 0xfda <ssd1306__printf+0x204>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
     f9e:	53 01       	movw	r10, r6
     fa0:	f4 e0       	ldi	r31, 0x04	; 4
     fa2:	af 0e       	add	r10, r31
     fa4:	b1 1c       	adc	r11, r1
     fa6:	d3 01       	movw	r26, r6
     fa8:	6d 91       	ld	r22, X+
     faa:	7d 91       	ld	r23, X+
     fac:	8d 91       	ld	r24, X+
     fae:	9c 91       	ld	r25, X
                    ssd1306_displayFloatNumber(v_floatNum_f32);
     fb0:	0e 94 b3 06 	call	0xd66	; 0xd66 <ssd1306_displayFloatNumber>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
     fb4:	35 01       	movw	r6, r10
                    ssd1306_displayFloatNumber(v_floatNum_f32);

                    break;
     fb6:	11 c0       	rjmp	.+34     	; 0xfda <ssd1306__printf+0x204>
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
     fb8:	53 01       	movw	r10, r6
     fba:	b2 e0       	ldi	r27, 0x02	; 2
     fbc:	ab 0e       	add	r10, r27
     fbe:	b1 1c       	adc	r11, r1
                    ssd1306_displayString(str);
     fc0:	f3 01       	movw	r30, r6
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	0e 94 08 06 	call	0xc10	; 0xc10 <ssd1306_displayString>
                    break;
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
     fca:	35 01       	movw	r6, r10
                    ssd1306_displayString(str);
                    break;
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <ssd1306__printf+0x204>
                    
                case '%':
                    ssd1306_displayChar('%');
     fce:	85 e2       	ldi	r24, 0x25	; 37
     fd0:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>
                    break;
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <ssd1306__printf+0x204>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            ssd1306_displayChar(ch);
     fd6:	0e 94 b2 05 	call	0xb64	; 0xb64 <ssd1306_displayChar>

    
    va_start(argp, argList);
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     fda:	ff ef       	ldi	r31, 0xFF	; 255
     fdc:	ef 1a       	sub	r14, r31
     fde:	ff 0a       	sbc	r15, r31
     fe0:	d7 01       	movw	r26, r14
     fe2:	8c 91       	ld	r24, X
     fe4:	81 11       	cpse	r24, r1
     fe6:	0a cf       	rjmp	.-492    	; 0xdfc <ssd1306__printf+0x26>
            ssd1306_displayChar(ch);
        }
    }
    
    va_end(argp);
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	7f 90       	pop	r7
     ff8:	6f 90       	pop	r6
     ffa:	5f 90       	pop	r5
     ffc:	4f 90       	pop	r4
     ffe:	08 95       	ret

00001000 <__subsf3>:
    1000:	50 58       	subi	r21, 0x80	; 128

00001002 <__addsf3>:
    1002:	bb 27       	eor	r27, r27
    1004:	aa 27       	eor	r26, r26
    1006:	0e 94 18 08 	call	0x1030	; 0x1030 <__addsf3x>
    100a:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_round>
    100e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_pscA>
    1012:	38 f0       	brcs	.+14     	; 0x1022 <__addsf3+0x20>
    1014:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscB>
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__addsf3+0x20>
    101a:	39 f4       	brne	.+14     	; 0x102a <__addsf3+0x28>
    101c:	9f 3f       	cpi	r25, 0xFF	; 255
    101e:	19 f4       	brne	.+6      	; 0x1026 <__addsf3+0x24>
    1020:	26 f4       	brtc	.+8      	; 0x102a <__addsf3+0x28>
    1022:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3+0x28>
    1028:	e0 95       	com	r30
    102a:	e7 fb       	bst	r30, 7
    102c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>

00001030 <__addsf3x>:
    1030:	e9 2f       	mov	r30, r25
    1032:	0e 94 01 09 	call	0x1202	; 0x1202 <__fp_split3>
    1036:	58 f3       	brcs	.-42     	; 0x100e <__addsf3+0xc>
    1038:	ba 17       	cp	r27, r26
    103a:	62 07       	cpc	r22, r18
    103c:	73 07       	cpc	r23, r19
    103e:	84 07       	cpc	r24, r20
    1040:	95 07       	cpc	r25, r21
    1042:	20 f0       	brcs	.+8      	; 0x104c <__addsf3x+0x1c>
    1044:	79 f4       	brne	.+30     	; 0x1064 <__addsf3x+0x34>
    1046:	a6 f5       	brtc	.+104    	; 0x10b0 <__addsf3x+0x80>
    1048:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_zero>
    104c:	0e f4       	brtc	.+2      	; 0x1050 <__addsf3x+0x20>
    104e:	e0 95       	com	r30
    1050:	0b 2e       	mov	r0, r27
    1052:	ba 2f       	mov	r27, r26
    1054:	a0 2d       	mov	r26, r0
    1056:	0b 01       	movw	r0, r22
    1058:	b9 01       	movw	r22, r18
    105a:	90 01       	movw	r18, r0
    105c:	0c 01       	movw	r0, r24
    105e:	ca 01       	movw	r24, r20
    1060:	a0 01       	movw	r20, r0
    1062:	11 24       	eor	r1, r1
    1064:	ff 27       	eor	r31, r31
    1066:	59 1b       	sub	r21, r25
    1068:	99 f0       	breq	.+38     	; 0x1090 <__addsf3x+0x60>
    106a:	59 3f       	cpi	r21, 0xF9	; 249
    106c:	50 f4       	brcc	.+20     	; 0x1082 <__addsf3x+0x52>
    106e:	50 3e       	cpi	r21, 0xE0	; 224
    1070:	68 f1       	brcs	.+90     	; 0x10cc <__addsf3x+0x9c>
    1072:	1a 16       	cp	r1, r26
    1074:	f0 40       	sbci	r31, 0x00	; 0
    1076:	a2 2f       	mov	r26, r18
    1078:	23 2f       	mov	r18, r19
    107a:	34 2f       	mov	r19, r20
    107c:	44 27       	eor	r20, r20
    107e:	58 5f       	subi	r21, 0xF8	; 248
    1080:	f3 cf       	rjmp	.-26     	; 0x1068 <__addsf3x+0x38>
    1082:	46 95       	lsr	r20
    1084:	37 95       	ror	r19
    1086:	27 95       	ror	r18
    1088:	a7 95       	ror	r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	53 95       	inc	r21
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__addsf3x+0x52>
    1090:	7e f4       	brtc	.+30     	; 0x10b0 <__addsf3x+0x80>
    1092:	1f 16       	cp	r1, r31
    1094:	ba 0b       	sbc	r27, r26
    1096:	62 0b       	sbc	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	ba f0       	brmi	.+46     	; 0x10cc <__addsf3x+0x9c>
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	a1 f0       	breq	.+40     	; 0x10ca <__addsf3x+0x9a>
    10a2:	ff 0f       	add	r31, r31
    10a4:	bb 1f       	adc	r27, r27
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	c2 f7       	brpl	.-16     	; 0x109e <__addsf3x+0x6e>
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <__addsf3x+0x9c>
    10b0:	ba 0f       	add	r27, r26
    10b2:	62 1f       	adc	r22, r18
    10b4:	73 1f       	adc	r23, r19
    10b6:	84 1f       	adc	r24, r20
    10b8:	48 f4       	brcc	.+18     	; 0x10cc <__addsf3x+0x9c>
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f7 95       	ror	r31
    10c4:	9e 3f       	cpi	r25, 0xFE	; 254
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__addsf3x+0x9a>
    10c8:	b0 cf       	rjmp	.-160    	; 0x102a <__addsf3+0x28>
    10ca:	93 95       	inc	r25
    10cc:	88 0f       	add	r24, r24
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__addsf3x+0xa2>
    10d0:	99 27       	eor	r25, r25
    10d2:	ee 0f       	add	r30, r30
    10d4:	97 95       	ror	r25
    10d6:	87 95       	ror	r24
    10d8:	08 95       	ret

000010da <__fixunssfsi>:
    10da:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_splitA>
    10de:	88 f0       	brcs	.+34     	; 0x1102 <__fixunssfsi+0x28>
    10e0:	9f 57       	subi	r25, 0x7F	; 127
    10e2:	98 f0       	brcs	.+38     	; 0x110a <__fixunssfsi+0x30>
    10e4:	b9 2f       	mov	r27, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	b7 51       	subi	r27, 0x17	; 23
    10ea:	b0 f0       	brcs	.+44     	; 0x1118 <__fixunssfsi+0x3e>
    10ec:	e1 f0       	breq	.+56     	; 0x1126 <__fixunssfsi+0x4c>
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	1a f0       	brmi	.+6      	; 0x10fe <__fixunssfsi+0x24>
    10f8:	ba 95       	dec	r27
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <__fixunssfsi+0x14>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <__fixunssfsi+0x4c>
    10fe:	b1 30       	cpi	r27, 0x01	; 1
    1100:	91 f0       	breq	.+36     	; 0x1126 <__fixunssfsi+0x4c>
    1102:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_zero>
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	08 95       	ret
    110a:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_zero>
    110e:	67 2f       	mov	r22, r23
    1110:	78 2f       	mov	r23, r24
    1112:	88 27       	eor	r24, r24
    1114:	b8 5f       	subi	r27, 0xF8	; 248
    1116:	39 f0       	breq	.+14     	; 0x1126 <__fixunssfsi+0x4c>
    1118:	b9 3f       	cpi	r27, 0xF9	; 249
    111a:	cc f3       	brlt	.-14     	; 0x110e <__fixunssfsi+0x34>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b3 95       	inc	r27
    1124:	d9 f7       	brne	.-10     	; 0x111c <__fixunssfsi+0x42>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__fixunssfsi+0x5c>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__floatunsisf>:
    1138:	e8 94       	clt
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__floatsisf+0x12>

0000113c <__floatsisf>:
    113c:	97 fb       	bst	r25, 7
    113e:	3e f4       	brtc	.+14     	; 0x114e <__floatsisf+0x12>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	99 23       	and	r25, r25
    1150:	a9 f0       	breq	.+42     	; 0x117c <__floatsisf+0x40>
    1152:	f9 2f       	mov	r31, r25
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	bb 27       	eor	r27, r27
    1158:	93 95       	inc	r25
    115a:	f6 95       	lsr	r31
    115c:	87 95       	ror	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f1 11       	cpse	r31, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <__floatsisf+0x1c>
    1168:	fa f4       	brpl	.+62     	; 0x11a8 <__floatsisf+0x6c>
    116a:	bb 0f       	add	r27, r27
    116c:	11 f4       	brne	.+4      	; 0x1172 <__floatsisf+0x36>
    116e:	60 ff       	sbrs	r22, 0
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <__floatsisf+0x6c>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__floatsisf+0x6c>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <__floatsisf+0x48>
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <__floatsisf+0x6a>
    1184:	77 23       	and	r23, r23
    1186:	21 f0       	breq	.+8      	; 0x1190 <__floatsisf+0x54>
    1188:	9e e8       	ldi	r25, 0x8E	; 142
    118a:	87 2f       	mov	r24, r23
    118c:	76 2f       	mov	r23, r22
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__floatsisf+0x5e>
    1190:	66 23       	and	r22, r22
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__floatsisf+0x74>
    1194:	96 e8       	ldi	r25, 0x86	; 134
    1196:	86 2f       	mov	r24, r22
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__floatsisf+0x6c>
    119e:	9a 95       	dec	r25
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <__floatsisf+0x62>
    11a8:	88 0f       	add	r24, r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__fp_inf>:
    11b2:	97 f9       	bld	r25, 7
    11b4:	9f 67       	ori	r25, 0x7F	; 127
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	08 95       	ret

000011be <__fp_nan>:
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	80 ec       	ldi	r24, 0xC0	; 192
    11c2:	08 95       	ret

000011c4 <__fp_pscA>:
    11c4:	00 24       	eor	r0, r0
    11c6:	0a 94       	dec	r0
    11c8:	16 16       	cp	r1, r22
    11ca:	17 06       	cpc	r1, r23
    11cc:	18 06       	cpc	r1, r24
    11ce:	09 06       	cpc	r0, r25
    11d0:	08 95       	ret

000011d2 <__fp_pscB>:
    11d2:	00 24       	eor	r0, r0
    11d4:	0a 94       	dec	r0
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	14 06       	cpc	r1, r20
    11dc:	05 06       	cpc	r0, r21
    11de:	08 95       	ret

000011e0 <__fp_round>:
    11e0:	09 2e       	mov	r0, r25
    11e2:	03 94       	inc	r0
    11e4:	00 0c       	add	r0, r0
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0xc>
    11e8:	88 23       	and	r24, r24
    11ea:	52 f0       	brmi	.+20     	; 0x1200 <__fp_round+0x20>
    11ec:	bb 0f       	add	r27, r27
    11ee:	40 f4       	brcc	.+16     	; 0x1200 <__fp_round+0x20>
    11f0:	bf 2b       	or	r27, r31
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__fp_round+0x18>
    11f4:	60 ff       	sbrs	r22, 0
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <__fp_round+0x20>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__fp_split3>:
    1202:	57 fd       	sbrc	r21, 7
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	44 0f       	add	r20, r20
    1208:	55 1f       	adc	r21, r21
    120a:	59 f0       	breq	.+22     	; 0x1222 <__fp_splitA+0x10>
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	71 f0       	breq	.+28     	; 0x122c <__fp_splitA+0x1a>
    1210:	47 95       	ror	r20

00001212 <__fp_splitA>:
    1212:	88 0f       	add	r24, r24
    1214:	97 fb       	bst	r25, 7
    1216:	99 1f       	adc	r25, r25
    1218:	61 f0       	breq	.+24     	; 0x1232 <__fp_splitA+0x20>
    121a:	9f 3f       	cpi	r25, 0xFF	; 255
    121c:	79 f0       	breq	.+30     	; 0x123c <__fp_splitA+0x2a>
    121e:	87 95       	ror	r24
    1220:	08 95       	ret
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	55 1f       	adc	r21, r21
    122a:	f2 cf       	rjmp	.-28     	; 0x1210 <__fp_split3+0xe>
    122c:	46 95       	lsr	r20
    122e:	f1 df       	rcall	.-30     	; 0x1212 <__fp_splitA>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <__fp_splitA+0x30>
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	99 1f       	adc	r25, r25
    123a:	f1 cf       	rjmp	.-30     	; 0x121e <__fp_splitA+0xc>
    123c:	86 95       	lsr	r24
    123e:	71 05       	cpc	r23, r1
    1240:	61 05       	cpc	r22, r1
    1242:	08 94       	sec
    1244:	08 95       	ret

00001246 <__fp_zero>:
    1246:	e8 94       	clt

00001248 <__fp_szero>:
    1248:	bb 27       	eor	r27, r27
    124a:	66 27       	eor	r22, r22
    124c:	77 27       	eor	r23, r23
    124e:	cb 01       	movw	r24, r22
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__mulsf3>:
    1254:	0e 94 3d 09 	call	0x127a	; 0x127a <__mulsf3x>
    1258:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_round>
    125c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_pscA>
    1260:	38 f0       	brcs	.+14     	; 0x1270 <__mulsf3+0x1c>
    1262:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscB>
    1266:	20 f0       	brcs	.+8      	; 0x1270 <__mulsf3+0x1c>
    1268:	95 23       	and	r25, r21
    126a:	11 f0       	breq	.+4      	; 0x1270 <__mulsf3+0x1c>
    126c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1270:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
    1274:	11 24       	eor	r1, r1
    1276:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>

0000127a <__mulsf3x>:
    127a:	0e 94 01 09 	call	0x1202	; 0x1202 <__fp_split3>
    127e:	70 f3       	brcs	.-36     	; 0x125c <__mulsf3+0x8>

00001280 <__mulsf3_pse>:
    1280:	95 9f       	mul	r25, r21
    1282:	c1 f3       	breq	.-16     	; 0x1274 <__mulsf3+0x20>
    1284:	95 0f       	add	r25, r21
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	55 1f       	adc	r21, r21
    128a:	62 9f       	mul	r22, r18
    128c:	f0 01       	movw	r30, r0
    128e:	72 9f       	mul	r23, r18
    1290:	bb 27       	eor	r27, r27
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	63 9f       	mul	r22, r19
    1298:	aa 27       	eor	r26, r26
    129a:	f0 0d       	add	r31, r0
    129c:	b1 1d       	adc	r27, r1
    129e:	aa 1f       	adc	r26, r26
    12a0:	64 9f       	mul	r22, r20
    12a2:	66 27       	eor	r22, r22
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	66 1f       	adc	r22, r22
    12aa:	82 9f       	mul	r24, r18
    12ac:	22 27       	eor	r18, r18
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	73 9f       	mul	r23, r19
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	62 1f       	adc	r22, r18
    12bc:	83 9f       	mul	r24, r19
    12be:	a0 0d       	add	r26, r0
    12c0:	61 1d       	adc	r22, r1
    12c2:	22 1f       	adc	r18, r18
    12c4:	74 9f       	mul	r23, r20
    12c6:	33 27       	eor	r19, r19
    12c8:	a0 0d       	add	r26, r0
    12ca:	61 1d       	adc	r22, r1
    12cc:	23 1f       	adc	r18, r19
    12ce:	84 9f       	mul	r24, r20
    12d0:	60 0d       	add	r22, r0
    12d2:	21 1d       	adc	r18, r1
    12d4:	82 2f       	mov	r24, r18
    12d6:	76 2f       	mov	r23, r22
    12d8:	6a 2f       	mov	r22, r26
    12da:	11 24       	eor	r1, r1
    12dc:	9f 57       	subi	r25, 0x7F	; 127
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	9a f0       	brmi	.+38     	; 0x1308 <__mulsf3_pse+0x88>
    12e2:	f1 f0       	breq	.+60     	; 0x1320 <__mulsf3_pse+0xa0>
    12e4:	88 23       	and	r24, r24
    12e6:	4a f0       	brmi	.+18     	; 0x12fa <__mulsf3_pse+0x7a>
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	bb 1f       	adc	r27, r27
    12ee:	66 1f       	adc	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	91 50       	subi	r25, 0x01	; 1
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <__mulsf3_pse+0x64>
    12fa:	9e 3f       	cpi	r25, 0xFE	; 254
    12fc:	51 05       	cpc	r21, r1
    12fe:	80 f0       	brcs	.+32     	; 0x1320 <__mulsf3_pse+0xa0>
    1300:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1304:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    1308:	5f 3f       	cpi	r21, 0xFF	; 255
    130a:	e4 f3       	brlt	.-8      	; 0x1304 <__mulsf3_pse+0x84>
    130c:	98 3e       	cpi	r25, 0xE8	; 232
    130e:	d4 f3       	brlt	.-12     	; 0x1304 <__mulsf3_pse+0x84>
    1310:	86 95       	lsr	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b7 95       	ror	r27
    1318:	f7 95       	ror	r31
    131a:	e7 95       	ror	r30
    131c:	9f 5f       	subi	r25, 0xFF	; 255
    131e:	c1 f7       	brne	.-16     	; 0x1310 <__mulsf3_pse+0x90>
    1320:	fe 2b       	or	r31, r30
    1322:	88 0f       	add	r24, r24
    1324:	91 1d       	adc	r25, r1
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	97 f9       	bld	r25, 7
    132c:	08 95       	ret

0000132e <__udivmodsi4>:
    132e:	a1 e2       	ldi	r26, 0x21	; 33
    1330:	1a 2e       	mov	r1, r26
    1332:	aa 1b       	sub	r26, r26
    1334:	bb 1b       	sub	r27, r27
    1336:	fd 01       	movw	r30, r26
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <__udivmodsi4_ep>

0000133a <__udivmodsi4_loop>:
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	ee 1f       	adc	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	a2 17       	cp	r26, r18
    1344:	b3 07       	cpc	r27, r19
    1346:	e4 07       	cpc	r30, r20
    1348:	f5 07       	cpc	r31, r21
    134a:	20 f0       	brcs	.+8      	; 0x1354 <__udivmodsi4_ep>
    134c:	a2 1b       	sub	r26, r18
    134e:	b3 0b       	sbc	r27, r19
    1350:	e4 0b       	sbc	r30, r20
    1352:	f5 0b       	sbc	r31, r21

00001354 <__udivmodsi4_ep>:
    1354:	66 1f       	adc	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	1a 94       	dec	r1
    135e:	69 f7       	brne	.-38     	; 0x133a <__udivmodsi4_loop>
    1360:	60 95       	com	r22
    1362:	70 95       	com	r23
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	bd 01       	movw	r22, r26
    136e:	cf 01       	movw	r24, r30
    1370:	08 95       	ret

00001372 <__tablejump2__>:
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	05 90       	lpm	r0, Z+
    1378:	f4 91       	lpm	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	09 94       	ijmp

0000137e <_exit>:
    137e:	f8 94       	cli

00001380 <__stop_program>:
    1380:	ff cf       	rjmp	.-2      	; 0x1380 <__stop_program>
