
xmega16e5-oled-i2c-debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020e  00802000  00000d36  00000dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080220e  0080220e  00000fd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fff  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f2d  00000000  00000000  00004157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b4  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00007138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b07  00000000  00000000  0000754c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001780  00000000  00000000  00009053  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000a7d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_11>
  30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  90:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  94:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  ac:	c1 04       	cpc	r12, r1
  ae:	c7 04       	cpc	r12, r7
  b0:	c7 04       	cpc	r12, r7
  b2:	c7 04       	cpc	r12, r7
  b4:	c7 04       	cpc	r12, r7
  b6:	c7 04       	cpc	r12, r7
  b8:	c7 04       	cpc	r12, r7
  ba:	c7 04       	cpc	r12, r7
  bc:	c7 04       	cpc	r12, r7
  be:	c7 04       	cpc	r12, r7
  c0:	c7 04       	cpc	r12, r7
  c2:	c7 04       	cpc	r12, r7
  c4:	c7 04       	cpc	r12, r7
  c6:	c7 04       	cpc	r12, r7
  c8:	c7 04       	cpc	r12, r7
  ca:	c7 04       	cpc	r12, r7
  cc:	c7 04       	cpc	r12, r7
  ce:	c7 04       	cpc	r12, r7
  d0:	c7 04       	cpc	r12, r7
  d2:	c7 04       	cpc	r12, r7
  d4:	c7 04       	cpc	r12, r7
  d6:	c7 04       	cpc	r12, r7
  d8:	c7 04       	cpc	r12, r7
  da:	c7 04       	cpc	r12, r7
  dc:	c7 04       	cpc	r12, r7
  de:	c7 04       	cpc	r12, r7
  e0:	c7 04       	cpc	r12, r7
  e2:	c7 04       	cpc	r12, r7
  e4:	c7 04       	cpc	r12, r7
  e6:	97 04       	cpc	r9, r7
  e8:	08 04       	cpc	r0, r8
  ea:	2b 04       	cpc	r2, r11
  ec:	c7 04       	cpc	r12, r7
  ee:	a9 04       	cpc	r10, r9
  f0:	c7 04       	cpc	r12, r7
  f2:	c7 04       	cpc	r12, r7
  f4:	c7 04       	cpc	r12, r7
  f6:	c7 04       	cpc	r12, r7
  f8:	c7 04       	cpc	r12, r7
  fa:	c7 04       	cpc	r12, r7
  fc:	c7 04       	cpc	r12, r7
  fe:	c7 04       	cpc	r12, r7
 100:	c7 04       	cpc	r12, r7
 102:	c7 04       	cpc	r12, r7
 104:	c7 04       	cpc	r12, r7
 106:	c7 04       	cpc	r12, r7
 108:	b6 04       	cpc	r11, r6
 10a:	c7 04       	cpc	r12, r7
 10c:	58 04       	cpc	r5, r8
 10e:	c7 04       	cpc	r12, r7
 110:	c7 04       	cpc	r12, r7
 112:	76 04       	cpc	r7, r6
 114:	c7 04       	cpc	r12, r7
 116:	c7 04       	cpc	r12, r7
 118:	c7 04       	cpc	r12, r7
 11a:	c7 04       	cpc	r12, r7
 11c:	c7 04       	cpc	r12, r7
 11e:	c7 04       	cpc	r12, r7
 120:	c7 04       	cpc	r12, r7
 122:	c7 04       	cpc	r12, r7
 124:	c7 04       	cpc	r12, r7
 126:	85 04       	cpc	r8, r5
 128:	08 04       	cpc	r0, r8
 12a:	12 04       	cpc	r1, r2
 12c:	c7 04       	cpc	r12, r7
 12e:	a9 04       	cpc	r10, r9
 130:	c7 04       	cpc	r12, r7
 132:	c7 04       	cpc	r12, r7
 134:	c7 04       	cpc	r12, r7
 136:	c7 04       	cpc	r12, r7
 138:	c7 04       	cpc	r12, r7
 13a:	c7 04       	cpc	r12, r7
 13c:	c7 04       	cpc	r12, r7
 13e:	c7 04       	cpc	r12, r7
 140:	c7 04       	cpc	r12, r7
 142:	c7 04       	cpc	r12, r7
 144:	c7 04       	cpc	r12, r7
 146:	c7 04       	cpc	r12, r7
 148:	b6 04       	cpc	r11, r6
 14a:	c7 04       	cpc	r12, r7
 14c:	49 04       	cpc	r4, r9
 14e:	c7 04       	cpc	r12, r7
 150:	c7 04       	cpc	r12, r7
 152:	67 04       	cpc	r6, r7

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	d7 e2       	ldi	r29, 0x27	; 39
 15e:	de bf       	out	0x3e, r29	; 62

00000160 <__do_copy_data>:
 160:	12 e2       	ldi	r17, 0x22	; 34
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b0 e2       	ldi	r27, 0x20	; 32
 166:	e6 e3       	ldi	r30, 0x36	; 54
 168:	fd e0       	ldi	r31, 0x0D	; 13
 16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
 16c:	05 90       	lpm	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	ae 30       	cpi	r26, 0x0E	; 14
 172:	b1 07       	cpc	r27, r17
 174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
 176:	22 e2       	ldi	r18, 0x22	; 34
 178:	ae e0       	ldi	r26, 0x0E	; 14
 17a:	b2 e2       	ldi	r27, 0x22	; 34
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	ab 31       	cpi	r26, 0x1B	; 27
 182:	b2 07       	cpc	r27, r18
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
 18a:	0c 94 99 06 	jmp	0xd32	; 0xd32 <_exit>

0000018e <__bad_interrupt>:
 18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_READ;
	
	while(twi_transfer_complete!=1);
	
	return 0;
}
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
 198:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f4 e0       	ldi	r31, 0x04	; 4
 1a0:	80 81       	ld	r24, Z
 1a2:	88 6f       	ori	r24, 0xF8	; 248
 1a4:	80 83       	st	Z, r24
 1a6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
 1aa:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 1ae:	e4 e8       	ldi	r30, 0x84	; 132
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	80 81       	ld	r24, Z
 1b4:	8d 6c       	ori	r24, 0xCD	; 205
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <twi_repeat>:


uint8_t twi_repeat(uint8_t device_addr, uint8_t cmd, uint8_t data, uint16_t count)
{

	twi_repeat_mode = 1;
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	90 93 11 22 	sts	0x2211, r25	; 0x802211 <twi_repeat_mode>

	twi_no_of_bytes=count;
 1c0:	20 93 0f 22 	sts	0x220F, r18	; 0x80220f <twi_no_of_bytes>
 1c4:	30 93 10 22 	sts	0x2210, r19	; 0x802210 <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
 1c8:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <twi_data_count>
 1cc:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <twi_data_count+0x1>
	
	twi_repeat_cmd_sent = 0;
 1d0:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <__data_end>
	
	twi_transfer_complete=0;
 1d4:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <twi_transfer_complete>
	
	twi_repeat_cmd = cmd;
 1d8:	60 93 18 22 	sts	0x2218, r22	; 0x802218 <twi_repeat_cmd>
	
	twi_repeat_data=data;
 1dc:	40 93 15 22 	sts	0x2215, r20	; 0x802215 <twi_repeat_data>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
 1e0:	88 0f       	add	r24, r24
 1e2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
 1e6:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <twi_transfer_complete>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <twi_repeat+0x2c>

	return 0;
}
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
 1f2:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
 1f6:	40 93 0f 22 	sts	0x220F, r20	; 0x80220f <twi_no_of_bytes>
 1fa:	50 93 10 22 	sts	0x2210, r21	; 0x802210 <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
 1fe:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <twi_data_count>
 202:	10 92 13 22 	sts	0x2213, r1	; 0x802213 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
 206:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <twi_transfer_complete>
	
	twi_data=data;
 20a:	60 93 16 22 	sts	0x2216, r22	; 0x802216 <twi_data>
 20e:	70 93 17 22 	sts	0x2217, r23	; 0x802217 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
 212:	88 0f       	add	r24, r24
 214:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
 218:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <twi_transfer_complete>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	e1 f7       	brne	.-8      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
	
	return 0;
}
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
 23e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 242:	83 ff       	sbrs	r24, 3
 244:	03 c0       	rjmp	.+6      	; 0x24c <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
 24c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 250:	82 fd       	sbrc	r24, 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <__vector_11+0x38>
 254:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 258:	84 ff       	sbrs	r24, 4
 25a:	06 c0       	rjmp	.+12     	; 0x268 <__vector_11+0x44>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
 25c:	e3 e8       	ldi	r30, 0x83	; 131
 25e:	f4 e0       	ldi	r31, 0x04	; 4
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	}

	if(twi_transfer_complete)
 268:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <twi_transfer_complete>
 26c:	88 23       	and	r24, r24
 26e:	31 f0       	breq	.+12     	; 0x27c <__vector_11+0x58>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
 270:	e4 e8       	ldi	r30, 0x84	; 132
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
		return;
 27a:	79 c0       	rjmp	.+242    	; 0x36e <__vector_11+0x14a>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
 27c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 280:	86 ff       	sbrs	r24, 6
 282:	47 c0       	rjmp	.+142    	; 0x312 <__vector_11+0xee>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
 284:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 288:	84 fd       	sbrc	r24, 4
 28a:	43 c0       	rjmp	.+134    	; 0x312 <__vector_11+0xee>
		{
			if (twi_repeat_mode)
 28c:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <twi_repeat_mode>
 290:	88 23       	and	r24, r24
 292:	c9 f0       	breq	.+50     	; 0x2c6 <__vector_11+0xa2>
			{
				if (twi_repeat_cmd_sent)
 294:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <__data_end>
 298:	88 23       	and	r24, r24
 29a:	69 f0       	breq	.+26     	; 0x2b6 <__vector_11+0x92>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
 29c:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <twi_repeat_data>
 2a0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
 2a4:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <twi_data_count>
 2a8:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <twi_data_count+0x1>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <twi_data_count>
 2b2:	90 93 13 22 	sts	0x2213, r25	; 0x802213 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
 2b6:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <twi_repeat_cmd>
 2ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <__data_end>
 2c4:	15 c0       	rjmp	.+42     	; 0x2f0 <__vector_11+0xcc>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
 2c6:	20 91 16 22 	lds	r18, 0x2216	; 0x802216 <twi_data>
 2ca:	30 91 17 22 	lds	r19, 0x2217	; 0x802217 <twi_data+0x1>
 2ce:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <twi_data_count>
 2d2:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <twi_data_count+0x1>
 2d6:	ac 01       	movw	r20, r24
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	40 93 12 22 	sts	0x2212, r20	; 0x802212 <twi_data_count>
 2e0:	50 93 13 22 	sts	0x2213, r21	; 0x802213 <twi_data_count+0x1>
 2e4:	f9 01       	movw	r30, r18
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 1f       	adc	r31, r25
 2ea:	80 81       	ld	r24, Z
 2ec:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
 2f0:	20 91 12 22 	lds	r18, 0x2212	; 0x802212 <twi_data_count>
 2f4:	30 91 13 22 	lds	r19, 0x2213	; 0x802213 <twi_data_count+0x1>
 2f8:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <twi_no_of_bytes>
 2fc:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <twi_no_of_bytes+0x1>
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	31 f4       	brne	.+12     	; 0x312 <__vector_11+0xee>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
 312:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 316:	88 23       	and	r24, r24
 318:	54 f5       	brge	.+84     	; 0x36e <__vector_11+0x14a>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
 31a:	20 91 16 22 	lds	r18, 0x2216	; 0x802216 <twi_data>
 31e:	30 91 17 22 	lds	r19, 0x2217	; 0x802217 <twi_data+0x1>
 322:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <twi_data_count>
 326:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <twi_data_count+0x1>
 32a:	ac 01       	movw	r20, r24
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	40 93 12 22 	sts	0x2212, r20	; 0x802212 <twi_data_count>
 334:	50 93 13 22 	sts	0x2213, r21	; 0x802213 <twi_data_count+0x1>
 338:	f9 01       	movw	r30, r18
 33a:	e8 0f       	add	r30, r24
 33c:	f9 1f       	adc	r31, r25
 33e:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
 342:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
 344:	20 91 12 22 	lds	r18, 0x2212	; 0x802212 <twi_data_count>
 348:	30 91 13 22 	lds	r19, 0x2213	; 0x802213 <twi_data_count+0x1>
 34c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <twi_no_of_bytes>
 350:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <twi_no_of_bytes+0x1>
 354:	28 17       	cp	r18, r24
 356:	39 07       	cpc	r19, r25
 358:	39 f4       	brne	.+14     	; 0x368 <__vector_11+0x144>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <twi_transfer_complete>
 366:	03 c0       	rjmp	.+6      	; 0x36e <__vector_11+0x14a>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <clk_init>:
#include "SSD1306.h"
#include "i2c.h"

void clk_init()
{
	CCP = CCP_IOREG_gc;
 388:	88 ed       	ldi	r24, 0xD8	; 216
 38a:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
 392:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 396:	81 ff       	sbrs	r24, 1
 398:	fc cf       	rjmp	.-8      	; 0x392 <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
 39a:	88 ed       	ldi	r24, 0xD8	; 216
 39c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
 3a4:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
 3a6:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
 3aa:	08 95       	ret

000003ac <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 3ac:	87 e0       	ldi	r24, 0x07	; 7
 3ae:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
 3b2:	08 95       	ret

000003b4 <main>:
}

int main(void)
{
	
 	cli();
 3b4:	f8 94       	cli
	clk_init();
 3b6:	0e 94 c4 01 	call	0x388	; 0x388 <clk_init>
 	interrupt_init();
 3ba:	0e 94 d6 01 	call	0x3ac	; 0x3ac <interrupt_init>

 	twi_init();
 3be:	0e 94 c9 00 	call	0x192	; 0x192 <twi_init>
	
 	sei();	
 3c2:	78 94       	sei

 	ssd1306_init();
 3c4:	0e 94 14 02 	call	0x428	; 0x428 <ssd1306_init>

 	ssd1306_clear();
 3c8:	0e 94 33 02 	call	0x466	; 0x466 <ssd1306_clear>
 	ssd1306_setCursor(0, 0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ssd1306_setCursor>
 	ssd1306__printf("Hello number %d.",1);
 3d4:	1f 92       	push	r1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8f 93       	push	r24
 3da:	82 e2       	ldi	r24, 0x22	; 34
 3dc:	90 e2       	ldi	r25, 0x20	; 32
 3de:	9f 93       	push	r25
 3e0:	8f 93       	push	r24
 3e2:	0e 94 c5 03 	call	0x78a	; 0x78a <ssd1306__printf>
 	PORTA.DIRSET = PIN3_bm;
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7fb601>
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
	uint16_t x = 0;
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {
	    //ssd1306_clear();
	    ssd1306_setCursor(0, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ssd1306_setCursor>
	    ssd1306__printf("Hello number %d.",x++);
 400:	8e 01       	movw	r16, r28
 402:	0f 5f       	subi	r16, 0xFF	; 255
 404:	1f 4f       	sbci	r17, 0xFF	; 255
 406:	df 93       	push	r29
 408:	cf 93       	push	r28
 40a:	82 e2       	ldi	r24, 0x22	; 34
 40c:	90 e2       	ldi	r25, 0x20	; 32
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	0e 94 c5 03 	call	0x78a	; 0x78a <ssd1306__printf>
		PORTA.OUTTGL = PIN3_bm;
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
	
    while (1) 
    {
	    //ssd1306_clear();
	    ssd1306_setCursor(0, 0);
	    ssd1306__printf("Hello number %d.",x++);
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	e8 01       	movw	r28, r16
 426:	e8 cf       	rjmp	.-48     	; 0x3f8 <main+0x44>

00000428 <ssd1306_init>:
{
    if(lineNumber<8)
    {   /* If the line number is within range
         then move it to specified line and keep track*/
        ssd1306_lineNum = lineNumber;
        ssd1306_setCursor(ssd1306_lineNum,0);
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	6b 97       	sbiw	r28, 0x1b	; 27
 432:	cd bf       	out	0x3d, r28	; 61
 434:	de bf       	out	0x3e, r29	; 62
 436:	8b e1       	ldi	r24, 0x1B	; 27
 438:	e0 e0       	ldi	r30, 0x00	; 0
 43a:	f0 e2       	ldi	r31, 0x20	; 32
 43c:	de 01       	movw	r26, r28
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	01 90       	ld	r0, Z+
 442:	0d 92       	st	X+, r0
 444:	8a 95       	dec	r24
 446:	e1 f7       	brne	.-8      	; 0x440 <ssd1306_init+0x18>
 448:	4b e1       	ldi	r20, 0x1B	; 27
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8c e3       	ldi	r24, 0x3C	; 60
 454:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	6b 96       	adiw	r28, 0x1b	; 27
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	de bf       	out	0x3e, r29	; 62
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <ssd1306_clear>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	27 97       	sbiw	r28, 0x07	; 7
 470:	cd bf       	out	0x3d, r28	; 61
 472:	de bf       	out	0x3e, r29	; 62
 474:	87 e0       	ldi	r24, 0x07	; 7
 476:	eb e1       	ldi	r30, 0x1B	; 27
 478:	f0 e2       	ldi	r31, 0x20	; 32
 47a:	de 01       	movw	r26, r28
 47c:	11 96       	adiw	r26, 0x01	; 1
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <ssd1306_clear+0x18>
 486:	47 e0       	ldi	r20, 0x07	; 7
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	be 01       	movw	r22, r28
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8c e3       	ldi	r24, 0x3C	; 60
 492:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 496:	81 11       	cpse	r24, r1
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <ssd1306_clear+0x42>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	32 e0       	ldi	r19, 0x02	; 2
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	60 e4       	ldi	r22, 0x40	; 64
 4a2:	8c e3       	ldi	r24, 0x3C	; 60
 4a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <twi_repeat>
 4a8:	27 96       	adiw	r28, 0x07	; 7
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <ssd1306_setCursor>:
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	27 97       	sbiw	r28, 0x07	; 7
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	88 30       	cpi	r24, 0x08	; 8
 4c4:	c8 f4       	brcc	.+50     	; 0x4f8 <ssd1306_setCursor+0x44>
 4c6:	66 23       	and	r22, r22
 4c8:	bc f0       	brlt	.+46     	; 0x4f8 <ssd1306_setCursor+0x44>
 4ca:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <ssd1306_lineNum>
 4ce:	60 93 1a 22 	sts	0x221A, r22	; 0x80221a <ssd1306_cursorPos>
 4d2:	19 82       	std	Y+1, r1	; 0x01
 4d4:	91 e2       	ldi	r25, 0x21	; 33
 4d6:	9a 83       	std	Y+2, r25	; 0x02
 4d8:	6b 83       	std	Y+3, r22	; 0x03
 4da:	9f e7       	ldi	r25, 0x7F	; 127
 4dc:	9c 83       	std	Y+4, r25	; 0x04
 4de:	92 e2       	ldi	r25, 0x22	; 34
 4e0:	9d 83       	std	Y+5, r25	; 0x05
 4e2:	8e 83       	std	Y+6, r24	; 0x06
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	8f 83       	std	Y+7, r24	; 0x07
 4e8:	47 e0       	ldi	r20, 0x07	; 7
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	be 01       	movw	r22, r28
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8c e3       	ldi	r24, 0x3C	; 60
 4f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
 4f8:	27 96       	adiw	r28, 0x07	; 7
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	de bf       	out	0x3e, r29	; 62
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <ssd1306_goToNextLine>:
 ****************************************************************************************************/
void  ssd1306_goToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    ssd1306_lineNum++;
 504:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <ssd1306_lineNum>
 508:	8f 5f       	subi	r24, 0xFF	; 255
    ssd1306_lineNum = ssd1306_lineNum&0x07;
 50a:	87 70       	andi	r24, 0x07	; 7
 50c:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <ssd1306_lineNum>
    ssd1306_setCursor(ssd1306_lineNum,0); /* Finally move it to next line */
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ssd1306_setCursor>
 516:	08 95       	ret

00000518 <ssd1306_displayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	27 97       	sbiw	r28, 0x07	; 7
 524:	cd bf       	out	0x3d, r28	; 61
 526:	de bf       	out	0x3e, r29	; 62
 528:	18 2f       	mov	r17, r24
    uint8_t dat,i=0;
    
    if(((ssd1306_cursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 52a:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <ssd1306_cursorPos>
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	05 96       	adiw	r24, 0x05	; 5
 532:	80 38       	cpi	r24, 0x80	; 128
 534:	91 05       	cpc	r25, r1
 536:	14 f4       	brge	.+4      	; 0x53c <ssd1306_displayChar+0x24>
 538:	1a 30       	cpi	r17, 0x0A	; 10
 53a:	11 f4       	brne	.+4      	; 0x540 <ssd1306_displayChar+0x28>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        ssd1306_goToNextLine();
 53c:	0e 94 82 02 	call	0x504	; 0x504 <ssd1306_goToNextLine>
    }
    if(ch!='\n') /* TODO */
 540:	1a 30       	cpi	r17, 0x0A	; 10
 542:	c9 f1       	breq	.+114    	; 0x5b6 <ssd1306_displayChar+0x9e>
    {
		
		uint8_t data[FONT_SIZE+2];
		data[0] = SSD1306_DATA_START;
 544:	80 e4       	ldi	r24, 0x40	; 64
 546:	89 83       	std	Y+1, r24	; 0x01
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
 548:	80 ee       	ldi	r24, 0xE0	; 224
 54a:	81 0f       	add	r24, r17
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void ssd1306_displayChar(uint8_t ch)
{
    uint8_t dat,i=0;
 54c:	90 e0       	ldi	r25, 0x00	; 0
		
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
        
        while(1)
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	49 2f       	mov	r20, r25
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	f9 01       	movw	r30, r18
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e2 0f       	add	r30, r18
 562:	f3 1f       	adc	r31, r19
 564:	ed 5c       	subi	r30, 0xCD	; 205
 566:	ff 4d       	sbci	r31, 0xDF	; 223
 568:	e4 0f       	add	r30, r20
 56a:	f5 1f       	adc	r31, r21
 56c:	20 81       	ld	r18, Z
            data[i+1] = dat;
 56e:	4f 5f       	subi	r20, 0xFF	; 255
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	e1 e0       	ldi	r30, 0x01	; 1
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	ec 0f       	add	r30, r28
 578:	fd 1f       	adc	r31, r29
 57a:	e4 0f       	add	r30, r20
 57c:	f5 1f       	adc	r31, r21
 57e:	20 83       	st	Z, r18
            
			
            ssd1306_cursorPos++;
 580:	20 91 1a 22 	lds	r18, 0x221A	; 0x80221a <ssd1306_cursorPos>
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	20 93 1a 22 	sts	0x221A, r18	; 0x80221a <ssd1306_cursorPos>
            
            i++;
 58a:	9f 5f       	subi	r25, 0xFF	; 255
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 58c:	95 30       	cpi	r25, 0x05	; 5
 58e:	f9 f6       	brne	.-66     	; 0x54e <ssd1306_displayChar+0x36>
            {
				data[i+1] = 0;
 590:	e9 2f       	mov	r30, r25
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	31 96       	adiw	r30, 0x01	; 1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	8c 0f       	add	r24, r28
 59c:	9d 1f       	adc	r25, r29
 59e:	e8 0f       	add	r30, r24
 5a0:	f9 1f       	adc	r31, r25
 5a2:	10 82       	st	Z, r1
				
                ssd1306_cursorPos++;
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	20 93 1a 22 	sts	0x221A, r18	; 0x80221a <ssd1306_cursorPos>
                break;
            }
        }
		twi_write(SSD1306_I2C_ADDRESS, data, sizeof data);
 5aa:	47 e0       	ldi	r20, 0x07	; 7
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	bc 01       	movw	r22, r24
 5b0:	8c e3       	ldi	r24, 0x3C	; 60
 5b2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <twi_write>
    }
}
 5b6:	27 96       	adiw	r28, 0x07	; 7
 5b8:	cd bf       	out	0x3d, r28	; 61
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	08 95       	ret

000005c4 <ssd1306_displayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	ec 01       	movw	r28, r24
    while(*ptr)
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <ssd1306_displayString+0xe>
        ssd1306_displayChar(*ptr++);
 5cc:	21 96       	adiw	r28, 0x01	; 1
 5ce:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/

void ssd1306_displayString(uint8_t *ptr)
{
    while(*ptr)
 5d2:	88 81       	ld	r24, Y
 5d4:	81 11       	cpse	r24, r1
 5d6:	fa cf       	rjmp	.-12     	; 0x5cc <ssd1306_displayString+0x8>
        ssd1306_displayChar(*ptr++);
}
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <ssd1306_displayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/

void ssd1306_displayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
 5de:	4f 92       	push	r4
 5e0:	5f 92       	push	r5
 5e2:	6f 92       	push	r6
 5e4:	7f 92       	push	r7
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	2a 97       	sbiw	r28, 0x0a	; 10
 600:	cd bf       	out	0x3d, r28	; 61
 602:	de bf       	out	0x3e, r29	; 62
 604:	a8 2e       	mov	r10, r24
 606:	6a 01       	movw	r12, r20
 608:	7b 01       	movw	r14, r22
 60a:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	a8 12       	cpse	r10, r24
 610:	20 c0       	rjmp	.+64     	; 0x652 <ssd1306_displayNumber+0x74>
 612:	1c c0       	rjmp	.+56     	; 0x64c <ssd1306_displayNumber+0x6e>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
 614:	80 2f       	mov	r24, r16
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <ssd1306_displayNumber+0x46>
 620:	44 0f       	add	r20, r20
 622:	55 1f       	adc	r21, r21
 624:	8a 95       	dec	r24
 626:	e2 f7       	brpl	.-8      	; 0x620 <ssd1306_displayNumber+0x42>
 628:	05 2e       	mov	r0, r21
 62a:	00 0c       	add	r0, r0
 62c:	66 0b       	sbc	r22, r22
 62e:	77 0b       	sbc	r23, r23
 630:	4c 21       	and	r20, r12
 632:	5d 21       	and	r21, r13
 634:	6e 21       	and	r22, r14
 636:	7f 21       	and	r23, r15
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	45 2b       	or	r20, r21
 63c:	46 2b       	or	r20, r22
 63e:	47 2b       	or	r20, r23
 640:	09 f4       	brne	.+2      	; 0x644 <ssd1306_displayNumber+0x66>
 642:	80 e0       	ldi	r24, 0x00	; 0
            ssd1306_displayChar(util_Dec2Ascii(i));
 644:	80 5d       	subi	r24, 0xD0	; 208
 646:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
            v_numOfDigitsToDisplay_u8--;
 64a:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
 64c:	01 11       	cpse	r16, r1
 64e:	e2 cf       	rjmp	.-60     	; 0x614 <ssd1306_displayNumber+0x36>
 650:	52 c0       	rjmp	.+164    	; 0x6f6 <ssd1306_displayNumber+0x118>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            ssd1306_displayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
 652:	45 2b       	or	r20, r21
 654:	46 2b       	or	r20, r22
 656:	47 2b       	or	r20, r23
 658:	39 f0       	breq	.+14     	; 0x668 <ssd1306_displayNumber+0x8a>
 65a:	10 e0       	ldi	r17, 0x00	; 0
 65c:	35 c0       	rjmp	.+106    	; 0x6c8 <ssd1306_displayNumber+0xea>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
 65e:	80 e3       	ldi	r24, 0x30	; 48
 660:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 664:	1f 5f       	subi	r17, 0xFF	; 255
 666:	01 c0       	rjmp	.+2      	; 0x66a <ssd1306_displayNumber+0x8c>
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	10 17       	cp	r17, r16
 66c:	08 f0       	brcs	.+2      	; 0x670 <ssd1306_displayNumber+0x92>
 66e:	43 c0       	rjmp	.+134    	; 0x6f6 <ssd1306_displayNumber+0x118>
 670:	1a 30       	cpi	r17, 0x0A	; 10
 672:	a8 f3       	brcs	.-22     	; 0x65e <ssd1306_displayNumber+0x80>
 674:	40 c0       	rjmp	.+128    	; 0x6f6 <ssd1306_displayNumber+0x118>
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
 676:	c1 14       	cp	r12, r1
 678:	d1 04       	cpc	r13, r1
 67a:	e1 04       	cpc	r14, r1
 67c:	f1 04       	cpc	r15, r1
 67e:	d1 f0       	breq	.+52     	; 0x6b4 <ssd1306_displayNumber+0xd6>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 680:	bc 2c       	mov	r11, r12
 682:	4a 2c       	mov	r4, r10
 684:	51 2c       	mov	r5, r1
 686:	61 2c       	mov	r6, r1
 688:	71 2c       	mov	r7, r1
 68a:	c7 01       	movw	r24, r14
 68c:	b6 01       	movw	r22, r12
 68e:	a3 01       	movw	r20, r6
 690:	92 01       	movw	r18, r4
 692:	0e 94 71 06 	call	0xce2	; 0xce2 <__udivmodsi4>
 696:	c2 2e       	mov	r12, r18
 698:	d3 2e       	mov	r13, r19
 69a:	e4 2e       	mov	r14, r20
 69c:	f5 2e       	mov	r15, r21
 69e:	e1 e0       	ldi	r30, 0x01	; 1
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	ec 0f       	add	r30, r28
 6a4:	fd 1f       	adc	r31, r29
 6a6:	e1 0f       	add	r30, r17
 6a8:	f1 1d       	adc	r31, r1
 6aa:	a2 9e       	mul	r10, r18
 6ac:	b0 18       	sub	r11, r0
 6ae:	11 24       	eor	r1, r1
 6b0:	b0 82       	st	Z, r11
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <ssd1306_displayNumber+0xe8>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
 6b4:	0b 30       	cpi	r16, 0x0B	; 11
 6b6:	e8 f4       	brcc	.+58     	; 0x6f2 <ssd1306_displayNumber+0x114>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
 6b8:	e1 e0       	ldi	r30, 0x01	; 1
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	ec 0f       	add	r30, r28
 6be:	fd 1f       	adc	r31, r29
 6c0:	e1 0f       	add	r30, r17
 6c2:	f1 1d       	adc	r31, r1
 6c4:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            ssd1306_displayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 6c6:	1f 5f       	subi	r17, 0xFF	; 255
 6c8:	10 17       	cp	r17, r16
 6ca:	a8 f2       	brcs	.-86     	; 0x676 <ssd1306_displayNumber+0x98>
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <ssd1306_displayNumber+0x114>
        }
        
        while(i!=0)
        {
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
 6ce:	e1 2f       	mov	r30, r17
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	31 97       	sbiw	r30, 0x01	; 1
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	8c 0f       	add	r24, r28
 6da:	9d 1f       	adc	r25, r29
 6dc:	e8 0f       	add	r30, r24
 6de:	f9 1f       	adc	r31, r25
 6e0:	80 81       	ld	r24, Z
 6e2:	8a 30       	cpi	r24, 0x0A	; 10
 6e4:	10 f0       	brcs	.+4      	; 0x6ea <ssd1306_displayNumber+0x10c>
 6e6:	89 5c       	subi	r24, 0xC9	; 201
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <ssd1306_displayNumber+0x10e>
 6ea:	80 5d       	subi	r24, 0xD0	; 208
 6ec:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
            i--;
 6f0:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 6f2:	11 11       	cpse	r17, r1
 6f4:	ec cf       	rjmp	.-40     	; 0x6ce <ssd1306_displayNumber+0xf0>
            /* Finally get the ascii values of the digits and display*/
            ssd1306_displayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
 6f6:	2a 96       	adiw	r28, 0x0a	; 10
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	bf 90       	pop	r11
 70e:	af 90       	pop	r10
 710:	7f 90       	pop	r7
 712:	6f 90       	pop	r6
 714:	5f 90       	pop	r5
 716:	4f 90       	pop	r4
 718:	08 95       	ret

0000071a <ssd1306_displayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/

void ssd1306_displayFloatNumber(double v_floatNum_f32)
{
 71a:	8f 92       	push	r8
 71c:	9f 92       	push	r9
 71e:	af 92       	push	r10
 720:	bf 92       	push	r11
 722:	cf 92       	push	r12
 724:	df 92       	push	r13
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	6b 01       	movw	r12, r22
 72c:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
    
    v_temp_u32 = (uint32_t) v_floatNum_f32;
 72e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fixunssfsi>
 732:	4b 01       	movw	r8, r22
 734:	5c 01       	movw	r10, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 736:	2f ef       	ldi	r18, 0xFF	; 255
 738:	ab 01       	movw	r20, r22
 73a:	bc 01       	movw	r22, r24
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
    
    ssd1306_displayChar('.');
 742:	8e e2       	ldi	r24, 0x2E	; 46
 744:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
    
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
 748:	c5 01       	movw	r24, r10
 74a:	b4 01       	movw	r22, r8
 74c:	0e 94 76 05 	call	0xaec	; 0xaec <__floatunsisf>
 750:	9b 01       	movw	r18, r22
 752:	ac 01       	movw	r20, r24
 754:	c7 01       	movw	r24, r14
 756:	b6 01       	movw	r22, r12
 758:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__subsf3>
    v_temp_u32 = v_floatNum_f32 * 1000000;
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	34 e2       	ldi	r19, 0x24	; 36
 760:	44 e7       	ldi	r20, 0x74	; 116
 762:	59 e4       	ldi	r21, 0x49	; 73
 764:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 768:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fixunssfsi>
 76c:	ab 01       	movw	r20, r22
 76e:	bc 01       	movw	r22, r24
    ssd1306_displayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 770:	2f ef       	ldi	r18, 0xFF	; 255
 772:	8a e0       	ldi	r24, 0x0A	; 10
 774:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
}
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	df 90       	pop	r13
 77e:	cf 90       	pop	r12
 780:	bf 90       	pop	r11
 782:	af 90       	pop	r10
 784:	9f 90       	pop	r9
 786:	8f 90       	pop	r8
 788:	08 95       	ret

0000078a <ssd1306__printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/

void ssd1306__printf(const char *argList, ...)
{
 78a:	4f 92       	push	r4
 78c:	5f 92       	push	r5
 78e:	6f 92       	push	r6
 790:	7f 92       	push	r7
 792:	af 92       	push	r10
 794:	bf 92       	push	r11
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	fe 01       	movw	r30, r28
 7a6:	3e 96       	adiw	r30, 0x0e	; 14
 7a8:	e1 90       	ld	r14, Z+
 7aa:	f1 90       	ld	r15, Z+
    uint8_t v_numOfDigitsToDisp_u8;

    double v_floatNum_f32;

    
    va_start(argp, argList);
 7ac:	3f 01       	movw	r6, r30
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 7ae:	f2 c0       	rjmp	.+484    	; 0x994 <__DATA_REGION_LENGTH__+0x194>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 7b0:	85 32       	cpi	r24, 0x25	; 37
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <ssd1306__printf+0x2c>
 7b4:	ea c0       	rjmp	.+468    	; 0x98a <__DATA_REGION_LENGTH__+0x18a>
        {
            ptr++;
 7b6:	c7 01       	movw	r24, r14
 7b8:	01 96       	adiw	r24, 0x01	; 1
            ch = *ptr;
 7ba:	d7 01       	movw	r26, r14
 7bc:	11 96       	adiw	r26, 0x01	; 1
 7be:	ec 91       	ld	r30, X
            if((ch>=0x30) && (ch<=0x39))
 7c0:	20 ed       	ldi	r18, 0xD0	; 208
 7c2:	2e 0f       	add	r18, r30
 7c4:	2a 30       	cpi	r18, 0x0A	; 10
 7c6:	90 f0       	brcs	.+36     	; 0x7ec <ssd1306__printf+0x62>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
 7c8:	7c 01       	movw	r14, r24
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 7ca:	1f ef       	ldi	r17, 0xFF	; 255
 7cc:	15 c0       	rjmp	.+42     	; 0x7f8 <ssd1306__printf+0x6e>
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 7ce:	81 2f       	mov	r24, r17
 7d0:	88 0f       	add	r24, r24
 7d2:	98 2f       	mov	r25, r24
 7d4:	99 0f       	add	r25, r25
 7d6:	99 0f       	add	r25, r25
 7d8:	89 0f       	add	r24, r25
 7da:	8e 0f       	add	r24, r30
 7dc:	10 ed       	ldi	r17, 0xD0	; 208
 7de:	18 0f       	add	r17, r24
                    ptr++;
 7e0:	bf ef       	ldi	r27, 0xFF	; 255
 7e2:	eb 1a       	sub	r14, r27
 7e4:	fb 0a       	sbc	r15, r27
                    ch = *ptr;
 7e6:	d7 01       	movw	r26, r14
 7e8:	ec 91       	ld	r30, X
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <ssd1306__printf+0x66>
 7ec:	7c 01       	movw	r14, r24
 7ee:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
 7f0:	80 ed       	ldi	r24, 0xD0	; 208
 7f2:	8e 0f       	add	r24, r30
 7f4:	8a 30       	cpi	r24, 0x0A	; 10
 7f6:	58 f3       	brcs	.-42     	; 0x7ce <ssd1306__printf+0x44>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
 7f8:	8e 2f       	mov	r24, r30
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	fc 01       	movw	r30, r24
 7fe:	b5 97       	sbiw	r30, 0x25	; 37
 800:	e4 35       	cpi	r30, 0x54	; 84
 802:	f1 05       	cpc	r31, r1
 804:	08 f0       	brcs	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	c3 c0       	rjmp	.+390    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
 808:	ea 5a       	subi	r30, 0xAA	; 170
 80a:	ff 4f       	sbci	r31, 0xFF	; 255
 80c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 810:	53 01       	movw	r10, r6
 812:	b2 e0       	ldi	r27, 0x02	; 2
 814:	ab 0e       	add	r10, r27
 816:	b1 1c       	adc	r11, r1
                    ssd1306_displayChar(ch);
 818:	f3 01       	movw	r30, r6
 81a:	80 81       	ld	r24, Z
 81c:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
            
            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 820:	35 01       	movw	r6, r10
                    ssd1306_displayChar(ch);
                    break;
 822:	b5 c0       	rjmp	.+362    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 824:	53 01       	movw	r10, r6
 826:	f2 e0       	ldi	r31, 0x02	; 2
 828:	af 0e       	add	r10, r31
 82a:	b1 1c       	adc	r11, r1
 82c:	d3 01       	movw	r26, r6
 82e:	6d 90       	ld	r6, X+
 830:	7c 90       	ld	r7, X
                    if(v_num_s16<0)
 832:	77 20       	and	r7, r7
 834:	34 f4       	brge	.+12     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
 836:	71 94       	neg	r7
 838:	61 94       	neg	r6
 83a:	71 08       	sbc	r7, r1
                        ssd1306_displayChar('-');
 83c:	8d e2       	ldi	r24, 0x2D	; 45
 83e:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
 842:	a3 01       	movw	r20, r6
 844:	77 0c       	add	r7, r7
 846:	66 0b       	sbc	r22, r22
 848:	77 0b       	sbc	r23, r23
 84a:	21 2f       	mov	r18, r17
 84c:	8a e0       	ldi	r24, 0x0A	; 10
 84e:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    ch = va_arg(argp, int);
                    ssd1306_displayChar(ch);
                    break;
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 852:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
 854:	9c c0       	rjmp	.+312    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 856:	53 01       	movw	r10, r6
 858:	b4 e0       	ldi	r27, 0x04	; 4
 85a:	ab 0e       	add	r10, r27
 85c:	b1 1c       	adc	r11, r1
 85e:	f3 01       	movw	r30, r6
 860:	40 80       	ld	r4, Z
 862:	51 80       	ldd	r5, Z+1	; 0x01
 864:	62 80       	ldd	r6, Z+2	; 0x02
 866:	73 80       	ldd	r7, Z+3	; 0x03
                    if(v_num_s32<0)
 868:	77 20       	and	r7, r7
 86a:	5c f4       	brge	.+22     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
 86c:	70 94       	com	r7
 86e:	60 94       	com	r6
 870:	50 94       	com	r5
 872:	40 94       	com	r4
 874:	41 1c       	adc	r4, r1
 876:	51 1c       	adc	r5, r1
 878:	61 1c       	adc	r6, r1
 87a:	71 1c       	adc	r7, r1
                        ssd1306_displayChar('-');
 87c:	8d e2       	ldi	r24, 0x2D	; 45
 87e:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
 882:	21 2f       	mov	r18, r17
 884:	b3 01       	movw	r22, r6
 886:	a2 01       	movw	r20, r4
 888:	8a e0       	ldi	r24, 0x0A	; 10
 88a:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 88e:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
                        ssd1306_displayChar('-');
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
 890:	7e c0       	rjmp	.+252    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 892:	53 01       	movw	r10, r6
 894:	f2 e0       	ldi	r31, 0x02	; 2
 896:	af 0e       	add	r10, r31
 898:	b1 1c       	adc	r11, r1
 89a:	d3 01       	movw	r26, r6
 89c:	4d 91       	ld	r20, X+
 89e:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	21 2f       	mov	r18, r17
 8a6:	8a e0       	ldi	r24, 0x0A	; 10
 8a8:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    }
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 8ac:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 8ae:	6f c0       	rjmp	.+222    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 8b0:	53 01       	movw	r10, r6
 8b2:	b4 e0       	ldi	r27, 0x04	; 4
 8b4:	ab 0e       	add	r10, r27
 8b6:	b1 1c       	adc	r11, r1
 8b8:	f3 01       	movw	r30, r6
 8ba:	40 81       	ld	r20, Z
 8bc:	51 81       	ldd	r21, Z+1	; 0x01
 8be:	62 81       	ldd	r22, Z+2	; 0x02
 8c0:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 8c2:	21 2f       	mov	r18, r17
 8c4:	8a e0       	ldi	r24, 0x0A	; 10
 8c6:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 8ca:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 8cc:	60 c0       	rjmp	.+192    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 8ce:	53 01       	movw	r10, r6
 8d0:	f2 e0       	ldi	r31, 0x02	; 2
 8d2:	af 0e       	add	r10, r31
 8d4:	b1 1c       	adc	r11, r1
 8d6:	d3 01       	movw	r26, r6
 8d8:	4d 91       	ld	r20, X+
 8da:	5c 91       	ld	r21, X
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	21 2f       	mov	r18, r17
 8e2:	80 e1       	ldi	r24, 0x10	; 16
 8e4:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    v_num_u32 = va_arg(argp, uint32_t);
                    ssd1306_displayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 8e8:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 8ea:	51 c0       	rjmp	.+162    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 8ec:	53 01       	movw	r10, r6
 8ee:	b4 e0       	ldi	r27, 0x04	; 4
 8f0:	ab 0e       	add	r10, r27
 8f2:	b1 1c       	adc	r11, r1
 8f4:	f3 01       	movw	r30, r6
 8f6:	40 81       	ld	r20, Z
 8f8:	51 81       	ldd	r21, Z+1	; 0x01
 8fa:	62 81       	ldd	r22, Z+2	; 0x02
 8fc:	73 81       	ldd	r23, Z+3	; 0x03
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 8fe:	21 2f       	mov	r18, r17
 900:	80 e1       	ldi	r24, 0x10	; 16
 902:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    v_num_u16 = va_arg(argp, int);
                    ssd1306_displayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 906:	35 01       	movw	r6, r10
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 908:	42 c0       	rjmp	.+132    	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 90a:	53 01       	movw	r10, r6
 90c:	f2 e0       	ldi	r31, 0x02	; 2
 90e:	af 0e       	add	r10, r31
 910:	b1 1c       	adc	r11, r1
 912:	d3 01       	movw	r26, r6
 914:	4d 91       	ld	r20, X+
 916:	5c 91       	ld	r21, X
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 918:	1f 3f       	cpi	r17, 0xFF	; 255
 91a:	09 f4       	brne	.+2      	; 0x91e <__DATA_REGION_LENGTH__+0x11e>
                        v_numOfDigitsToDisp_u8 = 16;
 91c:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	21 2f       	mov	r18, r17
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                    ssd1306_displayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 92a:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 92c:	30 c0       	rjmp	.+96     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 92e:	53 01       	movw	r10, r6
 930:	b4 e0       	ldi	r27, 0x04	; 4
 932:	ab 0e       	add	r10, r27
 934:	b1 1c       	adc	r11, r1
 936:	f3 01       	movw	r30, r6
 938:	40 81       	ld	r20, Z
 93a:	51 81       	ldd	r21, Z+1	; 0x01
 93c:	62 81       	ldd	r22, Z+2	; 0x02
 93e:	73 81       	ldd	r23, Z+3	; 0x03
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 940:	1f 3f       	cpi	r17, 0xFF	; 255
 942:	09 f4       	brne	.+2      	; 0x946 <__DATA_REGION_LENGTH__+0x146>
                        v_numOfDigitsToDisp_u8 = 16;
 944:	10 e1       	ldi	r17, 0x10	; 16
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 946:	21 2f       	mov	r18, r17
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	0e 94 ef 02 	call	0x5de	; 0x5de <ssd1306_displayNumber>
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 94e:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    ssd1306_displayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 950:	1e c0       	rjmp	.+60     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
 952:	53 01       	movw	r10, r6
 954:	f4 e0       	ldi	r31, 0x04	; 4
 956:	af 0e       	add	r10, r31
 958:	b1 1c       	adc	r11, r1
 95a:	d3 01       	movw	r26, r6
 95c:	6d 91       	ld	r22, X+
 95e:	7d 91       	ld	r23, X+
 960:	8d 91       	ld	r24, X+
 962:	9c 91       	ld	r25, X
                    ssd1306_displayFloatNumber(v_floatNum_f32);
 964:	0e 94 8d 03 	call	0x71a	; 0x71a <ssd1306_displayFloatNumber>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */

                    v_floatNum_f32 = va_arg(argp, double);
 968:	35 01       	movw	r6, r10
                    ssd1306_displayFloatNumber(v_floatNum_f32);

                    break;
 96a:	11 c0       	rjmp	.+34     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 96c:	53 01       	movw	r10, r6
 96e:	b2 e0       	ldi	r27, 0x02	; 2
 970:	ab 0e       	add	r10, r27
 972:	b1 1c       	adc	r11, r1
                    ssd1306_displayString(str);
 974:	f3 01       	movw	r30, r6
 976:	80 81       	ld	r24, Z
 978:	91 81       	ldd	r25, Z+1	; 0x01
 97a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <ssd1306_displayString>
                    break;
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 97e:	35 01       	movw	r6, r10
                    ssd1306_displayString(str);
                    break;
 980:	06 c0       	rjmp	.+12     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
                    
                case '%':
                    ssd1306_displayChar('%');
 982:	85 e2       	ldi	r24, 0x25	; 37
 984:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>
                    break;
 988:	02 c0       	rjmp	.+4      	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            ssd1306_displayChar(ch);
 98a:	0e 94 8c 02 	call	0x518	; 0x518 <ssd1306_displayChar>

    
    va_start(argp, argList);
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 98e:	ff ef       	ldi	r31, 0xFF	; 255
 990:	ef 1a       	sub	r14, r31
 992:	ff 0a       	sbc	r15, r31
 994:	d7 01       	movw	r26, r14
 996:	8c 91       	ld	r24, X
 998:	81 11       	cpse	r24, r1
 99a:	0a cf       	rjmp	.-492    	; 0x7b0 <ssd1306__printf+0x26>
            ssd1306_displayChar(ch);
        }
    }
    
    va_end(argp);
}
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	1f 91       	pop	r17
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	bf 90       	pop	r11
 9a8:	af 90       	pop	r10
 9aa:	7f 90       	pop	r7
 9ac:	6f 90       	pop	r6
 9ae:	5f 90       	pop	r5
 9b0:	4f 90       	pop	r4
 9b2:	08 95       	ret

000009b4 <__subsf3>:
 9b4:	50 58       	subi	r21, 0x80	; 128

000009b6 <__addsf3>:
 9b6:	bb 27       	eor	r27, r27
 9b8:	aa 27       	eor	r26, r26
 9ba:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__addsf3x>
 9be:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_round>
 9c2:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscA>
 9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__addsf3+0x20>
 9c8:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscB>
 9cc:	20 f0       	brcs	.+8      	; 0x9d6 <__addsf3+0x20>
 9ce:	39 f4       	brne	.+14     	; 0x9de <__addsf3+0x28>
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	19 f4       	brne	.+6      	; 0x9da <__addsf3+0x24>
 9d4:	26 f4       	brtc	.+8      	; 0x9de <__addsf3+0x28>
 9d6:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_nan>
 9da:	0e f4       	brtc	.+2      	; 0x9de <__addsf3+0x28>
 9dc:	e0 95       	com	r30
 9de:	e7 fb       	bst	r30, 7
 9e0:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>

000009e4 <__addsf3x>:
 9e4:	e9 2f       	mov	r30, r25
 9e6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_split3>
 9ea:	58 f3       	brcs	.-42     	; 0x9c2 <__addsf3+0xc>
 9ec:	ba 17       	cp	r27, r26
 9ee:	62 07       	cpc	r22, r18
 9f0:	73 07       	cpc	r23, r19
 9f2:	84 07       	cpc	r24, r20
 9f4:	95 07       	cpc	r25, r21
 9f6:	20 f0       	brcs	.+8      	; 0xa00 <__addsf3x+0x1c>
 9f8:	79 f4       	brne	.+30     	; 0xa18 <__addsf3x+0x34>
 9fa:	a6 f5       	brtc	.+104    	; 0xa64 <__addsf3x+0x80>
 9fc:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_zero>
 a00:	0e f4       	brtc	.+2      	; 0xa04 <__addsf3x+0x20>
 a02:	e0 95       	com	r30
 a04:	0b 2e       	mov	r0, r27
 a06:	ba 2f       	mov	r27, r26
 a08:	a0 2d       	mov	r26, r0
 a0a:	0b 01       	movw	r0, r22
 a0c:	b9 01       	movw	r22, r18
 a0e:	90 01       	movw	r18, r0
 a10:	0c 01       	movw	r0, r24
 a12:	ca 01       	movw	r24, r20
 a14:	a0 01       	movw	r20, r0
 a16:	11 24       	eor	r1, r1
 a18:	ff 27       	eor	r31, r31
 a1a:	59 1b       	sub	r21, r25
 a1c:	99 f0       	breq	.+38     	; 0xa44 <__addsf3x+0x60>
 a1e:	59 3f       	cpi	r21, 0xF9	; 249
 a20:	50 f4       	brcc	.+20     	; 0xa36 <__addsf3x+0x52>
 a22:	50 3e       	cpi	r21, 0xE0	; 224
 a24:	68 f1       	brcs	.+90     	; 0xa80 <__addsf3x+0x9c>
 a26:	1a 16       	cp	r1, r26
 a28:	f0 40       	sbci	r31, 0x00	; 0
 a2a:	a2 2f       	mov	r26, r18
 a2c:	23 2f       	mov	r18, r19
 a2e:	34 2f       	mov	r19, r20
 a30:	44 27       	eor	r20, r20
 a32:	58 5f       	subi	r21, 0xF8	; 248
 a34:	f3 cf       	rjmp	.-26     	; 0xa1c <__addsf3x+0x38>
 a36:	46 95       	lsr	r20
 a38:	37 95       	ror	r19
 a3a:	27 95       	ror	r18
 a3c:	a7 95       	ror	r26
 a3e:	f0 40       	sbci	r31, 0x00	; 0
 a40:	53 95       	inc	r21
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__addsf3x+0x52>
 a44:	7e f4       	brtc	.+30     	; 0xa64 <__addsf3x+0x80>
 a46:	1f 16       	cp	r1, r31
 a48:	ba 0b       	sbc	r27, r26
 a4a:	62 0b       	sbc	r22, r18
 a4c:	73 0b       	sbc	r23, r19
 a4e:	84 0b       	sbc	r24, r20
 a50:	ba f0       	brmi	.+46     	; 0xa80 <__addsf3x+0x9c>
 a52:	91 50       	subi	r25, 0x01	; 1
 a54:	a1 f0       	breq	.+40     	; 0xa7e <__addsf3x+0x9a>
 a56:	ff 0f       	add	r31, r31
 a58:	bb 1f       	adc	r27, r27
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	c2 f7       	brpl	.-16     	; 0xa52 <__addsf3x+0x6e>
 a62:	0e c0       	rjmp	.+28     	; 0xa80 <__addsf3x+0x9c>
 a64:	ba 0f       	add	r27, r26
 a66:	62 1f       	adc	r22, r18
 a68:	73 1f       	adc	r23, r19
 a6a:	84 1f       	adc	r24, r20
 a6c:	48 f4       	brcc	.+18     	; 0xa80 <__addsf3x+0x9c>
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b7 95       	ror	r27
 a76:	f7 95       	ror	r31
 a78:	9e 3f       	cpi	r25, 0xFE	; 254
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0x9a>
 a7c:	b0 cf       	rjmp	.-160    	; 0x9de <__addsf3+0x28>
 a7e:	93 95       	inc	r25
 a80:	88 0f       	add	r24, r24
 a82:	08 f0       	brcs	.+2      	; 0xa86 <__addsf3x+0xa2>
 a84:	99 27       	eor	r25, r25
 a86:	ee 0f       	add	r30, r30
 a88:	97 95       	ror	r25
 a8a:	87 95       	ror	r24
 a8c:	08 95       	ret

00000a8e <__fixunssfsi>:
 a8e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_splitA>
 a92:	88 f0       	brcs	.+34     	; 0xab6 <__fixunssfsi+0x28>
 a94:	9f 57       	subi	r25, 0x7F	; 127
 a96:	98 f0       	brcs	.+38     	; 0xabe <__fixunssfsi+0x30>
 a98:	b9 2f       	mov	r27, r25
 a9a:	99 27       	eor	r25, r25
 a9c:	b7 51       	subi	r27, 0x17	; 23
 a9e:	b0 f0       	brcs	.+44     	; 0xacc <__fixunssfsi+0x3e>
 aa0:	e1 f0       	breq	.+56     	; 0xada <__fixunssfsi+0x4c>
 aa2:	66 0f       	add	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	1a f0       	brmi	.+6      	; 0xab2 <__fixunssfsi+0x24>
 aac:	ba 95       	dec	r27
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__fixunssfsi+0x14>
 ab0:	14 c0       	rjmp	.+40     	; 0xada <__fixunssfsi+0x4c>
 ab2:	b1 30       	cpi	r27, 0x01	; 1
 ab4:	91 f0       	breq	.+36     	; 0xada <__fixunssfsi+0x4c>
 ab6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_zero>
 aba:	b1 e0       	ldi	r27, 0x01	; 1
 abc:	08 95       	ret
 abe:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_zero>
 ac2:	67 2f       	mov	r22, r23
 ac4:	78 2f       	mov	r23, r24
 ac6:	88 27       	eor	r24, r24
 ac8:	b8 5f       	subi	r27, 0xF8	; 248
 aca:	39 f0       	breq	.+14     	; 0xada <__fixunssfsi+0x4c>
 acc:	b9 3f       	cpi	r27, 0xF9	; 249
 ace:	cc f3       	brlt	.-14     	; 0xac2 <__fixunssfsi+0x34>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b3 95       	inc	r27
 ad8:	d9 f7       	brne	.-10     	; 0xad0 <__fixunssfsi+0x42>
 ada:	3e f4       	brtc	.+14     	; 0xaea <__fixunssfsi+0x5c>
 adc:	90 95       	com	r25
 ade:	80 95       	com	r24
 ae0:	70 95       	com	r23
 ae2:	61 95       	neg	r22
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255
 ae6:	8f 4f       	sbci	r24, 0xFF	; 255
 ae8:	9f 4f       	sbci	r25, 0xFF	; 255
 aea:	08 95       	ret

00000aec <__floatunsisf>:
 aec:	e8 94       	clt
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__floatsisf+0x12>

00000af0 <__floatsisf>:
 af0:	97 fb       	bst	r25, 7
 af2:	3e f4       	brtc	.+14     	; 0xb02 <__floatsisf+0x12>
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	99 23       	and	r25, r25
 b04:	a9 f0       	breq	.+42     	; 0xb30 <__floatsisf+0x40>
 b06:	f9 2f       	mov	r31, r25
 b08:	96 e9       	ldi	r25, 0x96	; 150
 b0a:	bb 27       	eor	r27, r27
 b0c:	93 95       	inc	r25
 b0e:	f6 95       	lsr	r31
 b10:	87 95       	ror	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	b7 95       	ror	r27
 b18:	f1 11       	cpse	r31, r1
 b1a:	f8 cf       	rjmp	.-16     	; 0xb0c <__floatsisf+0x1c>
 b1c:	fa f4       	brpl	.+62     	; 0xb5c <__floatsisf+0x6c>
 b1e:	bb 0f       	add	r27, r27
 b20:	11 f4       	brne	.+4      	; 0xb26 <__floatsisf+0x36>
 b22:	60 ff       	sbrs	r22, 0
 b24:	1b c0       	rjmp	.+54     	; 0xb5c <__floatsisf+0x6c>
 b26:	6f 5f       	subi	r22, 0xFF	; 255
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	16 c0       	rjmp	.+44     	; 0xb5c <__floatsisf+0x6c>
 b30:	88 23       	and	r24, r24
 b32:	11 f0       	breq	.+4      	; 0xb38 <__floatsisf+0x48>
 b34:	96 e9       	ldi	r25, 0x96	; 150
 b36:	11 c0       	rjmp	.+34     	; 0xb5a <__floatsisf+0x6a>
 b38:	77 23       	and	r23, r23
 b3a:	21 f0       	breq	.+8      	; 0xb44 <__floatsisf+0x54>
 b3c:	9e e8       	ldi	r25, 0x8E	; 142
 b3e:	87 2f       	mov	r24, r23
 b40:	76 2f       	mov	r23, r22
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <__floatsisf+0x5e>
 b44:	66 23       	and	r22, r22
 b46:	71 f0       	breq	.+28     	; 0xb64 <__floatsisf+0x74>
 b48:	96 e8       	ldi	r25, 0x86	; 134
 b4a:	86 2f       	mov	r24, r22
 b4c:	70 e0       	ldi	r23, 0x00	; 0
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	2a f0       	brmi	.+10     	; 0xb5c <__floatsisf+0x6c>
 b52:	9a 95       	dec	r25
 b54:	66 0f       	add	r22, r22
 b56:	77 1f       	adc	r23, r23
 b58:	88 1f       	adc	r24, r24
 b5a:	da f7       	brpl	.-10     	; 0xb52 <__floatsisf+0x62>
 b5c:	88 0f       	add	r24, r24
 b5e:	96 95       	lsr	r25
 b60:	87 95       	ror	r24
 b62:	97 f9       	bld	r25, 7
 b64:	08 95       	ret

00000b66 <__fp_inf>:
 b66:	97 f9       	bld	r25, 7
 b68:	9f 67       	ori	r25, 0x7F	; 127
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	08 95       	ret

00000b72 <__fp_nan>:
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	80 ec       	ldi	r24, 0xC0	; 192
 b76:	08 95       	ret

00000b78 <__fp_pscA>:
 b78:	00 24       	eor	r0, r0
 b7a:	0a 94       	dec	r0
 b7c:	16 16       	cp	r1, r22
 b7e:	17 06       	cpc	r1, r23
 b80:	18 06       	cpc	r1, r24
 b82:	09 06       	cpc	r0, r25
 b84:	08 95       	ret

00000b86 <__fp_pscB>:
 b86:	00 24       	eor	r0, r0
 b88:	0a 94       	dec	r0
 b8a:	12 16       	cp	r1, r18
 b8c:	13 06       	cpc	r1, r19
 b8e:	14 06       	cpc	r1, r20
 b90:	05 06       	cpc	r0, r21
 b92:	08 95       	ret

00000b94 <__fp_round>:
 b94:	09 2e       	mov	r0, r25
 b96:	03 94       	inc	r0
 b98:	00 0c       	add	r0, r0
 b9a:	11 f4       	brne	.+4      	; 0xba0 <__fp_round+0xc>
 b9c:	88 23       	and	r24, r24
 b9e:	52 f0       	brmi	.+20     	; 0xbb4 <__fp_round+0x20>
 ba0:	bb 0f       	add	r27, r27
 ba2:	40 f4       	brcc	.+16     	; 0xbb4 <__fp_round+0x20>
 ba4:	bf 2b       	or	r27, r31
 ba6:	11 f4       	brne	.+4      	; 0xbac <__fp_round+0x18>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__fp_round+0x20>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__fp_split3>:
 bb6:	57 fd       	sbrc	r21, 7
 bb8:	90 58       	subi	r25, 0x80	; 128
 bba:	44 0f       	add	r20, r20
 bbc:	55 1f       	adc	r21, r21
 bbe:	59 f0       	breq	.+22     	; 0xbd6 <__fp_splitA+0x10>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	71 f0       	breq	.+28     	; 0xbe0 <__fp_splitA+0x1a>
 bc4:	47 95       	ror	r20

00000bc6 <__fp_splitA>:
 bc6:	88 0f       	add	r24, r24
 bc8:	97 fb       	bst	r25, 7
 bca:	99 1f       	adc	r25, r25
 bcc:	61 f0       	breq	.+24     	; 0xbe6 <__fp_splitA+0x20>
 bce:	9f 3f       	cpi	r25, 0xFF	; 255
 bd0:	79 f0       	breq	.+30     	; 0xbf0 <__fp_splitA+0x2a>
 bd2:	87 95       	ror	r24
 bd4:	08 95       	ret
 bd6:	12 16       	cp	r1, r18
 bd8:	13 06       	cpc	r1, r19
 bda:	14 06       	cpc	r1, r20
 bdc:	55 1f       	adc	r21, r21
 bde:	f2 cf       	rjmp	.-28     	; 0xbc4 <__fp_split3+0xe>
 be0:	46 95       	lsr	r20
 be2:	f1 df       	rcall	.-30     	; 0xbc6 <__fp_splitA>
 be4:	08 c0       	rjmp	.+16     	; 0xbf6 <__fp_splitA+0x30>
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	99 1f       	adc	r25, r25
 bee:	f1 cf       	rjmp	.-30     	; 0xbd2 <__fp_splitA+0xc>
 bf0:	86 95       	lsr	r24
 bf2:	71 05       	cpc	r23, r1
 bf4:	61 05       	cpc	r22, r1
 bf6:	08 94       	sec
 bf8:	08 95       	ret

00000bfa <__fp_zero>:
 bfa:	e8 94       	clt

00000bfc <__fp_szero>:
 bfc:	bb 27       	eor	r27, r27
 bfe:	66 27       	eor	r22, r22
 c00:	77 27       	eor	r23, r23
 c02:	cb 01       	movw	r24, r22
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__mulsf3>:
 c08:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3x>
 c0c:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_round>
 c10:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscA>
 c14:	38 f0       	brcs	.+14     	; 0xc24 <__mulsf3+0x1c>
 c16:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscB>
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__mulsf3+0x1c>
 c1c:	95 23       	and	r25, r21
 c1e:	11 f0       	breq	.+4      	; 0xc24 <__mulsf3+0x1c>
 c20:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 c24:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_nan>
 c28:	11 24       	eor	r1, r1
 c2a:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>

00000c2e <__mulsf3x>:
 c2e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_split3>
 c32:	70 f3       	brcs	.-36     	; 0xc10 <__mulsf3+0x8>

00000c34 <__mulsf3_pse>:
 c34:	95 9f       	mul	r25, r21
 c36:	c1 f3       	breq	.-16     	; 0xc28 <__mulsf3+0x20>
 c38:	95 0f       	add	r25, r21
 c3a:	50 e0       	ldi	r21, 0x00	; 0
 c3c:	55 1f       	adc	r21, r21
 c3e:	62 9f       	mul	r22, r18
 c40:	f0 01       	movw	r30, r0
 c42:	72 9f       	mul	r23, r18
 c44:	bb 27       	eor	r27, r27
 c46:	f0 0d       	add	r31, r0
 c48:	b1 1d       	adc	r27, r1
 c4a:	63 9f       	mul	r22, r19
 c4c:	aa 27       	eor	r26, r26
 c4e:	f0 0d       	add	r31, r0
 c50:	b1 1d       	adc	r27, r1
 c52:	aa 1f       	adc	r26, r26
 c54:	64 9f       	mul	r22, r20
 c56:	66 27       	eor	r22, r22
 c58:	b0 0d       	add	r27, r0
 c5a:	a1 1d       	adc	r26, r1
 c5c:	66 1f       	adc	r22, r22
 c5e:	82 9f       	mul	r24, r18
 c60:	22 27       	eor	r18, r18
 c62:	b0 0d       	add	r27, r0
 c64:	a1 1d       	adc	r26, r1
 c66:	62 1f       	adc	r22, r18
 c68:	73 9f       	mul	r23, r19
 c6a:	b0 0d       	add	r27, r0
 c6c:	a1 1d       	adc	r26, r1
 c6e:	62 1f       	adc	r22, r18
 c70:	83 9f       	mul	r24, r19
 c72:	a0 0d       	add	r26, r0
 c74:	61 1d       	adc	r22, r1
 c76:	22 1f       	adc	r18, r18
 c78:	74 9f       	mul	r23, r20
 c7a:	33 27       	eor	r19, r19
 c7c:	a0 0d       	add	r26, r0
 c7e:	61 1d       	adc	r22, r1
 c80:	23 1f       	adc	r18, r19
 c82:	84 9f       	mul	r24, r20
 c84:	60 0d       	add	r22, r0
 c86:	21 1d       	adc	r18, r1
 c88:	82 2f       	mov	r24, r18
 c8a:	76 2f       	mov	r23, r22
 c8c:	6a 2f       	mov	r22, r26
 c8e:	11 24       	eor	r1, r1
 c90:	9f 57       	subi	r25, 0x7F	; 127
 c92:	50 40       	sbci	r21, 0x00	; 0
 c94:	9a f0       	brmi	.+38     	; 0xcbc <__mulsf3_pse+0x88>
 c96:	f1 f0       	breq	.+60     	; 0xcd4 <__mulsf3_pse+0xa0>
 c98:	88 23       	and	r24, r24
 c9a:	4a f0       	brmi	.+18     	; 0xcae <__mulsf3_pse+0x7a>
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	bb 1f       	adc	r27, r27
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	91 50       	subi	r25, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	a9 f7       	brne	.-22     	; 0xc98 <__mulsf3_pse+0x64>
 cae:	9e 3f       	cpi	r25, 0xFE	; 254
 cb0:	51 05       	cpc	r21, r1
 cb2:	80 f0       	brcs	.+32     	; 0xcd4 <__mulsf3_pse+0xa0>
 cb4:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 cb8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>
 cbc:	5f 3f       	cpi	r21, 0xFF	; 255
 cbe:	e4 f3       	brlt	.-8      	; 0xcb8 <__mulsf3_pse+0x84>
 cc0:	98 3e       	cpi	r25, 0xE8	; 232
 cc2:	d4 f3       	brlt	.-12     	; 0xcb8 <__mulsf3_pse+0x84>
 cc4:	86 95       	lsr	r24
 cc6:	77 95       	ror	r23
 cc8:	67 95       	ror	r22
 cca:	b7 95       	ror	r27
 ccc:	f7 95       	ror	r31
 cce:	e7 95       	ror	r30
 cd0:	9f 5f       	subi	r25, 0xFF	; 255
 cd2:	c1 f7       	brne	.-16     	; 0xcc4 <__mulsf3_pse+0x90>
 cd4:	fe 2b       	or	r31, r30
 cd6:	88 0f       	add	r24, r24
 cd8:	91 1d       	adc	r25, r1
 cda:	96 95       	lsr	r25
 cdc:	87 95       	ror	r24
 cde:	97 f9       	bld	r25, 7
 ce0:	08 95       	ret

00000ce2 <__udivmodsi4>:
 ce2:	a1 e2       	ldi	r26, 0x21	; 33
 ce4:	1a 2e       	mov	r1, r26
 ce6:	aa 1b       	sub	r26, r26
 ce8:	bb 1b       	sub	r27, r27
 cea:	fd 01       	movw	r30, r26
 cec:	0d c0       	rjmp	.+26     	; 0xd08 <__udivmodsi4_ep>

00000cee <__udivmodsi4_loop>:
 cee:	aa 1f       	adc	r26, r26
 cf0:	bb 1f       	adc	r27, r27
 cf2:	ee 1f       	adc	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	a2 17       	cp	r26, r18
 cf8:	b3 07       	cpc	r27, r19
 cfa:	e4 07       	cpc	r30, r20
 cfc:	f5 07       	cpc	r31, r21
 cfe:	20 f0       	brcs	.+8      	; 0xd08 <__udivmodsi4_ep>
 d00:	a2 1b       	sub	r26, r18
 d02:	b3 0b       	sbc	r27, r19
 d04:	e4 0b       	sbc	r30, r20
 d06:	f5 0b       	sbc	r31, r21

00000d08 <__udivmodsi4_ep>:
 d08:	66 1f       	adc	r22, r22
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 1f       	adc	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	1a 94       	dec	r1
 d12:	69 f7       	brne	.-38     	; 0xcee <__udivmodsi4_loop>
 d14:	60 95       	com	r22
 d16:	70 95       	com	r23
 d18:	80 95       	com	r24
 d1a:	90 95       	com	r25
 d1c:	9b 01       	movw	r18, r22
 d1e:	ac 01       	movw	r20, r24
 d20:	bd 01       	movw	r22, r26
 d22:	cf 01       	movw	r24, r30
 d24:	08 95       	ret

00000d26 <__tablejump2__>:
 d26:	ee 0f       	add	r30, r30
 d28:	ff 1f       	adc	r31, r31
 d2a:	05 90       	lpm	r0, Z+
 d2c:	f4 91       	lpm	r31, Z
 d2e:	e0 2d       	mov	r30, r0
 d30:	09 94       	ijmp

00000d32 <_exit>:
 d32:	f8 94       	cli

00000d34 <__stop_program>:
 d34:	ff cf       	rjmp	.-2      	; 0xd34 <__stop_program>
