
xmega-cap-touch-ic-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00802000  000004cc  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080203a  0080203a  0000059a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000369c  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d43  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000739  00000000  00000000  00005a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000061c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b47  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  00008e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_3>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_11>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ec ec       	ldi	r30, 0xCC	; 204
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 33       	cpi	r26, 0x3A	; 58
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	aa e3       	ldi	r26, 0x3A	; 58
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 36       	cpi	r26, 0x69	; 105
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  e2:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <init_clk>:

void test_get_prod_and_vend()
{
	twi_read(CAP_SENSE_PRODUCT_ID_REG, 1);
	prod_id = twi_data_buffer[0];
	vend_id = twi_data_buffer[1];
  ea:	88 ed       	ldi	r24, 0xD8	; 216
  ec:	84 bf       	out	0x34, r24	; 52
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
  f4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
  f8:	81 ff       	sbrs	r24, 1
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <init_clk+0xa>
  fc:	88 ed       	ldi	r24, 0xD8	; 216
  fe:	84 bf       	out	0x34, r24	; 52
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
 106:	08 95       	ret

00000108 <note_per_init>:
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	13 c0       	rjmp	.+38     	; 0x132 <note_per_init+0x2a>
 10c:	24 2f       	mov	r18, r20
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	f9 01       	movw	r30, r18
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	f0 4e       	sbci	r31, 0xE0	; 224
 11a:	60 81       	ld	r22, Z
 11c:	71 81       	ldd	r23, Z+1	; 0x01
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	9d e3       	ldi	r25, 0x3D	; 61
 122:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__udivmodhi4>
 126:	f9 01       	movw	r30, r18
 128:	e3 5c       	subi	r30, 0xC3	; 195
 12a:	ff 4d       	sbci	r31, 0xDF	; 223
 12c:	60 83       	st	Z, r22
 12e:	71 83       	std	Z+1, r23	; 0x01
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	40 31       	cpi	r20, 0x10	; 16
 134:	58 f3       	brcs	.-42     	; 0x10c <note_per_init+0x4>
 136:	08 95       	ret

00000138 <init_interrupts>:
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
 13e:	08 95       	ret

00000140 <init_twi>:
 140:	84 e9       	ldi	r24, 0x94	; 148
 142:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
 146:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
 14a:	e1 e8       	ldi	r30, 0x81	; 129
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	80 81       	ld	r24, Z
 150:	88 6f       	ori	r24, 0xF8	; 248
 152:	80 83       	st	Z, r24
 154:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
 158:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 15c:	e4 e8       	ldi	r30, 0x84	; 132
 15e:	f4 e0       	ldi	r31, 0x04	; 4
 160:	80 81       	ld	r24, Z
 162:	8d 6c       	ori	r24, 0xCD	; 205
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <twi_read>:
 168:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <__data_end>
 16c:	10 92 3b 20 	sts	0x203B, r1	; 0x80203b <twi_data_count>
 170:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <twi_transfer_complete>
 174:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <twi_data_buffer>
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
 17e:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <twi_transfer_complete>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	e1 f7       	brne	.-8      	; 0x17e <twi_read+0x16>
 186:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <__data_end>
 18a:	10 92 3b 20 	sts	0x203B, r1	; 0x80203b <twi_data_count>
 18e:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <twi_transfer_complete>
 192:	81 e5       	ldi	r24, 0x51	; 81
 194:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
 198:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <twi_transfer_complete>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	e1 f7       	brne	.-8      	; 0x198 <twi_read+0x30>
 1a0:	08 95       	ret

000001a2 <twi_write>:
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	90 93 3a 20 	sts	0x203A, r25	; 0x80203a <__data_end>
 1a8:	10 92 3b 20 	sts	0x203B, r1	; 0x80203b <twi_data_count>
 1ac:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <twi_transfer_complete>
 1b0:	ee e5       	ldi	r30, 0x5E	; 94
 1b2:	f0 e2       	ldi	r31, 0x20	; 32
 1b4:	80 83       	st	Z, r24
 1b6:	61 83       	std	Z+1, r22	; 0x01
 1b8:	80 e5       	ldi	r24, 0x50	; 80
 1ba:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
 1be:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <twi_transfer_complete>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	e1 f7       	brne	.-8      	; 0x1be <twi_write+0x1c>
 1c6:	08 95       	ret

000001c8 <init_timer_1>:
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
 1ce:	e0 e4       	ldi	r30, 0x40	; 64
 1d0:	f8 e0       	ldi	r31, 0x08	; 8
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	81 83       	std	Z+1, r24	; 0x01
 1d6:	84 83       	std	Z+4, r24	; 0x04
 1d8:	08 95       	ret

000001da <multi_touch_init>:
}

void multi_touch_init()
{
	twi_write(0x2A, 0b10001100); //multi touch
 1da:	6c e8       	ldi	r22, 0x8C	; 140
 1dc:	8a e2       	ldi	r24, 0x2A	; 42
 1de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <twi_write>
	twi_write(0x2B, 0); //multi touch pattern
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8b e2       	ldi	r24, 0x2B	; 43
 1e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <twi_write>
	twi_write(0x1F, 0x3F); //sensitivity: lowest
 1ea:	6f e3       	ldi	r22, 0x3F	; 63
 1ec:	8f e1       	ldi	r24, 0x1F	; 31
 1ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <twi_write>
	twi_write(0x20, 0b10100000); //SMBus config
 1f2:	60 ea       	ldi	r22, 0xA0	; 160
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <twi_write>
 1fa:	08 95       	ret

000001fc <read_buttons>:
}

void read_buttons()
{
	uint8_t ctrl = 0;
	twi_read(CAP_SENSE_MAIN_CTRL, 3);
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 b4 00 	call	0x168	; 0x168 <twi_read>
	ctrl = 0;
	status = twi_data_buffer[2];
 204:	ee e5       	ldi	r30, 0x5E	; 94
 206:	f0 e2       	ldi	r31, 0x20	; 32
 208:	82 81       	ldd	r24, Z+2	; 0x02
 20a:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <status>
	buttons = twi_data_buffer[3];
 20e:	83 81       	ldd	r24, Z+3	; 0x03
 210:	80 93 5d 20 	sts	0x205D, r24	; 0x80205d <buttons>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e7       	ldi	r24, 0x7F	; 127
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 21e:	00 00       	nop
	_delay_ms(2);
	twi_write(CAP_SENSE_MAIN_CTRL, ctrl & 0xFE); //clear INT
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <twi_write>
 228:	08 95       	ret

0000022a <test_edma_dac_event>:

}

void test_edma_dac_event(uint16_t *data, uint8_t len)
// data[] contains a lookup table of length (len)
{
 22a:	ac 01       	movw	r20, r24
	PORTA.DIRSET = PIN2_bm;
 22c:	94 e0       	ldi	r25, 0x04	; 4
 22e:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <__TEXT_REGION_LENGTH__+0x7fb601>
	
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
 232:	80 ec       	ldi	r24, 0xC0	; 192
 234:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
		EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f8 e0       	ldi	r31, 0x08	; 8
 23c:	20 eb       	ldi	r18, 0xB0	; 176
 23e:	34 e0       	ldi	r19, 0x04	; 4
 240:	26 a3       	std	Z+38, r18	; 0x26
 242:	37 a3       	std	Z+39, r19	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
 248:	a0 e0       	ldi	r26, 0x00	; 0
 24a:	b3 e0       	ldi	r27, 0x03	; 3
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	2c 93       	st	X, r18
 252:	11 97       	sbiw	r26, 0x01	; 1
		DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
		DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	12 96       	adiw	r26, 0x02	; 2
 258:	8c 93       	st	X, r24
 25a:	12 97       	sbiw	r26, 0x02	; 2
		DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
 25c:	13 96       	adiw	r26, 0x03	; 3
 25e:	2c 93       	st	X, r18
 260:	13 97       	sbiw	r26, 0x03	; 3
		DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	8c 93       	st	X, r24
	
	////////////////////////////////////////////  EDMA config
	EDMA.CTRL = EDMA_RESET_bm;
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	20 e4       	ldi	r18, 0x40	; 64
 26c:	20 83       	st	Z, r18
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
 26e:	20 8b       	std	Z+16, r18	; 0x10
	EDMA.CH0.ADDRCTRL =
 270:	81 e3       	ldi	r24, 0x31	; 49
 272:	82 8b       	std	Z+18, r24	; 0x12
		EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
		EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
 274:	85 e1       	ldi	r24, 0x15	; 21
 276:	84 8b       	std	Z+20, r24	; 0x14
		EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	EDMA.CH0.TRFCNT = len*2;                  // data array has len values
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	66 8b       	std	Z+22, r22	; 0x16
 280:	77 8b       	std	Z+23, r23	; 0x17
	EDMA.CH0.ADDR = (uint16_t)data;           // this is the source SRAM address
 282:	40 8f       	std	Z+24, r20	; 0x18
 284:	51 8f       	std	Z+25, r21	; 0x19
	EDMA.CH0.CTRLA =
 286:	85 e8       	ldi	r24, 0x85	; 133
 288:	80 8b       	std	Z+16, r24	; 0x10
		EDMA_CH_ENABLE_bm |               //   enable EDMA Ch0
		EDMA_CH_SINGLE_bm |               //   one burst per trigger
		EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
	EDMA.CH0.CTRLB =
 28a:	83 e1       	ldi	r24, 0x13	; 19
 28c:	81 8b       	std	Z+17, r24	; 0x11
		EDMA_CH_TRNIF_bm |               //  Clear flag
		EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction

	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	80 83       	st	Z, r24
	
	
	PMIC.CTRL = PMIC_HILVLEN_bm;		  //  enable interrupts
 292:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
	DACA.CH0DATA = 4095;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	58 96       	adiw	r26, 0x18	; 24
 29c:	8d 93       	st	X+, r24
 29e:	9c 93       	st	X, r25
 2a0:	59 97       	sbiw	r26, 0x19	; 25
 2a2:	08 95       	ret

000002a4 <note_play>:
}

void note_play()
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	

	PORTA.OUTSET = PIN3_bm;
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
	TCC5.CCA = note_periods[buttons];// 31250;
 2ae:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <buttons>
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e3 5c       	subi	r30, 0xC3	; 195
 2ba:	ff 4d       	sbci	r31, 0xDF	; 223
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	c0 e4       	ldi	r28, 0x40	; 64
 2c2:	d8 e0       	ldi	r29, 0x08	; 8
 2c4:	88 a7       	std	Y+40, r24	; 0x28
 2c6:	99 a7       	std	Y+41, r25	; 0x29
	test_edma_dac_event(exp_decay_vals, 13);
 2c8:	6d e0       	ldi	r22, 0x0D	; 13
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	0e 94 15 01 	call	0x22a	; 0x22a <test_edma_dac_event>
	TCC5.CTRLA = TC_CLKSEL_DIV1024_gc;// TC_CLKSEL_DIV1024_gc;
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	88 83       	st	Y, r24
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <reset_play>:
uint16_t dac_data[] = {4095, 3071, 2047, 0};
uint8_t playing = 0;

void reset_play()
{
	PORTA.OUTCLR = PIN3_bm;
 2dc:	88 e0       	ldi	r24, 0x08	; 8
 2de:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7fb606>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
 2e2:	e0 e0       	ldi	r30, 0x00	; 0
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	81 89       	ldd	r24, Z+17	; 0x11
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
 2ec:	e0 e4       	ldi	r30, 0x40	; 64
 2ee:	f8 e0       	ldi	r31, 0x08	; 8
 2f0:	10 a2       	std	Z+32, r1	; 0x20
 2f2:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;	
 2f4:	10 82       	st	Z, r1
 2f6:	08 95       	ret

000002f8 <main>:
{
	uint8_t last_buttons = 0;
	
	//PORTD.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
	
	cli();
 2f8:	f8 94       	cli
	note_per_init();
 2fa:	0e 94 84 00 	call	0x108	; 0x108 <note_per_init>
	init_clk();
 2fe:	0e 94 75 00 	call	0xea	; 0xea <init_clk>
	init_interrupts();
 302:	0e 94 9c 00 	call	0x138	; 0x138 <init_interrupts>
	init_gpios();
	init_twi();
 306:	0e 94 a0 00 	call	0x140	; 0x140 <init_twi>
	init_timer_1();
 30a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_timer_1>
	//init_decay();
	
	sei();	
 30e:	78 94       	sei
//	test_get_prod_id();
//	test_get_vend_id();
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
 310:	e0 e6       	ldi	r30, 0x60	; 96
 312:	f6 e0       	ldi	r31, 0x06	; 6
 314:	8f e0       	ldi	r24, 0x0F	; 15
 316:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
 318:	86 83       	std	Z+6, r24	; 0x06
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	83 ec       	ldi	r24, 0xC3	; 195
 31e:	99 e0       	ldi	r25, 0x09	; 9
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x28>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x32>
 32a:	00 00       	nop
	_delay_ms(100);
	multi_touch_init();
 32c:	0e 94 ed 00 	call	0x1da	; 0x1da <multi_touch_init>
//	test_edma_dac_event(exp_decay_vals, 13);
	PORTA.DIRCLR = PIN4_bm;
 330:	e0 e0       	ldi	r30, 0x00	; 0
 332:	f6 e0       	ldi	r31, 0x06	; 6
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIRSET = PIN3_bm;
 338:	88 e0       	ldi	r24, 0x08	; 8
 33a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	84 8b       	std	Z+20, r24	; 0x14

	uint8_t played = 0;
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	01 c0       	rjmp	.+2      	; 0x346 <main+0x4e>
			
		}
		
		if (PORTA.IN & PIN4_bm)
		{
			played = 0;
 344:	c0 e0       	ldi	r28, 0x00	; 0

	uint8_t played = 0;
	
    while (1) 
    {
		read_buttons();
 346:	0e 94 fe 00 	call	0x1fc	; 0x1fc <read_buttons>
		
		PORTD.OUT = ((buttons >> 0) & 0x0F) << 0;
 34a:	80 91 5d 20 	lds	r24, 0x205D	; 0x80205d <buttons>
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <__TEXT_REGION_LENGTH__+0x7fb664>
		if (!(PORTA.IN & PIN4_bm) && !(played) && buttons)
 354:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
 358:	84 fd       	sbrc	r24, 4
 35a:	09 c0       	rjmp	.+18     	; 0x36e <main+0x76>
 35c:	c1 11       	cpse	r28, r1
 35e:	07 c0       	rjmp	.+14     	; 0x36e <main+0x76>
 360:	80 91 5d 20 	lds	r24, 0x205D	; 0x80205d <buttons>
 364:	88 23       	and	r24, r24
 366:	19 f0       	breq	.+6      	; 0x36e <main+0x76>
		{
			played = 1;

			
			note_play();
 368:	0e 94 52 01 	call	0x2a4	; 0x2a4 <note_play>
		read_buttons();
		
		PORTD.OUT = ((buttons >> 0) & 0x0F) << 0;
		if (!(PORTA.IN & PIN4_bm) && !(played) && buttons)
		{
			played = 1;
 36c:	c1 e0       	ldi	r28, 0x01	; 1
			
			note_play();
			
		}
		
		if (PORTA.IN & PIN4_bm)
 36e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
 372:	84 fd       	sbrc	r24, 4
 374:	e7 cf       	rjmp	.-50     	; 0x344 <main+0x4c>
 376:	e7 cf       	rjmp	.-50     	; 0x346 <main+0x4e>

00000378 <__vector_3>:
    }
}


ISR(EDMA_CH0_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	reset_play();
 39a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reset_play>
	//EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;   // re-enable EDMA Ch0 after trans complete
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_11>:

 ISR(TWIC_TWIM_vect)
 {
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	8f 93       	push	r24
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	 //If TWI arbitration is lost send STOP
	 
	 if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
 3d0:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 3d4:	83 ff       	sbrs	r24, 3
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <__vector_11+0x1e>
	 {
		 TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	 }
	 
	 //If TWI bus error flag is set or NACK received then send STOP
	 
	 if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
 3de:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 3e2:	82 fd       	sbrc	r24, 2
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__vector_11+0x2e>
 3e6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 3ea:	84 ff       	sbrs	r24, 4
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <__vector_11+0x3a>
	 {
		 TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
 3ee:	e3 e8       	ldi	r30, 0x83	; 131
 3f0:	f4 e0       	ldi	r31, 0x04	; 4
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	80 83       	st	Z, r24
		 TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 83       	st	Z, r24
	 }

	if(twi_transfer_complete)
 3fa:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <twi_transfer_complete>
 3fe:	81 11       	cpse	r24, r1
 400:	47 c0       	rjmp	.+142    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		return;

	 //If TWI write interrupt flag is set
	 
	 if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
 402:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 406:	86 ff       	sbrs	r24, 6
 408:	20 c0       	rjmp	.+64     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	 {
		 if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
 40a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 40e:	84 fd       	sbrc	r24, 4
 410:	1c c0       	rjmp	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		 {
			 TWIC_MASTER_DATA=twi_data_buffer[twi_data_count++];
 412:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <twi_data_count>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	8e 0f       	add	r24, r30
 41a:	80 93 3b 20 	sts	0x203B, r24	; 0x80203b <twi_data_count>
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e2 5a       	subi	r30, 0xA2	; 162
 422:	ff 4d       	sbci	r31, 0xDF	; 223
 424:	80 81       	ld	r24, Z
 426:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			 
			 if(twi_no_of_bytes)
 42a:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__data_end>
 42e:	88 23       	and	r24, r24
 430:	31 f0       	breq	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			 {
				 twi_no_of_bytes--;
 432:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__data_end>
 436:	81 50       	subi	r24, 0x01	; 1
 438:	80 93 3a 20 	sts	0x203A, r24	; 0x80203a <__data_end>
 43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 }
			 else
			 {
				 TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
				 
				 twi_transfer_complete=1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <twi_transfer_complete>
		 }
	 }
	 
	 //If RTC read interrupt flag is set
	 
	 if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
 44a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
 44e:	88 23       	and	r24, r24
 450:	fc f4       	brge	.+62     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	 {
		 twi_data_buffer[twi_data_count++]=TWIC_MASTER_DATA;
 452:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <twi_data_count>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	8e 0f       	add	r24, r30
 45a:	80 93 3b 20 	sts	0x203B, r24	; 0x80203b <twi_data_count>
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
 464:	e2 5a       	subi	r30, 0xA2	; 162
 466:	ff 4d       	sbci	r31, 0xDF	; 223
 468:	80 83       	st	Z, r24
		 
		 if(twi_no_of_bytes==0)
 46a:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__data_end>
 46e:	81 11       	cpse	r24, r1
 470:	07 c0       	rjmp	.+14     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		 {
			 TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			 
			 twi_transfer_complete=1;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <twi_transfer_complete>
 47e:	08 c0       	rjmp	.+16     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		 }
		 else
		 {
			 twi_no_of_bytes--;
 480:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__data_end>
 484:	81 50       	subi	r24, 0x01	; 1
 486:	80 93 3a 20 	sts	0x203A, r24	; 0x80203a <__data_end>
			 
			 TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		 }
	 }
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	8f 91       	pop	r24
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__udivmodhi4>:
 4a0:	aa 1b       	sub	r26, r26
 4a2:	bb 1b       	sub	r27, r27
 4a4:	51 e1       	ldi	r21, 0x11	; 17
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__udivmodhi4_ep>

000004a8 <__udivmodhi4_loop>:
 4a8:	aa 1f       	adc	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	a6 17       	cp	r26, r22
 4ae:	b7 07       	cpc	r27, r23
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__udivmodhi4_ep>
 4b2:	a6 1b       	sub	r26, r22
 4b4:	b7 0b       	sbc	r27, r23

000004b6 <__udivmodhi4_ep>:
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	5a 95       	dec	r21
 4bc:	a9 f7       	brne	.-22     	; 0x4a8 <__udivmodhi4_loop>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
